/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip represents the /nokia-conf/configure/service/epipe/sap/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CfmVlanTag         *string                                                            `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress         *string                                                            `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan        NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip.
func (*NokiaConf_Configure_Service_Epipe_Sap_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ethernet represents the /nokia-conf/configure/service/epipe/sap/ethernet YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ethernet struct {
	Llf *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf `path:"llf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ethernet) IsYANGGoStruct() {}

// GetOrCreateLlf retrieves the value of the Llf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet) GetOrCreateLlf() *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf {
	if t.Llf != nil {
		return t.Llf
	}
	t.Llf = &NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf{}
	return t.Llf
}

// GetLlf returns the value of the Llf struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ethernet. If the receiver or the field Llf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet) GetLlf() *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf {
	if t != nil && t.Llf != nil {
		return t.Llf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Llf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ethernet.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf represents the /nokia-conf/configure/service/epipe/sap/ethernet/llf YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ethernet_Llf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress represents the /nokia-conf/configure/service/epipe/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress struct {
	AggregatePolicer *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer `path:"aggregate-policer" module:"nokia-conf"`
	Filter           *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter           `path:"filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos              `path:"qos" module:"nokia-conf"`
	QtagManipulation *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation `path:"qtag-manipulation" module:"nokia-conf"`
	VlanManipulation *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation `path:"vlan-manipulation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateAggregatePolicer retrieves the value of the AggregatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetOrCreateAggregatePolicer() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer {
	if t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	t.AggregatePolicer = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer{}
	return t.AggregatePolicer
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos{}
	return t.Qos
}

// GetOrCreateQtagManipulation retrieves the value of the QtagManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetOrCreateQtagManipulation() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation {
	if t.QtagManipulation != nil {
		return t.QtagManipulation
	}
	t.QtagManipulation = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation{}
	return t.QtagManipulation
}

// GetOrCreateVlanManipulation retrieves the value of the VlanManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetOrCreateVlanManipulation() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation {
	if t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	t.VlanManipulation = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation{}
	return t.VlanManipulation
}

// GetAggregatePolicer returns the value of the AggregatePolicer struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress. If the receiver or the field AggregatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetAggregatePolicer() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer {
	if t != nil && t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetFilter() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetQtagManipulation returns the value of the QtagManipulation struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress. If the receiver or the field QtagManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetQtagManipulation() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation {
	if t != nil && t.QtagManipulation != nil {
		return t.QtagManipulation
	}
	return nil
}

// GetVlanManipulation returns the value of the VlanManipulation struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress. If the receiver or the field VlanManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) GetVlanManipulation() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation {
	if t != nil && t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggregatePolicer.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.QtagManipulation.PopulateDefaults()
	t.VlanManipulation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer represents the /nokia-conf/configure/service/epipe/sap/ingress/aggregate-policer YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer struct {
	Burst NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Burst_Union `path:"burst" module:"nokia-conf"`
	Cbs   NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Cbs_Union   `path:"cbs" module:"nokia-conf"`
	Cir   NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Cir_Union   `path:"cir" module:"nokia-conf"`
	Rate  NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Rate_Union  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) IsYANGGoStruct() {}

// GetBurst retrieves the value of the leaf Burst from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Burst is set, it can
// safely use t.GetBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Burst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) GetBurst() NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Burst_Union {
	if t == nil || t.Burst == nil {
		return NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	return t.Burst
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) GetCbs() NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) GetRate() NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_AggrPolicerRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Burst == nil {
		t.Burst = NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_AggrPolicerRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_AggregatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter represents the /nokia-conf/configure/service/epipe/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos represents the /nokia-conf/configure/service/epipe/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                     `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                       `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                   `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria      `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                      `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                           `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                          `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                       `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/epipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation represents the /nokia-conf/configure/service/epipe/sap/ingress/qtag-manipulation YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation struct {
	CTag          *int32                                                                             `path:"c-tag" module:"nokia-conf"`
	PushDot1QVlan NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation_PushDot1QVlan_Union `path:"push-dot1q-vlan" module:"nokia-conf"`
	STag          *int32                                                                             `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) IsYANGGoStruct() {}

// GetCTag retrieves the value of the leaf CTag from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTag is set, it can
// safely use t.GetCTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) GetCTag() int32 {
	if t == nil || t.CTag == nil {
		return 0
	}
	return *t.CTag
}

// GetPushDot1QVlan retrieves the value of the leaf PushDot1QVlan from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushDot1QVlan is set, it can
// safely use t.GetPushDot1QVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushDot1QVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) GetPushDot1QVlan() NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation_PushDot1QVlan_Union {
	if t == nil || t.PushDot1QVlan == nil {
		return nil
	}
	return t.PushDot1QVlan
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) GetSTag() int32 {
	if t == nil || t.STag == nil {
		return 0
	}
	return *t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_QtagManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation represents the /nokia-conf/configure/service/epipe/sap/ingress/vlan-manipulation YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation struct {
	Action   E_NokiaTypesServices_VlanManipulationIngressActionType                        `path:"action" module:"nokia-conf"`
	InnerTag NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation_InnerTag_Union `path:"inner-tag" module:"nokia-conf"`
	OuterTag NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation_OuterTag_Union `path:"outer-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) GetAction() E_NokiaTypesServices_VlanManipulationIngressActionType {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetInnerTag retrieves the value of the leaf InnerTag from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerTag is set, it can
// safely use t.GetInnerTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) GetInnerTag() NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation_InnerTag_Union {
	if t == nil || t.InnerTag == nil {
		return NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	return t.InnerTag
}

// GetOuterTag retrieves the value of the leaf OuterTag from the NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterTag is set, it can
// safely use t.GetOuterTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) GetOuterTag() NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation_OuterTag_Union {
	if t == nil || t.OuterTag == nil {
		return NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	return t.OuterTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InnerTag == nil {
		t.InnerTag = NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	if t.OuterTag == nil {
		t.OuterTag = NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation.
func (*NokiaConf_Configure_Service_Epipe_Sap_Ingress_VlanManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session represents the /nokia-conf/configure/service/epipe/sap/l2tpv3-session YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session struct {
	AdminState         E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	PseudoWire         *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire `path:"pseudo-wire" module:"nokia-conf"`
	Router             *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router     `path:"router" module:"nokia-conf"`
	VcId               *uint32                                                         `path:"vc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) IsYANGGoStruct() {}

// GetOrCreatePseudoWire retrieves the value of the PseudoWire field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetOrCreatePseudoWire() *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire {
	if t.PseudoWire != nil {
		return t.PseudoWire
	}
	t.PseudoWire = &NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire{}
	return t.PseudoWire
}

// GetOrCreateRouter retrieves the value of the Router field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetOrCreateRouter() *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router {
	if t.Router != nil {
		return t.Router
	}
	t.Router = &NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router{}
	return t.Router
}

// GetPseudoWire returns the value of the PseudoWire struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session. If the receiver or the field PseudoWire is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetPseudoWire() *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire {
	if t != nil && t.PseudoWire != nil {
		return t.PseudoWire
	}
	return nil
}

// GetRouter returns the value of the Router struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session. If the receiver or the field Router is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetRouter() *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router {
	if t != nil && t.Router != nil {
		return t.Router
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVcId retrieves the value of the leaf VcId from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcId is set, it can
// safely use t.GetVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) GetVcId() uint32 {
	if t == nil || t.VcId == nil {
		return 0
	}
	return *t.VcId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PseudoWire.PopulateDefaults()
	t.Router.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session.
func (*NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire represents the /nokia-conf/configure/service/epipe/sap/l2tpv3-session/pseudo-wire YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire struct {
	Ethernet       YANGEmpty `path:"ethernet" module:"nokia-conf"`
	EthernetVlanId *int32    `path:"ethernet-vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) GetEthernet() YANGEmpty {
	if t == nil || t.Ethernet == false {
		return false
	}
	return t.Ethernet
}

// GetEthernetVlanId retrieves the value of the leaf EthernetVlanId from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetVlanId is set, it can
// safely use t.GetEthernetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetVlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) GetEthernetVlanId() int32 {
	if t == nil || t.EthernetVlanId == nil {
		return 0
	}
	return *t.EthernetVlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire.
func (*NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router represents the /nokia-conf/configure/service/epipe/sap/l2tpv3-session/router YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router struct {
	Group          *string `path:"group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router.
func (*NokiaConf_Configure_Service_Epipe_Sap_L2Tpv3Session_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Lag represents the /nokia-conf/configure/service/epipe/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Lag struct {
	LinkMapProfile *int32                                                 `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Epipe_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Epipe_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Lag.
func (*NokiaConf_Configure_Service_Epipe_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/service/epipe/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Epipe_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_McRing represents the /nokia-conf/configure/service/epipe/sap/mc-ring YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_McRing struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	RingNode           *string  `path:"ring-node" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_McRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_McRing) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRingNode retrieves the value of the leaf RingNode from the NokiaConf_Configure_Service_Epipe_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingNode is set, it can
// safely use t.GetRingNode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingNode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) GetRingNode() string {
	if t == nil || t.RingNode == nil {
		return ""
	}
	return *t.RingNode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_McRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_McRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_McRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_McRing.
func (*NokiaConf_Configure_Service_Epipe_Sap_McRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy represents the /nokia-conf/configure/service/epipe/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy.
func (*NokiaConf_Configure_Service_Epipe_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 represents the /nokia-conf/configure/service/epipe/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Instance           *int32                                                                 `path:"instance" module:"nokia-conf"`
	Locator            map[string]*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator `path:"locator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) IsYANGGoStruct() {}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) NewLocator(LocatorName string) (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Service_Epipe_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) GetLocator(LocatorName string) *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator struct to the
// list Locator of NokiaConf_Configure_Service_Epipe_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) AppendLocator(v *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) GetInstance() int32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Instance == nil {
		return nil, fmt.Errorf("nil value for key Instance")
	}

	return map[string]interface{}{
		"instance": *t.Instance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SegmentRoutingV6.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator represents the /nokia-conf/configure/service/epipe/segment-routing-v6/locator YANG schema element.
type NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Function           *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function `path:"function" module:"nokia-conf"`
	LocatorName        *string                                                              `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) IsYANGGoStruct() {}

// GetOrCreateFunction retrieves the value of the Function field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) GetOrCreateFunction() *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function {
	if t.Function != nil {
		return t.Function
	}
	t.Function = &NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function{}
	return t.Function
}

// GetFunction returns the value of the Function struct pointer
// from NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator. If the receiver or the field Function is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) GetFunction() *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function {
	if t != nil && t.Function != nil {
		return t.Function
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Function.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function represents the /nokia-conf/configure/service/epipe/segment-routing-v6/locator/function YANG schema element.
type NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function struct {
	EndDx2 *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 `path:"end-dx2" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) IsYANGGoStruct() {}

// GetOrCreateEndDx2 retrieves the value of the EndDx2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) GetOrCreateEndDx2() *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 {
	if t.EndDx2 != nil {
		return t.EndDx2
	}
	t.EndDx2 = &NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2{}
	return t.EndDx2
}

// GetEndDx2 returns the value of the EndDx2 struct pointer
// from NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function. If the receiver or the field EndDx2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) GetEndDx2() *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 {
	if t != nil && t.EndDx2 != nil {
		return t.EndDx2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EndDx2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 represents the /nokia-conf/configure/service/epipe/segment-routing-v6/locator/function/end-dx2 YANG schema element.
type NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2.
func (*NokiaConf_Configure_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp represents the /nokia-conf/configure/service/epipe/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp struct {
	Aarp               *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp               `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy   *uint32                                                        `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	AdvServiceMtu      *int32                                                         `path:"adv-service-mtu" module:"nokia-conf"`
	AppProfile         *string                                                        `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          NokiaConf_Configure_Service_Epipe_SpokeSdp_Bandwidth_Union     `path:"bandwidth" module:"nokia-conf"`
	Bfd                *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd                `path:"bfd" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness        `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate        *string                                                        `path:"bfd-template" module:"nokia-conf"`
	CollectStats       *bool                                                          `path:"collect-stats" module:"nokia-conf"`
	ControlWord        *bool                                                          `path:"control-word" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection      `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                        `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress             `path:"egress" module:"nokia-conf"`
	Endpoint           *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint           `path:"endpoint" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                      `path:"entropy-label" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm             `path:"eth-cfm" module:"nokia-conf"`
	ForceVcForwarding  E_NokiaConf_Configure_Service_Epipe_SpokeSdp_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel          `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress            *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress            `path:"ingress" module:"nokia-conf"`
	MonitorOperGroup   *string                                                        `path:"monitor-oper-group" module:"nokia-conf"`
	OperGroup          *string                                                        `path:"oper-group" module:"nokia-conf"`
	PwStatus           *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus           `path:"pw-status" module:"nokia-conf"`
	SdpBindId          *string                                                        `path:"sdp-bind-id" module:"nokia-conf"`
	SourceBmac         *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac         `path:"source-bmac" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy      `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	VcType             E_NokiaTypesServices_EpipeSdpBindVcType                        `path:"vc-type" module:"nokia-conf"`
	VlanVcTag          *uint32                                                        `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreatePwStatus retrieves the value of the PwStatus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreatePwStatus() *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus {
	if t.PwStatus != nil {
		return t.PwStatus
	}
	t.PwStatus = &NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus{}
	return t.PwStatus
}

// GetOrCreateSourceBmac retrieves the value of the SourceBmac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateSourceBmac() *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac {
	if t.SourceBmac != nil {
		return t.SourceBmac
	}
	t.SourceBmac = &NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac{}
	return t.SourceBmac
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetAarp() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetBfd() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetCpuProtection() *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetEthCfm() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetPwStatus returns the value of the PwStatus struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field PwStatus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetPwStatus() *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus {
	if t != nil && t.PwStatus != nil {
		return t.PwStatus
	}
	return nil
}

// GetSourceBmac returns the value of the SourceBmac struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field SourceBmac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetSourceBmac() *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac {
	if t != nil && t.SourceBmac != nil {
		return t.SourceBmac
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetBandwidth() NokiaConf_Configure_Service_Epipe_SpokeSdp_Bandwidth_Union {
	if t == nil || t.Bandwidth == nil {
		return UnionUint32(0)
	}
	return t.Bandwidth
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetForceVcForwarding() E_NokiaConf_Configure_Service_Epipe_SpokeSdp_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetVcType() E_NokiaTypesServices_EpipeSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_EpipeSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		t.Bandwidth = UnionUint32(0)
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_EpipeSdpBindVcType_ether
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.PwStatus.PopulateDefaults()
	t.SourceBmac.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp represents the /nokia-conf/configure/service/epipe/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd represents the /nokia-conf/configure/service/epipe/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd struct {
	BfdLiveness    *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate    *string                                                     `path:"bfd-template" module:"nokia-conf"`
	FailureAction  E_NokiaTypesServices_SbindBfdFailAction                     `path:"failure-action" module:"nokia-conf"`
	WaitForUpTimer *uint32                                                     `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) GetFailureAction() E_NokiaTypesServices_SbindBfdFailAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaTypesServices_SbindBfdFailAction_none
	}
	return t.FailureAction
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureAction == 0 {
		t.FailureAction = NokiaTypesServices_SbindBfdFailAction_none
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/service/epipe/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/epipe/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection represents the /nokia-conf/configure/service/epipe/spoke-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                                  `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                    `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/epipe/spoke-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress represents the /nokia-conf/configure/service/epipe/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	L2Tpv3  *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3 `path:"l2tpv3" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                   `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetOrCreateL2Tpv3() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetL2Tpv3() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/epipe/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3 represents the /nokia-conf/configure/service/epipe/spoke-sdp/egress/l2tpv3 YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3 struct {
	Cookie *string `path:"cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) IsYANGGoStruct() {}

// GetCookie retrieves the value of the leaf Cookie from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie is set, it can
// safely use t.GetCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) GetCookie() string {
	if t == nil || t.Cookie == nil {
		return ""
	}
	return *t.Cookie
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/service/epipe/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/epipe/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                          `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/epipe/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint represents the /nokia-conf/configure/service/epipe/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint struct {
	Icb        *bool                                                                `path:"icb" module:"nokia-conf"`
	Name       *string                                                              `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetIcb retrieves the value of the leaf Icb from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icb is set, it can
// safely use t.GetIcb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) GetIcb() bool {
	if t == nil || t.Icb == nil {
		return false
	}
	return *t.Icb
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icb == nil {
		var v bool = false
		t.Icb = &v
	}
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm struct {
	ApplyGroups              []string                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats        *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats                                                               `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                              `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                           `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                           `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) AppendMip(v *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                    `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                   `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                  `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                  `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                  `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                           `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                  `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                    `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                    `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                   `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                  `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                  `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                  `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                  `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                  `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                                    `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetAis() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                      `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                         `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                       `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                        `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                    `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                               `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip represents the /nokia-conf/configure/service/epipe/spoke-sdp/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	CfmVlanTag         *string                                                                 `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress         *string                                                                 `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan        NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel represents the /nokia-conf/configure/service/epipe/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	L2Tpv3  *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 `path:"l2tpv3" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                    `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetOrCreateL2Tpv3() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetL2Tpv3() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress/l2tpv3 YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 struct {
	Cookie *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie `path:"cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreateCookie retrieves the value of the Cookie field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) GetOrCreateCookie() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie {
	if t.Cookie != nil {
		return t.Cookie
	}
	t.Cookie = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie{}
	return t.Cookie
}

// GetCookie returns the value of the Cookie struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3. If the receiver or the field Cookie is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) GetCookie() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie {
	if t != nil && t.Cookie != nil {
		return t.Cookie
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cookie.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress/l2tpv3/cookie YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie struct {
	Cookie1 *string `path:"cookie1" module:"nokia-conf"`
	Cookie2 *string `path:"cookie2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) IsYANGGoStruct() {}

// GetCookie1 retrieves the value of the leaf Cookie1 from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie1 is set, it can
// safely use t.GetCookie1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) GetCookie1() string {
	if t == nil || t.Cookie1 == nil {
		return ""
	}
	return *t.Cookie1
}

// GetCookie2 retrieves the value of the leaf Cookie2 from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie2 is set, it can
// safely use t.GetCookie2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) GetCookie2() string {
	if t == nil || t.Cookie2 == nil {
		return ""
	}
	return *t.Cookie2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                         `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/epipe/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus represents the /nokia-conf/configure/service/epipe/spoke-sdp/pw-status YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus struct {
	BlockOnPeerFault      *bool `path:"block-on-peer-fault" module:"nokia-conf"`
	Signaling             *bool `path:"signaling" module:"nokia-conf"`
	StandbySignalingSlave *bool `path:"standby-signaling-slave" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) IsYANGGoStruct() {}

// GetBlockOnPeerFault retrieves the value of the leaf BlockOnPeerFault from the NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnPeerFault is set, it can
// safely use t.GetBlockOnPeerFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnPeerFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) GetBlockOnPeerFault() bool {
	if t == nil || t.BlockOnPeerFault == nil {
		return false
	}
	return *t.BlockOnPeerFault
}

// GetSignaling retrieves the value of the leaf Signaling from the NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Signaling is set, it can
// safely use t.GetSignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Signaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) GetSignaling() bool {
	if t == nil || t.Signaling == nil {
		return true
	}
	return *t.Signaling
}

// GetStandbySignalingSlave retrieves the value of the leaf StandbySignalingSlave from the NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignalingSlave is set, it can
// safely use t.GetStandbySignalingSlave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignalingSlave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) GetStandbySignalingSlave() bool {
	if t == nil || t.StandbySignalingSlave == nil {
		return false
	}
	return *t.StandbySignalingSlave
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlockOnPeerFault == nil {
		var v bool = false
		t.BlockOnPeerFault = &v
	}
	if t.Signaling == nil {
		var v bool = true
		t.Signaling = &v
	}
	if t.StandbySignalingSlave == nil {
		var v bool = false
		t.StandbySignalingSlave = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_PwStatus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac represents the /nokia-conf/configure/service/epipe/spoke-sdp/source-bmac YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac struct {
	UseSdpBmacLsb *bool `path:"use-sdp-bmac-lsb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) IsYANGGoStruct() {}

// GetUseSdpBmacLsb retrieves the value of the leaf UseSdpBmacLsb from the NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSdpBmacLsb is set, it can
// safely use t.GetUseSdpBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSdpBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) GetUseSdpBmacLsb() bool {
	if t == nil || t.UseSdpBmacLsb == nil {
		return false
	}
	return *t.UseSdpBmacLsb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseSdpBmacLsb == nil {
		var v bool = false
		t.UseSdpBmacLsb = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_SourceBmac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/service/epipe/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Service_Epipe_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Vxlan represents the /nokia-conf/configure/service/epipe/vxlan YANG schema element.
type NokiaConf_Configure_Service_Epipe_Vxlan struct {
	Instance   map[uint32]*NokiaConf_Configure_Service_Epipe_Vxlan_Instance `path:"instance" module:"nokia-conf"`
	SourceVtep *string                                                      `path:"source-vtep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Vxlan) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// NokiaConf_Configure_Service_Epipe_Vxlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) NewInstance(VxlanInstance uint32) (*NokiaConf_Configure_Service_Epipe_Vxlan_Instance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[uint32]*NokiaConf_Configure_Service_Epipe_Vxlan_Instance)
	}

	key := VxlanInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &NokiaConf_Configure_Service_Epipe_Vxlan_Instance{
		VxlanInstance: &VxlanInstance,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the NokiaConf_Configure_Service_Epipe_Vxlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) RenameInstance(oldK, newK uint32) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.VxlanInstance = &newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Vxlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) GetOrCreateInstance(VxlanInstance uint32) *NokiaConf_Configure_Service_Epipe_Vxlan_Instance {

	key := VxlanInstance

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(VxlanInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of NokiaConf_Configure_Service_Epipe_Vxlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) GetInstance(VxlanInstance uint32) *NokiaConf_Configure_Service_Epipe_Vxlan_Instance {

	if t == nil {
		return nil
	}

	key := VxlanInstance

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Epipe_Vxlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) DeleteInstance(VxlanInstance uint32) {
	key := VxlanInstance

	delete(t.Instance, key)
}

// AppendInstance appends the supplied NokiaConf_Configure_Service_Epipe_Vxlan_Instance struct to the
// list Instance of NokiaConf_Configure_Service_Epipe_Vxlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Epipe_Vxlan_Instance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) AppendInstance(v *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) error {
	if v.VxlanInstance == nil {
		return fmt.Errorf("invalid nil key received for VxlanInstance")
	}

	key := *v.VxlanInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[uint32]*NokiaConf_Configure_Service_Epipe_Vxlan_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// GetSourceVtep retrieves the value of the leaf SourceVtep from the NokiaConf_Configure_Service_Epipe_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceVtep is set, it can
// safely use t.GetSourceVtep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceVtep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) GetSourceVtep() string {
	if t == nil || t.SourceVtep == nil {
		return ""
	}
	return *t.SourceVtep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Vxlan.
func (*NokiaConf_Configure_Service_Epipe_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Vxlan_Instance represents the /nokia-conf/configure/service/epipe/vxlan/instance YANG schema element.
type NokiaConf_Configure_Service_Epipe_Vxlan_Instance struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	EgressVtep         *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep `path:"egress-vtep" module:"nokia-conf"`
	Vni                *uint32                                                      `path:"vni" module:"nokia-conf"`
	VxlanInstance      *uint32                                                      `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Vxlan_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Vxlan_Instance) IsYANGGoStruct() {}

// GetOrCreateEgressVtep retrieves the value of the EgressVtep field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) GetOrCreateEgressVtep() *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep {
	if t.EgressVtep != nil {
		return t.EgressVtep
	}
	t.EgressVtep = &NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep{}
	return t.EgressVtep
}

// GetEgressVtep returns the value of the EgressVtep struct pointer
// from NokiaConf_Configure_Service_Epipe_Vxlan_Instance. If the receiver or the field EgressVtep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) GetEgressVtep() *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep {
	if t != nil && t.EgressVtep != nil {
		return t.EgressVtep
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Epipe_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Epipe_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVni retrieves the value of the leaf Vni from the NokiaConf_Configure_Service_Epipe_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vni is set, it can
// safely use t.GetVni() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vni == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) GetVni() uint32 {
	if t == nil || t.Vni == nil {
		return 0
	}
	return *t.Vni
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Service_Epipe_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) GetVxlanInstance() uint32 {
	if t == nil || t.VxlanInstance == nil {
		return 0
	}
	return *t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Vxlan_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressVtep.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Epipe_Vxlan_Instance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VxlanInstance == nil {
		return nil, fmt.Errorf("nil value for key VxlanInstance")
	}

	return map[string]interface{}{
		"vxlan-instance": *t.VxlanInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Vxlan_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Vxlan_Instance.
func (*NokiaConf_Configure_Service_Epipe_Vxlan_Instance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep represents the /nokia-conf/configure/service/epipe/vxlan/instance/egress-vtep YANG schema element.
type NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	OperGroup *string `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep.
func (*NokiaConf_Configure_Service_Epipe_Vxlan_Instance_EgressVtep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies represents the /nokia-conf/configure/service/ies YANG schema element.
type NokiaConf_Configure_Service_Ies struct {
	AaInterface         map[string]*NokiaConf_Configure_Service_Ies_AaInterface         `path:"aa-interface" module:"nokia-conf"`
	AarpInterface       map[string]*NokiaConf_Configure_Service_Ies_AarpInterface       `path:"aarp-interface" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Customer            *string                                                         `path:"customer" module:"nokia-conf"`
	Description         *string                                                         `path:"description" module:"nokia-conf"`
	EthCfm              *NokiaConf_Configure_Service_Ies_EthCfm                         `path:"eth-cfm" module:"nokia-conf"`
	IgmpHostTracking    *NokiaConf_Configure_Service_Ies_IgmpHostTracking               `path:"igmp-host-tracking" module:"nokia-conf"`
	Interface           map[string]*NokiaConf_Configure_Service_Ies_Interface           `path:"interface" module:"nokia-conf"`
	RedundantInterface  map[string]*NokiaConf_Configure_Service_Ies_RedundantInterface  `path:"redundant-interface" module:"nokia-conf"`
	ServiceId           *uint32                                                         `path:"service-id" module:"nokia-conf"`
	ServiceName         *string                                                         `path:"service-name" module:"nokia-conf"`
	SubscriberInterface map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface `path:"subscriber-interface" module:"nokia-conf"`
	SubscriberMgmt      *NokiaConf_Configure_Service_Ies_SubscriberMgmt                 `path:"subscriber-mgmt" module:"nokia-conf"`
	VideoInterface      map[string]*NokiaConf_Configure_Service_Ies_VideoInterface      `path:"video-interface" module:"nokia-conf"`
	VpnId               *uint32                                                         `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies) IsYANGGoStruct() {}

// NewAaInterface creates a new entry in the AaInterface list of the
// NokiaConf_Configure_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies) NewAaInterface(InterfaceName string) (*NokiaConf_Configure_Service_Ies_AaInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaInterface == nil {
		t.AaInterface = make(map[string]*NokiaConf_Configure_Service_Ies_AaInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AaInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AaInterface", key)
	}

	t.AaInterface[key] = &NokiaConf_Configure_Service_Ies_AaInterface{
		InterfaceName: &InterfaceName,
	}

	return t.AaInterface[key], nil
}

// RenameAaInterface renames an entry in the list AaInterface within
// the NokiaConf_Configure_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies) RenameAaInterface(oldK, newK string) error {
	if _, ok := t.AaInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in AaInterface", newK)
	}

	e, ok := t.AaInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AaInterface", oldK)
	}
	e.InterfaceName = &newK

	t.AaInterface[newK] = e
	delete(t.AaInterface, oldK)
	return nil
}

// GetOrCreateAaInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateAaInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_AaInterface {

	key := InterfaceName

	if v, ok := t.AaInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAaInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAaInterface got unexpected error: %v", err))
	}
	return v
}

// GetAaInterface retrieves the value with the specified key from
// the AaInterface map field of NokiaConf_Configure_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetAaInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_AaInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.AaInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteAaInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies) DeleteAaInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.AaInterface, key)
}

// AppendAaInterface appends the supplied NokiaConf_Configure_Service_Ies_AaInterface struct to the
// list AaInterface of NokiaConf_Configure_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_AaInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies) AppendAaInterface(v *NokiaConf_Configure_Service_Ies_AaInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaInterface == nil {
		t.AaInterface = make(map[string]*NokiaConf_Configure_Service_Ies_AaInterface)
	}

	if _, ok := t.AaInterface[key]; ok {
		return fmt.Errorf("duplicate key for list AaInterface %v", key)
	}

	t.AaInterface[key] = v
	return nil
}

// NewAarpInterface creates a new entry in the AarpInterface list of the
// NokiaConf_Configure_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies) NewAarpInterface(InterfaceName string) (*NokiaConf_Configure_Service_Ies_AarpInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AarpInterface == nil {
		t.AarpInterface = make(map[string]*NokiaConf_Configure_Service_Ies_AarpInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AarpInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AarpInterface", key)
	}

	t.AarpInterface[key] = &NokiaConf_Configure_Service_Ies_AarpInterface{
		InterfaceName: &InterfaceName,
	}

	return t.AarpInterface[key], nil
}

// RenameAarpInterface renames an entry in the list AarpInterface within
// the NokiaConf_Configure_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies) RenameAarpInterface(oldK, newK string) error {
	if _, ok := t.AarpInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in AarpInterface", newK)
	}

	e, ok := t.AarpInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AarpInterface", oldK)
	}
	e.InterfaceName = &newK

	t.AarpInterface[newK] = e
	delete(t.AarpInterface, oldK)
	return nil
}

// GetOrCreateAarpInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateAarpInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_AarpInterface {

	key := InterfaceName

	if v, ok := t.AarpInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAarpInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAarpInterface got unexpected error: %v", err))
	}
	return v
}

// GetAarpInterface retrieves the value with the specified key from
// the AarpInterface map field of NokiaConf_Configure_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetAarpInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_AarpInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.AarpInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteAarpInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies) DeleteAarpInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.AarpInterface, key)
}

// AppendAarpInterface appends the supplied NokiaConf_Configure_Service_Ies_AarpInterface struct to the
// list AarpInterface of NokiaConf_Configure_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_AarpInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies) AppendAarpInterface(v *NokiaConf_Configure_Service_Ies_AarpInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AarpInterface == nil {
		t.AarpInterface = make(map[string]*NokiaConf_Configure_Service_Ies_AarpInterface)
	}

	if _, ok := t.AarpInterface[key]; ok {
		return fmt.Errorf("duplicate key for list AarpInterface %v", key)
	}

	t.AarpInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Ies_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Ies_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Ies_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Ies_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies) AppendInterface(v *NokiaConf_Configure_Service_Ies_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Ies_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewRedundantInterface creates a new entry in the RedundantInterface list of the
// NokiaConf_Configure_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies) NewRedundantInterface(InterfaceName string) (*NokiaConf_Configure_Service_Ies_RedundantInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedundantInterface == nil {
		t.RedundantInterface = make(map[string]*NokiaConf_Configure_Service_Ies_RedundantInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedundantInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedundantInterface", key)
	}

	t.RedundantInterface[key] = &NokiaConf_Configure_Service_Ies_RedundantInterface{
		InterfaceName: &InterfaceName,
	}

	return t.RedundantInterface[key], nil
}

// RenameRedundantInterface renames an entry in the list RedundantInterface within
// the NokiaConf_Configure_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies) RenameRedundantInterface(oldK, newK string) error {
	if _, ok := t.RedundantInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in RedundantInterface", newK)
	}

	e, ok := t.RedundantInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedundantInterface", oldK)
	}
	e.InterfaceName = &newK

	t.RedundantInterface[newK] = e
	delete(t.RedundantInterface, oldK)
	return nil
}

// GetOrCreateRedundantInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateRedundantInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_RedundantInterface {

	key := InterfaceName

	if v, ok := t.RedundantInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedundantInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedundantInterface got unexpected error: %v", err))
	}
	return v
}

// GetRedundantInterface retrieves the value with the specified key from
// the RedundantInterface map field of NokiaConf_Configure_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetRedundantInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_RedundantInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.RedundantInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedundantInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies) DeleteRedundantInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.RedundantInterface, key)
}

// AppendRedundantInterface appends the supplied NokiaConf_Configure_Service_Ies_RedundantInterface struct to the
// list RedundantInterface of NokiaConf_Configure_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_RedundantInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies) AppendRedundantInterface(v *NokiaConf_Configure_Service_Ies_RedundantInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedundantInterface == nil {
		t.RedundantInterface = make(map[string]*NokiaConf_Configure_Service_Ies_RedundantInterface)
	}

	if _, ok := t.RedundantInterface[key]; ok {
		return fmt.Errorf("duplicate key for list RedundantInterface %v", key)
	}

	t.RedundantInterface[key] = v
	return nil
}

// NewSubscriberInterface creates a new entry in the SubscriberInterface list of the
// NokiaConf_Configure_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies) NewSubscriberInterface(InterfaceName string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubscriberInterface == nil {
		t.SubscriberInterface = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubscriberInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubscriberInterface", key)
	}

	t.SubscriberInterface[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface{
		InterfaceName: &InterfaceName,
	}

	return t.SubscriberInterface[key], nil
}

// RenameSubscriberInterface renames an entry in the list SubscriberInterface within
// the NokiaConf_Configure_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies) RenameSubscriberInterface(oldK, newK string) error {
	if _, ok := t.SubscriberInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in SubscriberInterface", newK)
	}

	e, ok := t.SubscriberInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubscriberInterface", oldK)
	}
	e.InterfaceName = &newK

	t.SubscriberInterface[newK] = e
	delete(t.SubscriberInterface, oldK)
	return nil
}

// GetOrCreateSubscriberInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateSubscriberInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_SubscriberInterface {

	key := InterfaceName

	if v, ok := t.SubscriberInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscriberInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscriberInterface got unexpected error: %v", err))
	}
	return v
}

// GetSubscriberInterface retrieves the value with the specified key from
// the SubscriberInterface map field of NokiaConf_Configure_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetSubscriberInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_SubscriberInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.SubscriberInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscriberInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies) DeleteSubscriberInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.SubscriberInterface, key)
}

// AppendSubscriberInterface appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface struct to the
// list SubscriberInterface of NokiaConf_Configure_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies) AppendSubscriberInterface(v *NokiaConf_Configure_Service_Ies_SubscriberInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubscriberInterface == nil {
		t.SubscriberInterface = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface)
	}

	if _, ok := t.SubscriberInterface[key]; ok {
		return fmt.Errorf("duplicate key for list SubscriberInterface %v", key)
	}

	t.SubscriberInterface[key] = v
	return nil
}

// NewVideoInterface creates a new entry in the VideoInterface list of the
// NokiaConf_Configure_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies) NewVideoInterface(InterfaceName string) (*NokiaConf_Configure_Service_Ies_VideoInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_Service_Ies_VideoInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VideoInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VideoInterface", key)
	}

	t.VideoInterface[key] = &NokiaConf_Configure_Service_Ies_VideoInterface{
		InterfaceName: &InterfaceName,
	}

	return t.VideoInterface[key], nil
}

// RenameVideoInterface renames an entry in the list VideoInterface within
// the NokiaConf_Configure_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies) RenameVideoInterface(oldK, newK string) error {
	if _, ok := t.VideoInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VideoInterface", newK)
	}

	e, ok := t.VideoInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VideoInterface", oldK)
	}
	e.InterfaceName = &newK

	t.VideoInterface[newK] = e
	delete(t.VideoInterface, oldK)
	return nil
}

// GetOrCreateVideoInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateVideoInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_VideoInterface {

	key := InterfaceName

	if v, ok := t.VideoInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVideoInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVideoInterface got unexpected error: %v", err))
	}
	return v
}

// GetVideoInterface retrieves the value with the specified key from
// the VideoInterface map field of NokiaConf_Configure_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetVideoInterface(InterfaceName string) *NokiaConf_Configure_Service_Ies_VideoInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.VideoInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVideoInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies) DeleteVideoInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.VideoInterface, key)
}

// AppendVideoInterface appends the supplied NokiaConf_Configure_Service_Ies_VideoInterface struct to the
// list VideoInterface of NokiaConf_Configure_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_VideoInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies) AppendVideoInterface(v *NokiaConf_Configure_Service_Ies_VideoInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_Service_Ies_VideoInterface)
	}

	if _, ok := t.VideoInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VideoInterface %v", key)
	}

	t.VideoInterface[key] = v
	return nil
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Ies_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Ies_EthCfm{}
	return t.EthCfm
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Service_Ies_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Service_Ies_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Service_Ies_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Service_Ies_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Ies. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetEthCfm() *NokiaConf_Configure_Service_Ies_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Service_Ies. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetIgmpHostTracking() *NokiaConf_Configure_Service_Ies_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Service_Ies. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies) GetSubscriberMgmt() *NokiaConf_Configure_Service_Ies_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.EthCfm.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.AaInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.AarpInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.RedundantInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.SubscriberInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VideoInterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies.
func (*NokiaConf_Configure_Service_Ies) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface represents the /nokia-conf/configure/service/ies/aa-interface YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                     `path:"description" module:"nokia-conf"`
	InterfaceName      *string                                                     `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                     `path:"ip-mtu" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4           `path:"ipv4" module:"nokia-conf"`
	Sap                map[string]*NokiaConf_Configure_Service_Ies_AaInterface_Sap `path:"sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Ies_AaInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) NewSap(SapId string) (*NokiaConf_Configure_Service_Ies_AaInterface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ies_AaInterface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Ies_AaInterface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Ies_AaInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_AaInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Ies_AaInterface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Ies_AaInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetSap(SapId string) *NokiaConf_Configure_Service_Ies_AaInterface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_AaInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Ies_AaInterface_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Ies_AaInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_AaInterface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) AppendSap(v *NokiaConf_Configure_Service_Ies_AaInterface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ies_AaInterface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_AaInterface_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetIpv4() *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Ipv4.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_AaInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface.
func (*NokiaConf_Configure_Service_Ies_AaInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Ipv4 represents the /nokia-conf/configure/service/ies/aa-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Ipv4 struct {
	Primary *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary{}
	return t.Primary
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Ipv4.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary represents the /nokia-conf/configure/service/ies/aa-interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap represents the /nokia-conf/configure/service/ies/aa-interface/sap YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap struct {
	AdminState         E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress       `path:"egress" module:"nokia-conf"`
	FwdWholesale       *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale `path:"fwd-wholesale" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress      `path:"ingress" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag          `path:"lag" module:"nokia-conf"`
	SapId              *string                                                       `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag{}
	return t.Lag
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetEgress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetFwdWholesale() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetIngress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetLag() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Egress.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_AaInterface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress represents the /nokia-conf/configure/service/ies/aa-interface/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress struct {
	Filter *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter represents the /nokia-conf/configure/service/ies/aa-interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos represents the /nokia-conf/configure/service/ies/aa-interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos struct {
	SapEgress *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress `path:"sap-egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapEgress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/ies/aa-interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale represents the /nokia-conf/configure/service/ies/aa-interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) IsYANGGoStruct() {}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress represents the /nokia-conf/configure/service/ies/aa-interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress struct {
	IpFilterPair *bool                                                        `path:"ip-filter-pair" module:"nokia-conf"`
	Qos          *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos represents the /nokia-conf/configure/service/ies/aa-interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos struct {
	SapIngress *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress `path:"sap-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/ies/aa-interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress struct {
	Overrides  *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/ies/aa-interface/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag represents the /nokia-conf/configure/service/ies/aa-interface/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag.
func (*NokiaConf_Configure_Service_Ies_AaInterface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface represents the /nokia-conf/configure/service/ies/aarp-interface YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                            `path:"description" module:"nokia-conf"`
	InterfaceName      *string                                                            `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                            `path:"ip-mtu" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Ies_AarpInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Ies_AarpInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_AarpInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Ies_AarpInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_AarpInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Ies_AarpInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_AarpInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface.
func (*NokiaConf_Configure_Service_Ies_AarpInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp represents the /nokia-conf/configure/service/ies/aarp-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp struct {
	Aarp               *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp    `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AdminState         E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                         `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                         `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetAarp() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Aarp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp represents the /nokia-conf/configure/service/ies/aarp-interface/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp struct {
	Id   *uint32                                      `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_L3BsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_L3BsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress represents the /nokia-conf/configure/service/ies/aarp-interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                               `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/ies/aarp-interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/ies/aarp-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/ies/aarp-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_EthCfm represents the /nokia-conf/configure/service/ies/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Ies_EthCfm struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_EthCfm) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_EthCfm.
func (*NokiaConf_Configure_Service_Ies_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_IgmpHostTracking represents the /nokia-conf/configure/service/ies/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Service_Ies_IgmpHostTracking struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ExpiryTime         *uint32                     `path:"expiry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_IgmpHostTracking) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Service_Ies_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 260
	}
	return *t.ExpiryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpiryTime == nil {
		var v uint32 = 260
		t.ExpiryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_IgmpHostTracking.
func (*NokiaConf_Configure_Service_Ies_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface represents the /nokia-conf/configure/service/ies/interface YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface struct {
	AdminState                    E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                   []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude            []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	CflowdParameters              *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters    `path:"cflowd-parameters" module:"nokia-conf"`
	CpuProtection                 *uint32                                                        `path:"cpu-protection" module:"nokia-conf"`
	Description                   *string                                                        `path:"description" module:"nokia-conf"`
	DynamicTunnelRedundantNexthop *string                                                        `path:"dynamic-tunnel-redundant-nexthop" module:"nokia-conf"`
	HoldTime                      *NokiaConf_Configure_Service_Ies_Interface_HoldTime            `path:"hold-time" module:"nokia-conf"`
	IfAttribute                   *NokiaConf_Configure_Service_Ies_Interface_IfAttribute         `path:"if-attribute" module:"nokia-conf"`
	Ingress                       *NokiaConf_Configure_Service_Ies_Interface_Ingress             `path:"ingress" module:"nokia-conf"`
	IngressStats                  *bool                                                          `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName                 *string                                                        `path:"interface-name" module:"nokia-conf"`
	IpMtu                         *uint32                                                        `path:"ip-mtu" module:"nokia-conf"`
	Ipv4                          *NokiaConf_Configure_Service_Ies_Interface_Ipv4                `path:"ipv4" module:"nokia-conf"`
	Ipv6                          *NokiaConf_Configure_Service_Ies_Interface_Ipv6                `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LoadBalancing                 *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing       `path:"load-balancing" module:"nokia-conf"`
	Loopback                      *bool                                                          `path:"loopback" module:"nokia-conf"`
	Mac                           *string                                                        `path:"mac" module:"nokia-conf"`
	MacAccounting                 *bool                                                          `path:"mac-accounting" module:"nokia-conf"`
	MonitorOperGroup              *string                                                        `path:"monitor-oper-group" module:"nokia-conf"`
	MulticastNetworkDomain        *string                                                        `path:"multicast-network-domain" module:"nokia-conf"`
	PingTemplate                  *NokiaConf_Configure_Service_Ies_Interface_PingTemplate        `path:"ping-template" module:"nokia-conf" yangPresence:"true"`
	PtpHwAssist                   *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist         `path:"ptp-hw-assist" module:"nokia-conf"`
	RadiusAuthPolicy              *string                                                        `path:"radius-auth-policy" module:"nokia-conf"`
	Sap                           map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap      `path:"sap" module:"nokia-conf"`
	ShcvPolicyIpv4                *string                                                        `path:"shcv-policy-ipv4" module:"nokia-conf"`
	SpokeSdp                      map[string]*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	StaticTunnelRedundantNexthop  *string                                                        `path:"static-tunnel-redundant-nexthop" module:"nokia-conf"`
	TosMarkingState               E_NokiaTypesRouter_TosMarkingState                             `path:"tos-marking-state" module:"nokia-conf"`
	Tunnel                        *bool                                                          `path:"tunnel" module:"nokia-conf"`
	VasIfType                     E_NokiaTypesRouter_VasIfType                                   `path:"vas-if-type" module:"nokia-conf"`
	Vpls                          map[string]*NokiaConf_Configure_Service_Ies_Interface_Vpls     `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Ies_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface) NewSap(SapId string) (*NokiaConf_Configure_Service_Ies_Interface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Ies_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Ies_Interface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Ies_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetSap(SapId string) *NokiaConf_Configure_Service_Ies_Interface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Ies_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface) AppendSap(v *NokiaConf_Configure_Service_Ies_Interface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Ies_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Ies_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Ies_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Ies_Interface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Ies_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewVpls creates a new entry in the Vpls list of the
// NokiaConf_Configure_Service_Ies_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface) NewVpls(VplsName string) (*NokiaConf_Configure_Service_Ies_Interface_Vpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Vpls)
	}

	key := VplsName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vpls", key)
	}

	t.Vpls[key] = &NokiaConf_Configure_Service_Ies_Interface_Vpls{
		VplsName: &VplsName,
	}

	return t.Vpls[key], nil
}

// RenameVpls renames an entry in the list Vpls within
// the NokiaConf_Configure_Service_Ies_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface) RenameVpls(oldK, newK string) error {
	if _, ok := t.Vpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Vpls", newK)
	}

	e, ok := t.Vpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vpls", oldK)
	}
	e.VplsName = &newK

	t.Vpls[newK] = e
	delete(t.Vpls, oldK)
	return nil
}

// GetOrCreateVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateVpls(VplsName string) *NokiaConf_Configure_Service_Ies_Interface_Vpls {

	key := VplsName

	if v, ok := t.Vpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVpls(VplsName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVpls got unexpected error: %v", err))
	}
	return v
}

// GetVpls retrieves the value with the specified key from
// the Vpls map field of NokiaConf_Configure_Service_Ies_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetVpls(VplsName string) *NokiaConf_Configure_Service_Ies_Interface_Vpls {

	if t == nil {
		return nil
	}

	key := VplsName

	if lm, ok := t.Vpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface) DeleteVpls(VplsName string) {
	key := VplsName

	delete(t.Vpls, key)
}

// AppendVpls appends the supplied NokiaConf_Configure_Service_Ies_Interface_Vpls struct to the
// list Vpls of NokiaConf_Configure_Service_Ies_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Vpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface) AppendVpls(v *NokiaConf_Configure_Service_Ies_Interface_Vpls) error {
	if v.VplsName == nil {
		return fmt.Errorf("invalid nil key received for VplsName")
	}

	key := *v.VplsName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Vpls)
	}

	if _, ok := t.Vpls[key]; ok {
		return fmt.Errorf("duplicate key for list Vpls %v", key)
	}

	t.Vpls[key] = v
	return nil
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Service_Ies_Interface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Ies_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Ies_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateIfAttribute() *NokiaConf_Configure_Service_Ies_Interface_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Service_Ies_Interface_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_Interface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_Interface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Service_Ies_Interface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreatePingTemplate retrieves the value of the PingTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreatePingTemplate() *NokiaConf_Configure_Service_Ies_Interface_PingTemplate {
	if t.PingTemplate != nil {
		return t.PingTemplate
	}
	t.PingTemplate = &NokiaConf_Configure_Service_Ies_Interface_PingTemplate{}
	return t.PingTemplate
}

// GetOrCreatePtpHwAssist retrieves the value of the PtpHwAssist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetOrCreatePtpHwAssist() *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist {
	if t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	t.PtpHwAssist = &NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist{}
	return t.PtpHwAssist
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetCflowdParameters() *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetHoldTime() *NokiaConf_Configure_Service_Ies_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetIfAttribute() *NokiaConf_Configure_Service_Ies_Interface_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetIngress() *NokiaConf_Configure_Service_Ies_Interface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetIpv4() *NokiaConf_Configure_Service_Ies_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetIpv6() *NokiaConf_Configure_Service_Ies_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetLoadBalancing() *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetPingTemplate returns the value of the PingTemplate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field PingTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetPingTemplate() *NokiaConf_Configure_Service_Ies_Interface_PingTemplate {
	if t != nil && t.PingTemplate != nil {
		return t.PingTemplate
	}
	return nil
}

// GetPtpHwAssist returns the value of the PtpHwAssist struct pointer
// from NokiaConf_Configure_Service_Ies_Interface. If the receiver or the field PtpHwAssist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetPtpHwAssist() *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist {
	if t != nil && t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicTunnelRedundantNexthop retrieves the value of the leaf DynamicTunnelRedundantNexthop from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTunnelRedundantNexthop is set, it can
// safely use t.GetDynamicTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetDynamicTunnelRedundantNexthop() string {
	if t == nil || t.DynamicTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.DynamicTunnelRedundantNexthop
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetLoopback() bool {
	if t == nil || t.Loopback == nil {
		return false
	}
	return *t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacAccounting retrieves the value of the leaf MacAccounting from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAccounting is set, it can
// safely use t.GetMacAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetMacAccounting() bool {
	if t == nil || t.MacAccounting == nil {
		return false
	}
	return *t.MacAccounting
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMulticastNetworkDomain retrieves the value of the leaf MulticastNetworkDomain from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastNetworkDomain is set, it can
// safely use t.GetMulticastNetworkDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastNetworkDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetMulticastNetworkDomain() string {
	if t == nil || t.MulticastNetworkDomain == nil {
		return ""
	}
	return *t.MulticastNetworkDomain
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetStaticTunnelRedundantNexthop retrieves the value of the leaf StaticTunnelRedundantNexthop from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticTunnelRedundantNexthop is set, it can
// safely use t.GetStaticTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetStaticTunnelRedundantNexthop() string {
	if t == nil || t.StaticTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.StaticTunnelRedundantNexthop
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_untrusted
	}
	return t.TosMarkingState
}

// GetTunnel retrieves the value of the leaf Tunnel from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunnel is set, it can
// safely use t.GetTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetTunnel() bool {
	if t == nil || t.Tunnel == nil {
		return false
	}
	return *t.Tunnel
}

// GetVasIfType retrieves the value of the leaf VasIfType from the NokiaConf_Configure_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasIfType is set, it can
// safely use t.GetVasIfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasIfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface) GetVasIfType() E_NokiaTypesRouter_VasIfType {
	if t == nil || t.VasIfType == 0 {
		return 0
	}
	return t.VasIfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.Loopback == nil {
		var v bool = false
		t.Loopback = &v
	}
	if t.MacAccounting == nil {
		var v bool = false
		t.MacAccounting = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_untrusted
	}
	if t.Tunnel == nil {
		var v bool = false
		t.Tunnel = &v
	}
	t.CflowdParameters.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.PingTemplate.PopulateDefaults()
	t.PtpHwAssist.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Vpls {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface.
func (*NokiaConf_Configure_Service_Ies_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_CflowdParameters represents the /nokia-conf/configure/service/ies/interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_CflowdParameters struct {
	Sampling map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Service_Ies_Interface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) NewSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) (*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) RenameSampling(oldK, newK E_NokiaTypesRouter_CflowdSampling) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) GetOrCreateSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Service_Ies_Interface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) GetSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) DeleteSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Service_Ies_Interface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_CflowdParameters.
func (*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling represents the /nokia-conf/configure/service/ies/interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling struct {
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile      NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType       E_NokiaTypesRouter_CflowdSampling                                                       `path:"sampling-type" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) GetSamplingType() E_NokiaTypesRouter_CflowdSampling {
	if t == nil || t.SamplingType == 0 {
		return 0
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Service_Ies_Interface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime represents the /nokia-conf/configure/service/ies/interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) GetIpv6() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/ies/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/ies/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/ies/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6 represents the /nokia-conf/configure/service/ies/interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/service/ies/interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/service/ies/interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Service_Ies_Interface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_IfAttribute represents the /nokia-conf/configure/service/ies/interface/if-attribute YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_IfAttribute struct {
	AdminGroup []string                                                                    `path:"admin-group" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_IfAttribute) IsYANGGoStruct() {}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Service_Ies_Interface_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Service_Ies_Interface_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Service_Ies_Interface_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Service_Ies_Interface_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Service_Ies_Interface_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_IfAttribute.
func (*NokiaConf_Configure_Service_Ies_Interface_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup represents the /nokia-conf/configure/service/ies/interface/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ingress represents the /nokia-conf/configure/service/ies/interface/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ingress struct {
	DestinationClassLookup *bool   `path:"destination-class-lookup" module:"nokia-conf"`
	PolicyAccounting       *string `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ingress) IsYANGGoStruct() {}

// GetDestinationClassLookup retrieves the value of the leaf DestinationClassLookup from the NokiaConf_Configure_Service_Ies_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClassLookup is set, it can
// safely use t.GetDestinationClassLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClassLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ingress) GetDestinationClassLookup() bool {
	if t == nil || t.DestinationClassLookup == nil {
		return false
	}
	return *t.DestinationClassLookup
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Service_Ies_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationClassLookup == nil {
		var v bool = false
		t.DestinationClassLookup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ingress.
func (*NokiaConf_Configure_Service_Ies_Interface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4 represents the /nokia-conf/configure/service/ies/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4 struct {
	Addresses               *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses            `path:"addresses" module:"nokia-conf"`
	AllowDirectedBroadcasts *bool                                                                `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd                  `path:"bfd" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp                 `path:"dhcp" module:"nokia-conf"`
	Icmp                    *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp                 `path:"icmp" module:"nokia-conf"`
	IpHelperAddress         *string                                                              `path:"ip-helper-address" module:"nokia-conf"`
	LocalDhcpServer         *string                                                              `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery    `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary              `path:"primary" module:"nokia-conf" yangPresence:"true"`
	QosRouteLookup          E_NokiaTypesRouter_QosRouteLookup                                    `path:"qos-route-lookup" module:"nokia-conf"`
	Secondary               map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                              `path:"tcp-mss" module:"nokia-conf"`
	Unnumbered              *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered           `path:"unnumbered" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck            `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                    map[int32]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp       `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) NewVrrp(VirtualRouterId int32) (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) RenameVrrp(oldK, newK int32) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = &newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) DeleteVrrp(VirtualRouterId int32) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) AppendVrrp(v *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateAddresses retrieves the value of the Addresses field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateAddresses() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses {
	if t.Addresses != nil {
		return t.Addresses
	}
	t.Addresses = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses{}
	return t.Addresses
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetAddresses returns the value of the Addresses struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field Addresses is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetAddresses() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses {
	if t != nil && t.Addresses != nil {
		return t.Addresses
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetBfd() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetDhcp() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetIcmp() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetIpHelperAddress retrieves the value of the leaf IpHelperAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpHelperAddress is set, it can
// safely use t.GetIpHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpHelperAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetIpHelperAddress() string {
	if t == nil || t.IpHelperAddress == nil {
		return ""
	}
	return *t.IpHelperAddress
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Addresses.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses represents the /nokia-conf/configure/service/ies/interface/ipv4/addresses YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses struct {
	Address map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) GetAddress(Ipv4Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address struct to the
// list Address of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) AppendAddress(v *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address represents the /nokia-conf/configure/service/ies/interface/ipv4/addresses/address YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Addresses_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd represents the /nokia-conf/configure/service/ies/interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                   `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                   `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                   `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                   `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description             *string                                                            `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                            `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82     `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer   `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                            `path:"python-policy" module:"nokia-conf"`
	RelayPlainBootp         *bool                                                              `path:"relay-plain-bootp" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy    `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                              `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                           `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr    `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                              `path:"trusted" module:"nokia-conf"`
	UseArp                  *bool                                                              `path:"use-arp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRelayPlainBootp retrieves the value of the leaf RelayPlainBootp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayPlainBootp is set, it can
// safely use t.GetRelayPlainBootp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayPlainBootp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetRelayPlainBootp() bool {
	if t == nil || t.RelayPlainBootp == nil {
		return false
	}
	return *t.RelayPlainBootp
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// GetUseArp retrieves the value of the leaf UseArp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseArp is set, it can
// safely use t.GetUseArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) GetUseArp() bool {
	if t == nil || t.UseArp == nil {
		return false
	}
	return *t.UseArp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RelayPlainBootp == nil {
		var v bool = false
		t.RelayPlainBootp = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	if t.UseArp == nil {
		var v bool = false
		t.UseArp = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	SapId          YANGEmpty `path:"sap-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	PoolName         *bool   `path:"pool-name" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetPoolName() bool {
	if t == nil || t.PoolName == nil {
		return false
	}
	return *t.PoolName
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.PoolName == nil {
		var v bool = false
		t.PoolName = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                    `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) IsYANGGoStruct() {}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy represents the /nokia-conf/configure/service/ies/interface/ipv4/dhcp/relay-proxy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy struct {
	ReleaseUpdateSrcIp *bool   `path:"release-update-src-ip" module:"nokia-conf"`
	SiaddrOverride     *string `path:"siaddr-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) IsYANGGoStruct() {}

// GetReleaseUpdateSrcIp retrieves the value of the leaf ReleaseUpdateSrcIp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseUpdateSrcIp is set, it can
// safely use t.GetReleaseUpdateSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseUpdateSrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) GetReleaseUpdateSrcIp() bool {
	if t == nil || t.ReleaseUpdateSrcIp == nil {
		return false
	}
	return *t.ReleaseUpdateSrcIp
}

// GetSiaddrOverride retrieves the value of the leaf SiaddrOverride from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiaddrOverride is set, it can
// safely use t.GetSiaddrOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiaddrOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) GetSiaddrOverride() string {
	if t == nil || t.SiaddrOverride == nil {
		return ""
	}
	return *t.SiaddrOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseUpdateSrcIp == nil {
		var v bool = false
		t.ReleaseUpdateSrcIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp represents the /nokia-conf/configure/service/ies/interface/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp struct {
	MaskReply    *bool                                                             `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) IsYANGGoStruct() {}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/service/ies/interface/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/service/ies/interface/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/service/ies/interface/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/service/ies/interface/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/service/ies/interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery struct {
	HostRoute                *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute                 `path:"host-route" module:"nokia-conf"`
	LearnUnsolicited         *bool                                                                                       `path:"learn-unsolicited" module:"nokia-conf"`
	Limit                    *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyArp            *bool                                                                                       `path:"local-proxy-arp" module:"nokia-conf"`
	Populate                 *bool                                                                                       `path:"populate" module:"nokia-conf"`
	PopulateHost             *bool                                                                                       `path:"populate-host" module:"nokia-conf"`
	ProactiveRefresh         *bool                                                                                       `path:"proactive-refresh" module:"nokia-conf"`
	ProxyArpPolicy           []string                                                                                    `path:"proxy-arp-policy" module:"nokia-conf"`
	RemoteProxyArp           *bool                                                                                       `path:"remote-proxy-arp" module:"nokia-conf"`
	RetryTimer               *uint32                                                                                     `path:"retry-timer" module:"nokia-conf"`
	RouteTag                 *uint32                                                                                     `path:"route-tag" module:"nokia-conf"`
	StaticNeighbor           map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	StaticNeighborUnnumbered *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered  `path:"static-neighbor-unnumbered" module:"nokia-conf" yangPresence:"true"`
	Timeout                  *uint32                                                                                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetOrCreateHostRoute() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateStaticNeighborUnnumbered retrieves the value of the StaticNeighborUnnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighborUnnumbered() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	t.StaticNeighborUnnumbered = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered{}
	return t.StaticNeighborUnnumbered
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetHostRoute() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetStaticNeighborUnnumbered returns the value of the StaticNeighborUnnumbered struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery. If the receiver or the field StaticNeighborUnnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetStaticNeighborUnnumbered() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t != nil && t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetLearnUnsolicited() bool {
	if t == nil || t.LearnUnsolicited == nil {
		return false
	}
	return *t.LearnUnsolicited
}

// GetLocalProxyArp retrieves the value of the leaf LocalProxyArp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyArp is set, it can
// safely use t.GetLocalProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetLocalProxyArp() bool {
	if t == nil || t.LocalProxyArp == nil {
		return false
	}
	return *t.LocalProxyArp
}

// GetPopulate retrieves the value of the leaf Populate from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Populate is set, it can
// safely use t.GetPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Populate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetPopulate() bool {
	if t == nil || t.Populate == nil {
		return false
	}
	return *t.Populate
}

// GetPopulateHost retrieves the value of the leaf PopulateHost from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHost is set, it can
// safely use t.GetPopulateHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetPopulateHost() bool {
	if t == nil || t.PopulateHost == nil {
		return false
	}
	return *t.PopulateHost
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetProactiveRefresh() bool {
	if t == nil || t.ProactiveRefresh == nil {
		return false
	}
	return *t.ProactiveRefresh
}

// GetProxyArpPolicy retrieves the value of the leaf ProxyArpPolicy from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyArpPolicy is set, it can
// safely use t.GetProxyArpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyArpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetProxyArpPolicy() []string {
	if t == nil || t.ProxyArpPolicy == nil {
		return nil
	}
	return t.ProxyArpPolicy
}

// GetRemoteProxyArp retrieves the value of the leaf RemoteProxyArp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteProxyArp is set, it can
// safely use t.GetRemoteProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetRemoteProxyArp() bool {
	if t == nil || t.RemoteProxyArp == nil {
		return false
	}
	return *t.RemoteProxyArp
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 50
	}
	return *t.RetryTimer
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnUnsolicited == nil {
		var v bool = false
		t.LearnUnsolicited = &v
	}
	if t.Populate == nil {
		var v bool = false
		t.Populate = &v
	}
	if t.PopulateHost == nil {
		var v bool = false
		t.PopulateHost = &v
	}
	if t.ProactiveRefresh == nil {
		var v bool = false
		t.ProactiveRefresh = &v
	}
	if t.RemoteProxyArp == nil {
		var v bool = false
		t.RemoteProxyArp = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 50
		t.RetryTimer = &v
	}
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	t.HostRoute.PopulateDefaults()
	t.Limit.PopulateDefaults()
	t.StaticNeighborUnnumbered.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute represents the /nokia-conf/configure/service/ies/interface/ipv4/neighbor-discovery/host-route YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute struct {
	Populate map[E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) IsYANGGoStruct() {}

// NewPopulate creates a new entry in the Populate list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) NewPopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) RenamePopulate(oldK, newK E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) GetOrCreatePopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate {

	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) GetPopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) DeletePopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) AppendPopulate(v *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate represents the /nokia-conf/configure/service/ies/interface/ipv4/neighbor-discovery/host-route/populate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                                         `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetRouteType() E_NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit represents the /nokia-conf/configure/service/ies/interface/ipv4/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/service/ies/interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	MacAddress         *string  `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered represents the /nokia-conf/configure/service/ies/interface/ipv4/neighbor-discovery/static-neighbor-unnumbered YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered struct {
	MacAddress *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) IsYANGGoStruct() {
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary represents the /nokia-conf/configure/service/ies/interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary struct {
	Address            *string                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Broadcast          E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	PrefixLength       *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp          *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary represents the /nokia-conf/configure/service/ies/interface/ipv4/secondary YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary struct {
	Address            *string                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Broadcast          E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	IgpInhibit         *bool                                       `path:"igp-inhibit" module:"nokia-conf"`
	PrefixLength       *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp          *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetIgpInhibit retrieves the value of the leaf IgpInhibit from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpInhibit is set, it can
// safely use t.GetIgpInhibit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpInhibit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetIgpInhibit() bool {
	if t == nil || t.IgpInhibit == nil {
		return false
	}
	return *t.IgpInhibit
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	if t.IgpInhibit == nil {
		var v bool = false
		t.IgpInhibit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered represents the /nokia-conf/configure/service/ies/interface/ipv4/unnumbered YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered struct {
	IpAddress *string   `path:"ip-address" module:"nokia-conf"`
	IpIntName *string   `path:"ip-int-name" module:"nokia-conf"`
	System    YANGEmpty `path:"system" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// GetSystem retrieves the value of the leaf System from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if System is set, it can
// safely use t.GetSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.System == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) GetSystem() YANGEmpty {
	if t == nil || t.System == false {
		return false
	}
	return t.System
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck represents the /nokia-conf/configure/service/ies/interface/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp represents the /nokia-conf/configure/service/ies/interface/ipv4/vrrp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                          `path:"authentication-key" module:"nokia-conf"`
	Backup             []string                                                         `path:"backup" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay          *uint32                                                          `path:"init-delay" module:"nokia-conf"`
	Mac                *string                                                          `path:"mac" module:"nokia-conf"`
	MasterIntInherit   *bool                                                            `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval    *uint32                                                          `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup   *string                                                          `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply           *bool                                                            `path:"ntp-reply" module:"nokia-conf"`
	OperGroup          *string                                                          `path:"oper-group" module:"nokia-conf"`
	Owner              *bool                                                            `path:"owner" module:"nokia-conf"`
	Passive            *bool                                                            `path:"passive" module:"nokia-conf"`
	PingReply          *bool                                                            `path:"ping-reply" module:"nokia-conf"`
	Policy             *uint32                                                          `path:"policy" module:"nokia-conf"`
	Preempt            *bool                                                            `path:"preempt" module:"nokia-conf"`
	Priority           *uint32                                                          `path:"priority" module:"nokia-conf"`
	SshReply           *bool                                                            `path:"ssh-reply" module:"nokia-conf"`
	StandbyForwarding  *bool                                                            `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply        *bool                                                            `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply    *bool                                                            `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId    *int32                                                           `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 10
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetSshReply retrieves the value of the leaf SshReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshReply is set, it can
// safely use t.GetSshReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetSshReply() bool {
	if t == nil || t.SshReply == nil {
		return false
	}
	return *t.SshReply
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) GetVirtualRouterId() int32 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 10
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.SshReply == nil {
		var v bool = false
		t.SshReply = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness represents the /nokia-conf/configure/service/ies/interface/ipv4/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DestIp             *string  `path:"dest-ip" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv4_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6 represents the /nokia-conf/configure/service/ies/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6 struct {
	Address                   map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address `path:"address" module:"nokia-conf"`
	Bfd                       *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd                `path:"bfd" module:"nokia-conf"`
	Dhcp6                     *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6              `path:"dhcp6" module:"nokia-conf"`
	DuplicateAddressDetection *bool                                                              `path:"duplicate-address-detection" module:"nokia-conf"`
	ForwardIpv4Packets        *bool                                                              `path:"forward-ipv4-packets" module:"nokia-conf"`
	Icmp6                     *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6              `path:"icmp6" module:"nokia-conf"`
	LinkLocalAddress          *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress   `path:"link-local-address" module:"nokia-conf"`
	LocalDhcpServer           *string                                                            `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery         *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery  `path:"neighbor-discovery" module:"nokia-conf"`
	QosRouteLookup            E_NokiaTypesRouter_QosRouteLookup                                  `path:"qos-route-lookup" module:"nokia-conf"`
	TcpMss                    *uint32                                                            `path:"tcp-mss" module:"nokia-conf"`
	UrpfCheck                 *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck          `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                      map[int32]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp     `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetAddress(Ipv6Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address struct to the
// list Address of NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) AppendAddress(v *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) NewVrrp(VirtualRouterId int32) (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) RenameVrrp(oldK, newK int32) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = &newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) DeleteVrrp(VirtualRouterId int32) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) AppendVrrp(v *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateBfd() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateDhcp6() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateIcmp6() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6{}
	return t.Icmp6
}

// GetOrCreateLinkLocalAddress retrieves the value of the LinkLocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateLinkLocalAddress() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress {
	if t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	t.LinkLocalAddress = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress{}
	return t.LinkLocalAddress
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetBfd() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetDhcp6() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetIcmp6() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetLinkLocalAddress returns the value of the LinkLocalAddress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver or the field LinkLocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetLinkLocalAddress() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress {
	if t != nil && t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetUrpfCheck() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Service_Ies_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetForwardIpv4Packets retrieves the value of the leaf ForwardIpv4Packets from the NokiaConf_Configure_Service_Ies_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardIpv4Packets is set, it can
// safely use t.GetForwardIpv4Packets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardIpv4Packets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetForwardIpv4Packets() bool {
	if t == nil || t.ForwardIpv4Packets == nil {
		return false
	}
	return *t.ForwardIpv4Packets
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Service_Ies_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Service_Ies_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Ies_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.ForwardIpv4Packets == nil {
		var v bool = false
		t.ForwardIpv4Packets = &v
	}
	t.Bfd.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.LinkLocalAddress.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address represents the /nokia-conf/configure/service/ies/interface/ipv6/address YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address struct {
	ApplyGroups               []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DuplicateAddressDetection *bool    `path:"duplicate-address-detection" module:"nokia-conf"`
	Eui_64                    *bool    `path:"eui-64" module:"nokia-conf"`
	Ipv6Address               *string  `path:"ipv6-address" module:"nokia-conf"`
	PrefixLength              *uint32  `path:"prefix-length" module:"nokia-conf"`
	PrimaryPreference         *uint32  `path:"primary-preference" module:"nokia-conf"`
	TrackSrrp                 *uint32  `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetEui_64 retrieves the value of the leaf Eui_64 from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eui_64 is set, it can
// safely use t.GetEui_64() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eui_64 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetEui_64() bool {
	if t == nil || t.Eui_64 == nil {
		return false
	}
	return *t.Eui_64
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetPrimaryPreference retrieves the value of the leaf PrimaryPreference from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryPreference is set, it can
// safely use t.GetPrimaryPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetPrimaryPreference() uint32 {
	if t == nil || t.PrimaryPreference == nil {
		return 0
	}
	return *t.PrimaryPreference
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.Eui_64 == nil {
		var v bool = false
		t.Eui_64 = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd represents the /nokia-conf/configure/service/ies/interface/ipv6/bfd YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                   `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                   `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                   `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                   `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) GetType() E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6 represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6 struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Relay              *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay  `path:"relay" module:"nokia-conf"`
	Server             *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) IsYANGGoStruct() {}

// GetOrCreateRelay retrieves the value of the Relay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) GetOrCreateRelay() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay {
	if t.Relay != nil {
		return t.Relay
	}
	t.Relay = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay{}
	return t.Relay
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) GetOrCreateServer() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server{}
	return t.Server
}

// GetRelay returns the value of the Relay struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6. If the receiver or the field Relay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) GetRelay() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay {
	if t != nil && t.Relay != nil {
		return t.Relay
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) GetServer() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Relay.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/relay YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay struct {
	AdminState         E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                   `path:"description" module:"nokia-conf"`
	LeasePopulate      *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	LinkAddress        *string                                                                   `path:"link-address" module:"nokia-conf"`
	NeighborResolution *bool                                                                     `path:"neighbor-resolution" module:"nokia-conf"`
	Option             *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option        `path:"option" module:"nokia-conf"`
	PythonPolicy       *string                                                                   `path:"python-policy" module:"nokia-conf"`
	Server             []string                                                                  `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                   `path:"source-address" module:"nokia-conf"`
	UserDb             *string                                                                   `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetOrCreateOption() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option{}
	return t.Option
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetLeasePopulate() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetOption() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetNeighborResolution retrieves the value of the leaf NeighborResolution from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborResolution is set, it can
// safely use t.GetNeighborResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborResolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetNeighborResolution() bool {
	if t == nil || t.NeighborResolution == nil {
		return false
	}
	return *t.NeighborResolution
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NeighborResolution == nil {
		var v bool = false
		t.NeighborResolution = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/relay/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate struct {
	MaxNbrOfLeases *int32                                                                                  `path:"max-nbr-of-leases" module:"nokia-conf"`
	RoutePopulate  *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate `path:"route-populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) IsYANGGoStruct() {}

// GetOrCreateRoutePopulate retrieves the value of the RoutePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetOrCreateRoutePopulate() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate {
	if t.RoutePopulate != nil {
		return t.RoutePopulate
	}
	t.RoutePopulate = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate{}
	return t.RoutePopulate
}

// GetRoutePopulate returns the value of the RoutePopulate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate. If the receiver or the field RoutePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetRoutePopulate() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate {
	if t != nil && t.RoutePopulate != nil {
		return t.RoutePopulate
	}
	return nil
}

// GetMaxNbrOfLeases retrieves the value of the leaf MaxNbrOfLeases from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxNbrOfLeases is set, it can
// safely use t.GetMaxNbrOfLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxNbrOfLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetMaxNbrOfLeases() int32 {
	if t == nil || t.MaxNbrOfLeases == nil {
		return 0
	}
	return *t.MaxNbrOfLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxNbrOfLeases == nil {
		var v int32 = 0
		t.MaxNbrOfLeases = &v
	}
	t.RoutePopulate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/relay/lease-populate/route-populate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate struct {
	Na *bool                                                                                      `path:"na" module:"nokia-conf"`
	Pd *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd `path:"pd" module:"nokia-conf" yangPresence:"true"`
	Ta *bool                                                                                      `path:"ta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) IsYANGGoStruct() {
}

// GetOrCreatePd retrieves the value of the Pd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetOrCreatePd() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd {
	if t.Pd != nil {
		return t.Pd
	}
	t.Pd = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd{}
	return t.Pd
}

// GetPd returns the value of the Pd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate. If the receiver or the field Pd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetPd() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd {
	if t != nil && t.Pd != nil {
		return t.Pd
	}
	return nil
}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetNa() bool {
	if t == nil || t.Na == nil {
		return false
	}
	return *t.Na
}

// GetTa retrieves the value of the leaf Ta from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ta is set, it can
// safely use t.GetTa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetTa() bool {
	if t == nil || t.Ta == nil {
		return false
	}
	return *t.Ta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = false
		t.Na = &v
	}
	if t.Ta == nil {
		var v bool = false
		t.Ta = &v
	}
	t.Pd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/relay/lease-populate/route-populate/pd YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd struct {
	Exclude *bool `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) IsYANGGoStruct() {
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/relay/option YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceId        *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId `path:"interface-id" module:"nokia-conf"`
	RemoteId           *bool                                                                          `path:"remote-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) IsYANGGoStruct() {}

// GetOrCreateInterfaceId retrieves the value of the InterfaceId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) GetOrCreateInterfaceId() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId {
	if t.InterfaceId != nil {
		return t.InterfaceId
	}
	t.InterfaceId = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId{}
	return t.InterfaceId
}

// GetInterfaceId returns the value of the InterfaceId struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option. If the receiver or the field InterfaceId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) GetInterfaceId() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId {
	if t != nil && t.InterfaceId != nil {
		return t.InterfaceId
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	t.InterfaceId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/relay/option/interface-id YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId struct {
	AsciiTuple YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	IfIndex    YANGEmpty `path:"if-index" module:"nokia-conf"`
	SapId      YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String     *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfIndex retrieves the value of the leaf IfIndex from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IfIndex is set, it can
// safely use t.GetIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetIfIndex() YANGEmpty {
	if t == nil || t.IfIndex == false {
		return false
	}
	return t.IfIndex
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/server YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxNbrOfLeases     *int32                                                                        `path:"max-nbr-of-leases" module:"nokia-conf"`
	PrefixDelegation   *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation `path:"prefix-delegation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) IsYANGGoStruct() {}

// GetOrCreatePrefixDelegation retrieves the value of the PrefixDelegation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) GetOrCreatePrefixDelegation() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation {
	if t.PrefixDelegation != nil {
		return t.PrefixDelegation
	}
	t.PrefixDelegation = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation{}
	return t.PrefixDelegation
}

// GetPrefixDelegation returns the value of the PrefixDelegation struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server. If the receiver or the field PrefixDelegation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) GetPrefixDelegation() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation {
	if t != nil && t.PrefixDelegation != nil {
		return t.PrefixDelegation
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxNbrOfLeases retrieves the value of the leaf MaxNbrOfLeases from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxNbrOfLeases is set, it can
// safely use t.GetMaxNbrOfLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxNbrOfLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) GetMaxNbrOfLeases() int32 {
	if t == nil || t.MaxNbrOfLeases == nil {
		return 8000
	}
	return *t.MaxNbrOfLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxNbrOfLeases == nil {
		var v int32 = 8000
		t.MaxNbrOfLeases = &v
	}
	t.PrefixDelegation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/server/prefix-delegation YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct {
	AdminState E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	Prefix     map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) IsYANGGoStruct() {
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) AppendPrefix(v *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/server/prefix-delegation/prefix YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct {
	ApplyGroups        []string                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientId           *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId               `path:"client-id" module:"nokia-conf"`
	Ipv6Prefix         *string                                                                                                     `path:"ipv6-prefix" module:"nokia-conf"`
	PreferredLifetime  NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime      NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) IsYANGGoStruct() {
}

// GetOrCreateClientId retrieves the value of the ClientId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetOrCreateClientId() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId {
	if t.ClientId != nil {
		return t.ClientId
	}
	t.ClientId = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId{}
	return t.ClientId
}

// GetClientId returns the value of the ClientId struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix. If the receiver or the field ClientId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetClientId() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId {
	if t != nil && t.ClientId != nil {
		return t.ClientId
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetPreferredLifetime() NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetValidLifetime() NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
	t.ClientId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId represents the /nokia-conf/configure/service/ies/interface/ipv6/dhcp6/server/prefix-delegation/prefix/client-id YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId struct {
	Duid *string `path:"duid" module:"nokia-conf"`
	Iaid *uint32 `path:"iaid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) IsYANGGoStruct() {
}

// GetDuid retrieves the value of the leaf Duid from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duid is set, it can
// safely use t.GetDuid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) GetDuid() string {
	if t == nil || t.Duid == nil {
		return ""
	}
	return *t.Duid
}

// GetIaid retrieves the value of the leaf Iaid from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iaid is set, it can
// safely use t.GetIaid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iaid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) GetIaid() uint32 {
	if t == nil || t.Iaid == nil {
		return 0
	}
	return *t.Iaid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6 represents the /nokia-conf/configure/service/ies/interface/ipv6/icmp6 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6 struct {
	PacketTooBig *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects    `path:"redirects" module:"nokia-conf"`
	TimeExceeded *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded `path:"time-exceeded" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetOrCreatePacketTooBig() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig{}
	return t.PacketTooBig
}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetOrCreateParamProblem() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetOrCreateRedirects() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects{}
	return t.Redirects
}

// GetOrCreateTimeExceeded retrieves the value of the TimeExceeded field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetOrCreateTimeExceeded() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded {
	if t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	t.TimeExceeded = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded{}
	return t.TimeExceeded
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetOrCreateUnreachables() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables{}
	return t.Unreachables
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetPacketTooBig() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetParamProblem() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetRedirects() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTimeExceeded returns the value of the TimeExceeded struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6. If the receiver or the field TimeExceeded is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetTimeExceeded() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded {
	if t != nil && t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) GetUnreachables() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TimeExceeded.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig represents the /nokia-conf/configure/service/ies/interface/ipv6/icmp6/packet-too-big YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem represents the /nokia-conf/configure/service/ies/interface/ipv6/icmp6/param-problem YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects represents the /nokia-conf/configure/service/ies/interface/ipv6/icmp6/redirects YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded represents the /nokia-conf/configure/service/ies/interface/ipv6/icmp6/time-exceeded YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_TimeExceeded) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables represents the /nokia-conf/configure/service/ies/interface/ipv6/icmp6/unreachables YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Icmp6_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress represents the /nokia-conf/configure/service/ies/interface/ipv6/link-local-address YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress struct {
	Address                   *string `path:"address" module:"nokia-conf"`
	DuplicateAddressDetection *bool   `path:"duplicate-address-detection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_LinkLocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/service/ies/interface/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery struct {
	HostRoute        *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute                 `path:"host-route" module:"nokia-conf"`
	LearnUnsolicited E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                 `path:"learn-unsolicited" module:"nokia-conf"`
	Limit            *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyNd     *bool                                                                                       `path:"local-proxy-nd" module:"nokia-conf"`
	PopulateHost     *bool                                                                                       `path:"populate-host" module:"nokia-conf"`
	ProactiveRefresh E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                 `path:"proactive-refresh" module:"nokia-conf"`
	ProxyNdPolicy    []string                                                                                    `path:"proxy-nd-policy" module:"nokia-conf"`
	ReachableTime    *uint32                                                                                     `path:"reachable-time" module:"nokia-conf"`
	RouteTag         *uint32                                                                                     `path:"route-tag" module:"nokia-conf"`
	SecureNd         *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd                  `path:"secure-nd" module:"nokia-conf"`
	StaleTime        *uint32                                                                                     `path:"stale-time" module:"nokia-conf"`
	StaticNeighbor   map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) NewStaticNeighbor(Ipv6Address string) (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	key := Ipv6Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) DeleteStaticNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetOrCreateHostRoute() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateSecureNd retrieves the value of the SecureNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetOrCreateSecureNd() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t.SecureNd != nil {
		return t.SecureNd
	}
	t.SecureNd = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd{}
	return t.SecureNd
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetHostRoute() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetSecureNd returns the value of the SecureNd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery. If the receiver or the field SecureNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetSecureNd() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t != nil && t.SecureNd != nil {
		return t.SecureNd
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetLearnUnsolicited() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.LearnUnsolicited == 0 {
		return 0
	}
	return t.LearnUnsolicited
}

// GetLocalProxyNd retrieves the value of the leaf LocalProxyNd from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyNd is set, it can
// safely use t.GetLocalProxyNd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyNd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetLocalProxyNd() bool {
	if t == nil || t.LocalProxyNd == nil {
		return false
	}
	return *t.LocalProxyNd
}

// GetPopulateHost retrieves the value of the leaf PopulateHost from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHost is set, it can
// safely use t.GetPopulateHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetPopulateHost() bool {
	if t == nil || t.PopulateHost == nil {
		return false
	}
	return *t.PopulateHost
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetProactiveRefresh() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.ProactiveRefresh == 0 {
		return 0
	}
	return t.ProactiveRefresh
}

// GetProxyNdPolicy retrieves the value of the leaf ProxyNdPolicy from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyNdPolicy is set, it can
// safely use t.GetProxyNdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyNdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetProxyNdPolicy() []string {
	if t == nil || t.ProxyNdPolicy == nil {
		return nil
	}
	return t.ProxyNdPolicy
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 0
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LocalProxyNd == nil {
		var v bool = false
		t.LocalProxyNd = &v
	}
	if t.PopulateHost == nil {
		var v bool = false
		t.PopulateHost = &v
	}
	t.HostRoute.PopulateDefaults()
	t.Limit.PopulateDefaults()
	t.SecureNd.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute represents the /nokia-conf/configure/service/ies/interface/ipv6/neighbor-discovery/host-route YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute struct {
	Populate map[E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) IsYANGGoStruct() {}

// NewPopulate creates a new entry in the Populate list of the
// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) NewPopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) RenamePopulate(oldK, newK E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) GetOrCreatePopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate {

	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) GetPopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) DeletePopulate(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) AppendPopulate(v *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate represents the /nokia-conf/configure/service/ies/interface/ipv6/neighbor-discovery/host-route/populate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                                         `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteType() E_NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit represents the /nokia-conf/configure/service/ies/interface/ipv6/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd represents the /nokia-conf/configure/service/ies/interface/ipv6/neighbor-discovery/secure-nd YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AllowUnsecuredMsgs *bool                       `path:"allow-unsecured-msgs" module:"nokia-conf"`
	PublicKeyMinBits   *uint32                     `path:"public-key-min-bits" module:"nokia-conf"`
	SecurityParameter  *uint32                     `path:"security-parameter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecuredMsgs retrieves the value of the leaf AllowUnsecuredMsgs from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecuredMsgs is set, it can
// safely use t.GetAllowUnsecuredMsgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecuredMsgs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAllowUnsecuredMsgs() bool {
	if t == nil || t.AllowUnsecuredMsgs == nil {
		return true
	}
	return *t.AllowUnsecuredMsgs
}

// GetPublicKeyMinBits retrieves the value of the leaf PublicKeyMinBits from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicKeyMinBits is set, it can
// safely use t.GetPublicKeyMinBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicKeyMinBits == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) GetPublicKeyMinBits() uint32 {
	if t == nil || t.PublicKeyMinBits == nil {
		return 1024
	}
	return *t.PublicKeyMinBits
}

// GetSecurityParameter retrieves the value of the leaf SecurityParameter from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityParameter is set, it can
// safely use t.GetSecurityParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) GetSecurityParameter() uint32 {
	if t == nil || t.SecurityParameter == nil {
		return 1
	}
	return *t.SecurityParameter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowUnsecuredMsgs == nil {
		var v bool = true
		t.AllowUnsecuredMsgs = &v
	}
	if t.PublicKeyMinBits == nil {
		var v uint32 = 1024
		t.PublicKeyMinBits = &v
	}
	if t.SecurityParameter == nil {
		var v uint32 = 1
		t.SecurityParameter = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/service/ies/interface/ipv6/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string  `path:"ipv6-address" module:"nokia-conf"`
	MacAddress         *string  `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck represents the /nokia-conf/configure/service/ies/interface/ipv6/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp represents the /nokia-conf/configure/service/ies/interface/ipv6/vrrp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Backup             []string                                                         `path:"backup" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay          *uint32                                                          `path:"init-delay" module:"nokia-conf"`
	Mac                *string                                                          `path:"mac" module:"nokia-conf"`
	MasterIntInherit   *bool                                                            `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval    *uint32                                                          `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup   *string                                                          `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply           *bool                                                            `path:"ntp-reply" module:"nokia-conf"`
	OperGroup          *string                                                          `path:"oper-group" module:"nokia-conf"`
	Owner              *bool                                                            `path:"owner" module:"nokia-conf"`
	Passive            *bool                                                            `path:"passive" module:"nokia-conf"`
	PingReply          *bool                                                            `path:"ping-reply" module:"nokia-conf"`
	Policy             *uint32                                                          `path:"policy" module:"nokia-conf"`
	Preempt            *bool                                                            `path:"preempt" module:"nokia-conf"`
	Priority           *uint32                                                          `path:"priority" module:"nokia-conf"`
	StandbyForwarding  *bool                                                            `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply        *bool                                                            `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply    *bool                                                            `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId    *int32                                                           `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 100
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) GetVirtualRouterId() int32 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 100
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness represents the /nokia-conf/configure/service/ies/interface/ipv6/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DestIp             *string  `path:"dest-ip" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Service_Ies_Interface_Ipv6_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_LoadBalancing represents the /nokia-conf/configure/service/ies/interface/load-balancing YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_LoadBalancing struct {
	FlowLabelLoadBalancing *bool                              `path:"flow-label-load-balancing" module:"nokia-conf"`
	IpLoadBalancing        E_NokiaTypesRouter_IpLoadBalancing `path:"ip-load-balancing" module:"nokia-conf"`
	SpiLoadBalancing       *bool                              `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing      *bool                              `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) IsYANGGoStruct() {}

// GetFlowLabelLoadBalancing retrieves the value of the leaf FlowLabelLoadBalancing from the NokiaConf_Configure_Service_Ies_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabelLoadBalancing is set, it can
// safely use t.GetFlowLabelLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabelLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) GetFlowLabelLoadBalancing() bool {
	if t == nil || t.FlowLabelLoadBalancing == nil {
		return false
	}
	return *t.FlowLabelLoadBalancing
}

// GetIpLoadBalancing retrieves the value of the leaf IpLoadBalancing from the NokiaConf_Configure_Service_Ies_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpLoadBalancing is set, it can
// safely use t.GetIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) GetIpLoadBalancing() E_NokiaTypesRouter_IpLoadBalancing {
	if t == nil || t.IpLoadBalancing == 0 {
		return NokiaTypesRouter_IpLoadBalancing_both
	}
	return t.IpLoadBalancing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Service_Ies_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Service_Ies_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowLabelLoadBalancing == nil {
		var v bool = false
		t.FlowLabelLoadBalancing = &v
	}
	if t.IpLoadBalancing == 0 {
		t.IpLoadBalancing = NokiaTypesRouter_IpLoadBalancing_both
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_LoadBalancing.
func (*NokiaConf_Configure_Service_Ies_Interface_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_PingTemplate represents the /nokia-conf/configure/service/ies/interface/ping-template YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_PingTemplate struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DestinationAddress *string                     `path:"destination-address" module:"nokia-conf"`
	Name               *string                     `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_PingTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_PingTemplate) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Service_Ies_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ies_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_PingTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_PingTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_PingTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_PingTemplate.
func (*NokiaConf_Configure_Service_Ies_Interface_PingTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist represents the /nokia-conf/configure/service/ies/interface/ptp-hw-assist YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist.
func (*NokiaConf_Configure_Service_Ies_Interface_PtpHwAssist) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap represents the /nokia-conf/configure/service/ies/interface/sap YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap struct {
	Aarp               *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp                    `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy   *uint32                                                                `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AntiSpoof          E_NokiaTypesServices_AntiSpoofOption                                   `path:"anti-spoof" module:"nokia-conf"`
	AppProfile         *string                                                                `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint64                                                                `path:"bandwidth" module:"nokia-conf"`
	CallingStationId   *string                                                                `path:"calling-station-id" module:"nokia-conf"`
	CollectStats       *bool                                                                  `path:"collect-stats" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection           `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                                `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                                                `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress                  `path:"egress" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm                  `path:"eth-cfm" module:"nokia-conf"`
	FwdWholesale       *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale            `path:"fwd-wholesale" module:"nokia-conf"`
	HostAdminState     E_NokiaTypesSros_AdminState                                            `path:"host-admin-state" module:"nokia-conf"`
	HostLockoutPolicy  *string                                                                `path:"host-lockout-policy" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress                 `path:"ingress" module:"nokia-conf"`
	IpTunnel           map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel     `path:"ip-tunnel" module:"nokia-conf"`
	IpsecGateway       map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway `path:"ipsec-gateway" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag                     `path:"lag" module:"nokia-conf"`
	MultiServiceSite   *string                                                                `path:"multi-service-site" module:"nokia-conf"`
	SapId              *string                                                                `path:"sap-id" module:"nokia-conf"`
	StaticHost         *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost              `path:"static-host" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy           `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap) IsYANGGoStruct() {}

// NewIpTunnel creates a new entry in the IpTunnel list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) NewIpTunnel(TunnelName string) (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpTunnel == nil {
		t.IpTunnel = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpTunnel", key)
	}

	t.IpTunnel[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel{
		TunnelName: &TunnelName,
	}

	return t.IpTunnel[key], nil
}

// RenameIpTunnel renames an entry in the list IpTunnel within
// the NokiaConf_Configure_Service_Ies_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) RenameIpTunnel(oldK, newK string) error {
	if _, ok := t.IpTunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in IpTunnel", newK)
	}

	e, ok := t.IpTunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpTunnel", oldK)
	}
	e.TunnelName = &newK

	t.IpTunnel[newK] = e
	delete(t.IpTunnel, oldK)
	return nil
}

// GetOrCreateIpTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateIpTunnel(TunnelName string) *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel {

	key := TunnelName

	if v, ok := t.IpTunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpTunnel(TunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpTunnel got unexpected error: %v", err))
	}
	return v
}

// GetIpTunnel retrieves the value with the specified key from
// the IpTunnel map field of NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetIpTunnel(TunnelName string) *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel {

	if t == nil {
		return nil
	}

	key := TunnelName

	if lm, ok := t.IpTunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) DeleteIpTunnel(TunnelName string) {
	key := TunnelName

	delete(t.IpTunnel, key)
}

// AppendIpTunnel appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel struct to the
// list IpTunnel of NokiaConf_Configure_Service_Ies_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) AppendIpTunnel(v *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) error {
	if v.TunnelName == nil {
		return fmt.Errorf("invalid nil key received for TunnelName")
	}

	key := *v.TunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpTunnel == nil {
		t.IpTunnel = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel)
	}

	if _, ok := t.IpTunnel[key]; ok {
		return fmt.Errorf("duplicate key for list IpTunnel %v", key)
	}

	t.IpTunnel[key] = v
	return nil
}

// NewIpsecGateway creates a new entry in the IpsecGateway list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) NewIpsecGateway(Name string) (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecGateway == nil {
		t.IpsecGateway = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecGateway[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecGateway", key)
	}

	t.IpsecGateway[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway{
		Name: &Name,
	}

	return t.IpsecGateway[key], nil
}

// RenameIpsecGateway renames an entry in the list IpsecGateway within
// the NokiaConf_Configure_Service_Ies_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) RenameIpsecGateway(oldK, newK string) error {
	if _, ok := t.IpsecGateway[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecGateway", newK)
	}

	e, ok := t.IpsecGateway[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecGateway", oldK)
	}
	e.Name = &newK

	t.IpsecGateway[newK] = e
	delete(t.IpsecGateway, oldK)
	return nil
}

// GetOrCreateIpsecGateway retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateIpsecGateway(Name string) *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway {

	key := Name

	if v, ok := t.IpsecGateway[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecGateway(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecGateway got unexpected error: %v", err))
	}
	return v
}

// GetIpsecGateway retrieves the value with the specified key from
// the IpsecGateway map field of NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetIpsecGateway(Name string) *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpsecGateway[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecGateway deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) DeleteIpsecGateway(Name string) {
	key := Name

	delete(t.IpsecGateway, key)
}

// AppendIpsecGateway appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway struct to the
// list IpsecGateway of NokiaConf_Configure_Service_Ies_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) AppendIpsecGateway(v *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecGateway == nil {
		t.IpsecGateway = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway)
	}

	if _, ok := t.IpsecGateway[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecGateway %v", key)
	}

	t.IpsecGateway[key] = v
	return nil
}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateAarp() *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp{}
	return t.Aarp
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Ies_Interface_Sap_Lag{}
	return t.Lag
}

// GetOrCreateStaticHost retrieves the value of the StaticHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateStaticHost() *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost {
	if t.StaticHost != nil {
		return t.StaticHost
	}
	t.StaticHost = &NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost{}
	return t.StaticHost
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetAarp() *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetCpuProtection() *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetEgress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetEthCfm() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetFwdWholesale() *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetIngress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetLag() *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetStaticHost returns the value of the StaticHost struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field StaticHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetStaticHost() *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost {
	if t != nil && t.StaticHost != nil {
		return t.StaticHost
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetTransitPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetAntiSpoof() E_NokiaTypesServices_AntiSpoofOption {
	if t == nil || t.AntiSpoof == 0 {
		return 0
	}
	return t.AntiSpoof
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetCallingStationId() string {
	if t == nil || t.CallingStationId == nil {
		return ""
	}
	return *t.CallingStationId
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHostAdminState retrieves the value of the leaf HostAdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostAdminState is set, it can
// safely use t.GetHostAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetHostAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.HostAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.HostAdminState
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HostAdminState == 0 {
		t.HostAdminState = NokiaTypesSros_AdminState_enable
	}
	t.Aarp.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.StaticHost.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
	for _, e := range t.IpTunnel {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecGateway {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp represents the /nokia-conf/configure/service/ies/interface/sap/aarp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection represents the /nokia-conf/configure/service/ies/interface/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                     `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                     `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                       `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/ies/interface/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress represents the /nokia-conf/configure/service/ies/interface/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress struct {
	AggRate                *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter  `path:"filter" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
	QueueGroupRedirectList *string                                                       `path:"queue-group-redirect-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetQueueGroupRedirectList retrieves the value of the leaf QueueGroupRedirectList from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupRedirectList is set, it can
// safely use t.GetQueueGroupRedirectList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupRedirectList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) GetQueueGroupRedirectList() string {
	if t == nil || t.QueueGroupRedirectList == nil {
		return ""
	}
	return *t.QueueGroupRedirectList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate represents the /nokia-conf/configure/service/ies/interface/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate struct {
	Cir                       NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth      *bool                                                                  `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                  `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64                                                                 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter represents the /nokia-conf/configure/service/ies/interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos struct {
	EgressRemarkPolicy   *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy   `path:"egress-remark-policy" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                          `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
	VlanQosPolicy        *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy        `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.EgressRemarkPolicy.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                            `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                               `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                             `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[uint32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues           `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                                            `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                             `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                                                           `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                                   `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                   `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	ApplyGroups        []string                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                                    `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                                   `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *int32                                                                                                    `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                            `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                            `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                             `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                                              `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                                `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *int32                                                                                                `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                                 `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                                `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                             `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                              `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/service/ies/interface/sap/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm struct {
	ApplyGroups          []string                                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats                                                    `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                      `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                   `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/ies/interface/sap/eth-cfm.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                       `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                       `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                      `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                     `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                     `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                     `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                      `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                     `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                     `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                     `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                     `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                       `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                  `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/ies/interface/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale represents the /nokia-conf/configure/service/ies/interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) IsYANGGoStruct() {}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress represents the /nokia-conf/configure/service/ies/interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress struct {
	AggregatePolicer       *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer `path:"aggregate-policer" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter           `path:"filter" module:"nokia-conf"`
	IpFilterPair           *bool                                                                   `path:"ip-filter-pair" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos              `path:"qos" module:"nokia-conf"`
	QueueGroupRedirectList *string                                                                 `path:"queue-group-redirect-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateAggregatePolicer retrieves the value of the AggregatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetOrCreateAggregatePolicer() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer {
	if t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	t.AggregatePolicer = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer{}
	return t.AggregatePolicer
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetAggregatePolicer returns the value of the AggregatePolicer struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress. If the receiver or the field AggregatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetAggregatePolicer() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer {
	if t != nil && t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetFilter() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// GetQueueGroupRedirectList retrieves the value of the leaf QueueGroupRedirectList from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupRedirectList is set, it can
// safely use t.GetQueueGroupRedirectList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupRedirectList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) GetQueueGroupRedirectList() string {
	if t == nil || t.QueueGroupRedirectList == nil {
		return ""
	}
	return *t.QueueGroupRedirectList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.AggregatePolicer.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer represents the /nokia-conf/configure/service/ies/interface/sap/ingress/aggregate-policer YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer struct {
	Burst NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Burst_Union `path:"burst" module:"nokia-conf"`
	Cbs   NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Cbs_Union   `path:"cbs" module:"nokia-conf"`
	Cir   NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Cir_Union   `path:"cir" module:"nokia-conf"`
	Rate  NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Rate_Union  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) IsYANGGoStruct() {}

// GetBurst retrieves the value of the leaf Burst from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Burst is set, it can
// safely use t.GetBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Burst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) GetBurst() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Burst_Union {
	if t == nil || t.Burst == nil {
		return NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	return t.Burst
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) GetCbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) GetRate() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_AggrPolicerRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Burst == nil {
		t.Burst = NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_AggrPolicerRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_AggregatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter represents the /nokia-conf/configure/service/ies/interface/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                   `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                             `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                               `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                           `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria      `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                              `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                              `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                              `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                                   `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                                  `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                              `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                               `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/ies/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel struct {
	AdminState                E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	BackupRemoteIpAddress     *string                                                                         `path:"backup-remote-ip-address" module:"nokia-conf"`
	ClearDfBit                *bool                                                                           `path:"clear-df-bit" module:"nokia-conf"`
	DeliveryService           *string                                                                         `path:"delivery-service" module:"nokia-conf"`
	Description               *string                                                                         `path:"description" module:"nokia-conf"`
	DestIp                    map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp       `path:"dest-ip" module:"nokia-conf"`
	Dscp                      E_NokiaTypesQos_DscpName                                                        `path:"dscp" module:"nokia-conf"`
	EncapsulatedIpMtu         *uint32                                                                         `path:"encapsulated-ip-mtu" module:"nokia-conf"`
	GreHeader                 *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader               `path:"gre-header" module:"nokia-conf"`
	IcmpGeneration            *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration          `path:"icmp-generation" module:"nokia-conf"`
	Icmp6Generation           *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation         `path:"icmp6-generation" module:"nokia-conf"`
	IpMtu                     *uint32                                                                         `path:"ip-mtu" module:"nokia-conf"`
	IpsecTransportModeProfile *string                                                                         `path:"ipsec-transport-mode-profile" module:"nokia-conf"`
	LocalIpAddress            *string                                                                         `path:"local-ip-address" module:"nokia-conf"`
	PmtuDiscoveryAging        *uint32                                                                         `path:"pmtu-discovery-aging" module:"nokia-conf"`
	PrivateTcpMssAdjust       *int32                                                                          `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PropagatePmtuV4           *bool                                                                           `path:"propagate-pmtu-v4" module:"nokia-conf"`
	PropagatePmtuV6           *bool                                                                           `path:"propagate-pmtu-v6" module:"nokia-conf"`
	PublicTcpMssAdjust        NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_PublicTcpMssAdjust_Union `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	Reassembly                NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Reassembly_Union         `path:"reassembly" module:"nokia-conf"`
	RemoteIpAddress           *string                                                                         `path:"remote-ip-address" module:"nokia-conf"`
	TunnelName                *string                                                                         `path:"tunnel-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) IsYANGGoStruct() {}

// NewDestIp creates a new entry in the DestIp list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) NewDestIp(DestIpAddress string) (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp)
	}

	key := DestIpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestIp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestIp", key)
	}

	t.DestIp[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp{
		DestIpAddress: &DestIpAddress,
	}

	return t.DestIp[key], nil
}

// RenameDestIp renames an entry in the list DestIp within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) RenameDestIp(oldK, newK string) error {
	if _, ok := t.DestIp[newK]; ok {
		return fmt.Errorf("key %v already exists in DestIp", newK)
	}

	e, ok := t.DestIp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestIp", oldK)
	}
	e.DestIpAddress = &newK

	t.DestIp[newK] = e
	delete(t.DestIp, oldK)
	return nil
}

// GetOrCreateDestIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetOrCreateDestIp(DestIpAddress string) *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp {

	key := DestIpAddress

	if v, ok := t.DestIp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestIp(DestIpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestIp got unexpected error: %v", err))
	}
	return v
}

// GetDestIp retrieves the value with the specified key from
// the DestIp map field of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetDestIp(DestIpAddress string) *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp {

	if t == nil {
		return nil
	}

	key := DestIpAddress

	if lm, ok := t.DestIp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) DeleteDestIp(DestIpAddress string) {
	key := DestIpAddress

	delete(t.DestIp, key)
}

// AppendDestIp appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp struct to the
// list DestIp of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) AppendDestIp(v *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) error {
	if v.DestIpAddress == nil {
		return fmt.Errorf("invalid nil key received for DestIpAddress")
	}

	key := *v.DestIpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp)
	}

	if _, ok := t.DestIp[key]; ok {
		return fmt.Errorf("duplicate key for list DestIp %v", key)
	}

	t.DestIp[key] = v
	return nil
}

// GetOrCreateGreHeader retrieves the value of the GreHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetOrCreateGreHeader() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader {
	if t.GreHeader != nil {
		return t.GreHeader
	}
	t.GreHeader = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader{}
	return t.GreHeader
}

// GetOrCreateIcmpGeneration retrieves the value of the IcmpGeneration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetOrCreateIcmpGeneration() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration {
	if t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	t.IcmpGeneration = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration{}
	return t.IcmpGeneration
}

// GetOrCreateIcmp6Generation retrieves the value of the Icmp6Generation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetOrCreateIcmp6Generation() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation {
	if t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	t.Icmp6Generation = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation{}
	return t.Icmp6Generation
}

// GetGreHeader returns the value of the GreHeader struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If the receiver or the field GreHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetGreHeader() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader {
	if t != nil && t.GreHeader != nil {
		return t.GreHeader
	}
	return nil
}

// GetIcmpGeneration returns the value of the IcmpGeneration struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If the receiver or the field IcmpGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetIcmpGeneration() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration {
	if t != nil && t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	return nil
}

// GetIcmp6Generation returns the value of the Icmp6Generation struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel. If the receiver or the field Icmp6Generation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetIcmp6Generation() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation {
	if t != nil && t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackupRemoteIpAddress retrieves the value of the leaf BackupRemoteIpAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupRemoteIpAddress is set, it can
// safely use t.GetBackupRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupRemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetBackupRemoteIpAddress() string {
	if t == nil || t.BackupRemoteIpAddress == nil {
		return ""
	}
	return *t.BackupRemoteIpAddress
}

// GetClearDfBit retrieves the value of the leaf ClearDfBit from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearDfBit is set, it can
// safely use t.GetClearDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetClearDfBit() bool {
	if t == nil || t.ClearDfBit == nil {
		return false
	}
	return *t.ClearDfBit
}

// GetDeliveryService retrieves the value of the leaf DeliveryService from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryService is set, it can
// safely use t.GetDeliveryService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetDeliveryService() string {
	if t == nil || t.DeliveryService == nil {
		return ""
	}
	return *t.DeliveryService
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetEncapsulatedIpMtu retrieves the value of the leaf EncapsulatedIpMtu from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulatedIpMtu is set, it can
// safely use t.GetEncapsulatedIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulatedIpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetEncapsulatedIpMtu() uint32 {
	if t == nil || t.EncapsulatedIpMtu == nil {
		return 0
	}
	return *t.EncapsulatedIpMtu
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetIpsecTransportModeProfile retrieves the value of the leaf IpsecTransportModeProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransportModeProfile is set, it can
// safely use t.GetIpsecTransportModeProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransportModeProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetIpsecTransportModeProfile() string {
	if t == nil || t.IpsecTransportModeProfile == nil {
		return ""
	}
	return *t.IpsecTransportModeProfile
}

// GetLocalIpAddress retrieves the value of the leaf LocalIpAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpAddress is set, it can
// safely use t.GetLocalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetLocalIpAddress() string {
	if t == nil || t.LocalIpAddress == nil {
		return ""
	}
	return *t.LocalIpAddress
}

// GetPmtuDiscoveryAging retrieves the value of the leaf PmtuDiscoveryAging from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtuDiscoveryAging is set, it can
// safely use t.GetPmtuDiscoveryAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtuDiscoveryAging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetPmtuDiscoveryAging() uint32 {
	if t == nil || t.PmtuDiscoveryAging == nil {
		return 900
	}
	return *t.PmtuDiscoveryAging
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPropagatePmtuV4 retrieves the value of the leaf PropagatePmtuV4 from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV4 is set, it can
// safely use t.GetPropagatePmtuV4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetPropagatePmtuV4() bool {
	if t == nil || t.PropagatePmtuV4 == nil {
		return false
	}
	return *t.PropagatePmtuV4
}

// GetPropagatePmtuV6 retrieves the value of the leaf PropagatePmtuV6 from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV6 is set, it can
// safely use t.GetPropagatePmtuV6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetPropagatePmtuV6() bool {
	if t == nil || t.PropagatePmtuV6 == nil {
		return false
	}
	return *t.PropagatePmtuV6
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetPublicTcpMssAdjust() NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetReassembly retrieves the value of the leaf Reassembly from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassembly is set, it can
// safely use t.GetReassembly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassembly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetReassembly() NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Reassembly_Union {
	if t == nil || t.Reassembly == nil {
		return nil
	}
	return t.Reassembly
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// GetTunnelName retrieves the value of the leaf TunnelName from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelName is set, it can
// safely use t.GetTunnelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) GetTunnelName() string {
	if t == nil || t.TunnelName == nil {
		return ""
	}
	return *t.TunnelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClearDfBit == nil {
		var v bool = false
		t.ClearDfBit = &v
	}
	if t.PmtuDiscoveryAging == nil {
		var v uint32 = 900
		t.PmtuDiscoveryAging = &v
	}
	t.GreHeader.PopulateDefaults()
	t.IcmpGeneration.PopulateDefaults()
	t.Icmp6Generation.PopulateDefaults()
	for _, e := range t.DestIp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/dest-ip YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp struct {
	DestIpAddress *string `path:"dest-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) IsYANGGoStruct() {}

// GetDestIpAddress retrieves the value of the leaf DestIpAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIpAddress is set, it can
// safely use t.GetDestIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) GetDestIpAddress() string {
	if t == nil || t.DestIpAddress == nil {
		return ""
	}
	return *t.DestIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestIpAddress == nil {
		return nil, fmt.Errorf("nil value for key DestIpAddress")
	}

	return map[string]interface{}{
		"dest-ip-address": *t.DestIpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_DestIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/gre-header YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader struct {
	AdminState E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	Key        *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) IsYANGGoStruct() {}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) GetOrCreateKey() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key{}
	return t.Key
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) GetKey() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/gre-header/key YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Receive    *uint32                     `path:"receive" module:"nokia-conf"`
	Send       *uint32                     `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 0
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) GetSend() uint32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Receive == nil {
		var v uint32 = 0
		t.Receive = &v
	}
	if t.Send == nil {
		var v uint32 = 0
		t.Send = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_GreHeader_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/icmp6-generation YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation struct {
	PacketTooBig *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) GetOrCreatePacketTooBig() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig{}
	return t.PacketTooBig
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) GetPacketTooBig() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/icmp6-generation/packet-too-big YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/icmp-generation YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration struct {
	FragRequired *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired `path:"frag-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) IsYANGGoStruct() {}

// GetOrCreateFragRequired retrieves the value of the FragRequired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) GetOrCreateFragRequired() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired {
	if t.FragRequired != nil {
		return t.FragRequired
	}
	t.FragRequired = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired{}
	return t.FragRequired
}

// GetFragRequired returns the value of the FragRequired struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration. If the receiver or the field FragRequired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) GetFragRequired() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired {
	if t != nil && t.FragRequired != nil {
		return t.FragRequired
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FragRequired.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired represents the /nokia-conf/configure/service/ies/interface/sap/ip-tunnel/icmp-generation/frag-required YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway struct {
	AdminState            E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Cert                  *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert                  `path:"cert" module:"nokia-conf"`
	ClientDb              *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb              `path:"client-db" module:"nokia-conf" yangPresence:"true"`
	DefaultSecureService  *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService  `path:"default-secure-service" module:"nokia-conf" yangPresence:"true"`
	DefaultTunnelTemplate *uint32                                                                           `path:"default-tunnel-template" module:"nokia-conf"`
	DhcpAddressAssignment *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment `path:"dhcp-address-assignment" module:"nokia-conf"`
	IkePolicy             *uint32                                                                           `path:"ike-policy" module:"nokia-conf"`
	Local                 *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local                 `path:"local" module:"nokia-conf"`
	MaxHistoryKeyRecords  *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords  `path:"max-history-key-records" module:"nokia-conf"`
	Name                  *string                                                                           `path:"name" module:"nokia-conf"`
	PreSharedKey          *string                                                                           `path:"pre-shared-key" module:"nokia-conf"`
	Radius                *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius                `path:"radius" module:"nokia-conf"`
	TsList                *string                                                                           `path:"ts-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) IsYANGGoStruct() {}

// GetOrCreateCert retrieves the value of the Cert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateCert() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert {
	if t.Cert != nil {
		return t.Cert
	}
	t.Cert = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert{}
	return t.Cert
}

// GetOrCreateClientDb retrieves the value of the ClientDb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateClientDb() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb {
	if t.ClientDb != nil {
		return t.ClientDb
	}
	t.ClientDb = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb{}
	return t.ClientDb
}

// GetOrCreateDefaultSecureService retrieves the value of the DefaultSecureService field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateDefaultSecureService() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService {
	if t.DefaultSecureService != nil {
		return t.DefaultSecureService
	}
	t.DefaultSecureService = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService{}
	return t.DefaultSecureService
}

// GetOrCreateDhcpAddressAssignment retrieves the value of the DhcpAddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateDhcpAddressAssignment() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment {
	if t.DhcpAddressAssignment != nil {
		return t.DhcpAddressAssignment
	}
	t.DhcpAddressAssignment = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment{}
	return t.DhcpAddressAssignment
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateLocal() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local{}
	return t.Local
}

// GetOrCreateMaxHistoryKeyRecords retrieves the value of the MaxHistoryKeyRecords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateMaxHistoryKeyRecords() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords {
	if t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	t.MaxHistoryKeyRecords = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords{}
	return t.MaxHistoryKeyRecords
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetOrCreateRadius() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius{}
	return t.Radius
}

// GetCert returns the value of the Cert struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field Cert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetCert() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert {
	if t != nil && t.Cert != nil {
		return t.Cert
	}
	return nil
}

// GetClientDb returns the value of the ClientDb struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field ClientDb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetClientDb() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb {
	if t != nil && t.ClientDb != nil {
		return t.ClientDb
	}
	return nil
}

// GetDefaultSecureService returns the value of the DefaultSecureService struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field DefaultSecureService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetDefaultSecureService() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService {
	if t != nil && t.DefaultSecureService != nil {
		return t.DefaultSecureService
	}
	return nil
}

// GetDhcpAddressAssignment returns the value of the DhcpAddressAssignment struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field DhcpAddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetDhcpAddressAssignment() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment {
	if t != nil && t.DhcpAddressAssignment != nil {
		return t.DhcpAddressAssignment
	}
	return nil
}

// GetLocal returns the value of the Local struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetLocal() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetMaxHistoryKeyRecords returns the value of the MaxHistoryKeyRecords struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field MaxHistoryKeyRecords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetMaxHistoryKeyRecords() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords {
	if t != nil && t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetRadius() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultTunnelTemplate retrieves the value of the leaf DefaultTunnelTemplate from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTunnelTemplate is set, it can
// safely use t.GetDefaultTunnelTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTunnelTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetDefaultTunnelTemplate() uint32 {
	if t == nil || t.DefaultTunnelTemplate == nil {
		return 0
	}
	return *t.DefaultTunnelTemplate
}

// GetIkePolicy retrieves the value of the leaf IkePolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePolicy is set, it can
// safely use t.GetIkePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetIkePolicy() uint32 {
	if t == nil || t.IkePolicy == nil {
		return 0
	}
	return *t.IkePolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// GetTsList retrieves the value of the leaf TsList from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsList is set, it can
// safely use t.GetTsList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) GetTsList() string {
	if t == nil || t.TsList == nil {
		return ""
	}
	return *t.TsList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Cert.PopulateDefaults()
	t.ClientDb.PopulateDefaults()
	t.DefaultSecureService.PopulateDefaults()
	t.DhcpAddressAssignment.PopulateDefaults()
	t.Local.PopulateDefaults()
	t.MaxHistoryKeyRecords.PopulateDefaults()
	t.Radius.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/cert YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert struct {
	CertProfile        *string                                                                       `path:"cert-profile" module:"nokia-conf"`
	StatusVerify       *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify `path:"status-verify" module:"nokia-conf"`
	TrustAnchorProfile *string                                                                       `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) IsYANGGoStruct() {}

// GetOrCreateStatusVerify retrieves the value of the StatusVerify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) GetOrCreateStatusVerify() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify {
	if t.StatusVerify != nil {
		return t.StatusVerify
	}
	t.StatusVerify = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify{}
	return t.StatusVerify
}

// GetStatusVerify returns the value of the StatusVerify struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert. If the receiver or the field StatusVerify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) GetStatusVerify() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify {
	if t != nil && t.StatusVerify != nil {
		return t.StatusVerify
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.StatusVerify.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/cert/status-verify YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify struct {
	DefaultResult E_NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult `path:"default-result" module:"nokia-conf"`
	Primary       E_NokiaTypesIpsec_CertRevocationStatus                                                       `path:"primary" module:"nokia-conf"`
	Secondary     E_NokiaTypesIpsec_CertRevocationStatusWithNone                                               `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) IsYANGGoStruct() {
}

// GetDefaultResult retrieves the value of the leaf DefaultResult from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultResult is set, it can
// safely use t.GetDefaultResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultResult == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetDefaultResult() E_NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult {
	if t == nil || t.DefaultResult == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult_revoked
	}
	return t.DefaultResult
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetPrimary() E_NokiaTypesIpsec_CertRevocationStatus {
	if t == nil || t.Primary == 0 {
		return NokiaTypesIpsec_CertRevocationStatus_crl
	}
	return t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetSecondary() E_NokiaTypesIpsec_CertRevocationStatusWithNone {
	if t == nil || t.Secondary == 0 {
		return NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
	return t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultResult == 0 {
		t.DefaultResult = NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult_revoked
	}
	if t.Primary == 0 {
		t.Primary = NokiaTypesIpsec_CertRevocationStatus_crl
	}
	if t.Secondary == 0 {
		t.Secondary = NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/client-db YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb struct {
	Fallback *bool   `path:"fallback" module:"nokia-conf"`
	Name     *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) IsYANGGoStruct() {}

// GetFallback retrieves the value of the leaf Fallback from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fallback is set, it can
// safely use t.GetFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) GetFallback() bool {
	if t == nil || t.Fallback == nil {
		return true
	}
	return *t.Fallback
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fallback == nil {
		var v bool = true
		t.Fallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_ClientDb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/default-secure-service YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DefaultSecureService) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/dhcp-address-assignment YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment struct {
	Dhcpv4 *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 `path:"dhcpv4" module:"nokia-conf" yangPresence:"true"`
	Dhcpv6 *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 `path:"dhcpv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateDhcpv4 retrieves the value of the Dhcpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetOrCreateDhcpv4() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 {
	if t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	t.Dhcpv4 = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4{}
	return t.Dhcpv4
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetOrCreateDhcpv6() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcpv4 returns the value of the Dhcpv4 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment. If the receiver or the field Dhcpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetDhcpv4() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 {
	if t != nil && t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetDhcpv6() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcpv4.PopulateDefaults()
	t.Dhcpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	GiAddress          *string                                                                                         `path:"gi-address" module:"nokia-conf"`
	SendRelease        *bool                                                                                           `path:"send-release" module:"nokia-conf"`
	Server             *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) IsYANGGoStruct() {
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetOrCreateServer() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetServer() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetSendRelease retrieves the value of the leaf SendRelease from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRelease is set, it can
// safely use t.GetSendRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetSendRelease() bool {
	if t == nil || t.SendRelease == nil {
		return true
	}
	return *t.SendRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendRelease == nil {
		var v bool = true
		t.SendRelease = &v
	}
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv4/server YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server struct {
	Address        []string `path:"address" module:"nokia-conf"`
	RouterInstance *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	LinkAddress        *string                                                                                         `path:"link-address" module:"nokia-conf"`
	SendRelease        *bool                                                                                           `path:"send-release" module:"nokia-conf"`
	Server             *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) IsYANGGoStruct() {
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetOrCreateServer() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetServer() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetSendRelease retrieves the value of the leaf SendRelease from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRelease is set, it can
// safely use t.GetSendRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetSendRelease() bool {
	if t == nil || t.SendRelease == nil {
		return true
	}
	return *t.SendRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendRelease == nil {
		var v bool = true
		t.SendRelease = &v
	}
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv6/server YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server struct {
	Address        []string `path:"address" module:"nokia-conf"`
	RouterInstance *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/local YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local struct {
	AddressAssignment *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment `path:"address-assignment" module:"nokia-conf" yangPresence:"true"`
	GatewayAddress    *string                                                                             `path:"gateway-address" module:"nokia-conf"`
	Id                *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id                `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) IsYANGGoStruct() {}

// GetOrCreateAddressAssignment retrieves the value of the AddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) GetOrCreateAddressAssignment() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment {
	if t.AddressAssignment != nil {
		return t.AddressAssignment
	}
	t.AddressAssignment = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment{}
	return t.AddressAssignment
}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) GetOrCreateId() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id{}
	return t.Id
}

// GetAddressAssignment returns the value of the AddressAssignment struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local. If the receiver or the field AddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) GetAddressAssignment() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment {
	if t != nil && t.AddressAssignment != nil {
		return t.AddressAssignment
	}
	return nil
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) GetId() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetGatewayAddress retrieves the value of the leaf GatewayAddress from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayAddress is set, it can
// safely use t.GetGatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) GetGatewayAddress() string {
	if t == nil || t.GatewayAddress == nil {
		return ""
	}
	return *t.GatewayAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddressAssignment.PopulateDefaults()
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/local/address-assignment YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment struct {
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6               *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetIpv4() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetIpv6() *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/local/address-assignment/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 struct {
	DhcpServer     *string `path:"dhcp-server" module:"nokia-conf"`
	Pool           *string `path:"pool" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	SecondaryPool  *string `path:"secondary-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) IsYANGGoStruct() {
}

// GetDhcpServer retrieves the value of the leaf DhcpServer from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpServer is set, it can
// safely use t.GetDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetDhcpServer() string {
	if t == nil || t.DhcpServer == nil {
		return ""
	}
	return *t.DhcpServer
}

// GetPool retrieves the value of the leaf Pool from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pool is set, it can
// safely use t.GetPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetPool() string {
	if t == nil || t.Pool == nil {
		return ""
	}
	return *t.Pool
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSecondaryPool retrieves the value of the leaf SecondaryPool from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryPool is set, it can
// safely use t.GetSecondaryPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetSecondaryPool() string {
	if t == nil || t.SecondaryPool == nil {
		return ""
	}
	return *t.SecondaryPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/local/address-assignment/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 struct {
	DhcpServer     *string `path:"dhcp-server" module:"nokia-conf"`
	Pool           *string `path:"pool" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) IsYANGGoStruct() {
}

// GetDhcpServer retrieves the value of the leaf DhcpServer from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpServer is set, it can
// safely use t.GetDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetDhcpServer() string {
	if t == nil || t.DhcpServer == nil {
		return ""
	}
	return *t.DhcpServer
}

// GetPool retrieves the value of the leaf Pool from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pool is set, it can
// safely use t.GetPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetPool() string {
	if t == nil || t.Pool == nil {
		return ""
	}
	return *t.Pool
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/local/id YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id struct {
	Auto YANGEmpty `path:"auto" module:"nokia-conf"`
	Fqdn *string   `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string   `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) IsYANGGoStruct() {}

// GetAuto retrieves the value of the leaf Auto from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Auto is set, it can
// safely use t.GetAuto() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Auto == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) GetAuto() YANGEmpty {
	if t == nil || t.Auto == false {
		return false
	}
	return t.Auto
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Local_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/max-history-key-records YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords struct {
	Esp *uint32 `path:"esp" module:"nokia-conf"`
	Ike *uint32 `path:"ike" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) IsYANGGoStruct() {
}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) GetEsp() uint32 {
	if t == nil || t.Esp == nil {
		return 0
	}
	return *t.Esp
}

// GetIke retrieves the value of the leaf Ike from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ike is set, it can
// safely use t.GetIke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ike == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) GetIke() uint32 {
	if t == nil || t.Ike == nil {
		return 0
	}
	return *t.Ike
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius represents the /nokia-conf/configure/service/ies/interface/sap/ipsec-gateway/radius YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius struct {
	AccountingPolicy     *string `path:"accounting-policy" module:"nokia-conf"`
	AuthenticationPolicy *string `path:"authentication-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) GetAccountingPolicy() string {
	if t == nil || t.AccountingPolicy == nil {
		return ""
	}
	return *t.AccountingPolicy
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_IpsecGateway_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Lag represents the /nokia-conf/configure/service/ies/interface/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Lag struct {
	LinkMapProfile *int32                                                         `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Lag.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/service/ies/interface/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost represents the /nokia-conf/configure/service/ies/interface/sap/static-host YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost struct {
	Ipv4 map[NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key represents the key for list Ipv4 of element /nokia-conf/configure/service/ies/interface/sap/static-host.
type NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key struct {
	Ip  string `path:"ip"`
	Mac string `path:"mac"`
}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) NewIpv4(Ip string, Mac string) (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4)
	}

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4{
		Ip:  &Ip,
		Mac: &Mac,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) RenameIpv4(oldK, newK NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Ip = &newK.Ip
	e.Mac = &newK.Mac

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) GetOrCreateIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 {

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Ip, Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) GetIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) DeleteIpv4(Ip string, Mac string) {
	key := NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) AppendIpv4(v *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key for Ip")
	}

	if v.Mac == nil {
		return fmt.Errorf("invalid nil key for Mac")
	}

	key := NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  *v.Ip,
		Mac: *v.Mac,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 represents the /nokia-conf/configure/service/ies/interface/sap/static-host/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	AncpString         *string                                                                     `path:"ancp-string" module:"nokia-conf"`
	AppProfile         *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile   `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	IntDestId          *string                                                                     `path:"int-dest-id" module:"nokia-conf"`
	Ip                 *string                                                                     `path:"ip" module:"nokia-conf"`
	Mac                *string                                                                     `path:"mac" module:"nokia-conf"`
	SlaProfile         *string                                                                     `path:"sla-profile" module:"nokia-conf"`
	SubProfile         *string                                                                     `path:"sub-profile" module:"nokia-conf"`
	SubscriberId       *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) IsYANGGoStruct() {}

// GetOrCreateAppProfile retrieves the value of the AppProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetOrCreateAppProfile() *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile {
	if t.AppProfile != nil {
		return t.AppProfile
	}
	t.AppProfile = &NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile{}
	return t.AppProfile
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId{}
	return t.SubscriberId
}

// GetAppProfile returns the value of the AppProfile struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4. If the receiver or the field AppProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetAppProfile() *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile {
	if t != nil && t.AppProfile != nil {
		return t.AppProfile
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetSubscriberId() *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AppProfile.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"ip":  *t.Ip,
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile represents the /nokia-conf/configure/service/ies/interface/sap/static-host/ipv4/app-profile YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile struct {
	Profile *string `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) IsYANGGoStruct() {}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId represents the /nokia-conf/configure/service/ies/interface/sap/static-host/ipv4/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId struct {
	String   *string   `path:"string" module:"nokia-conf"`
	UseSapId YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) IsYANGGoStruct() {}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy represents the /nokia-conf/configure/service/ies/interface/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp represents the /nokia-conf/configure/service/ies/interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp struct {
	Aarp               *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp          `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy   *uint32                                                           `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	AppProfile         *string                                                           `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Bfd                *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd           `path:"bfd" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness   `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate        *string                                                           `path:"bfd-template" module:"nokia-conf"`
	CollectStats       *bool                                                             `path:"collect-stats" module:"nokia-conf"`
	ControlWord        *bool                                                             `path:"control-word" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress        `path:"egress" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                         `path:"entropy-label" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm        `path:"eth-cfm" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel     `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress            *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress       `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                           `path:"sdp-bind-id" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	VcType             E_NokiaTypesServices_IesSdpBindVcType                             `path:"vc-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetAarp() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetBfd() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetCpuProtection() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetEthCfm() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) GetVcType() E_NokiaTypesServices_IesSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_IesSdpBindVcType_ether
	}
	return t.VcType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_IesSdpBindVcType_ether
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd struct {
	BfdLiveness    *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate    *string                                                             `path:"bfd-template" module:"nokia-conf"`
	FailureAction  E_NokiaTypesServices_SbindBfdFailAction                             `path:"failure-action" module:"nokia-conf"`
	WaitForUpTimer *uint32                                                             `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) GetFailureAction() E_NokiaTypesServices_SbindBfdFailAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaTypesServices_SbindBfdFailAction_none
	}
	return t.FailureAction
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureAction == 0 {
		t.FailureAction = NokiaTypesServices_SbindBfdFailAction_none
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                          `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                          `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                            `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                           `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                  `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm struct {
	ApplyGroups          []string                                                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats                                                         `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                                `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                             `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                            `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                            `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                           `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                          `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                          `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                          `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                           `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                          `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                          `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                          `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                          `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                            `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                       `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                            `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                 `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/service/ies/interface/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Service_Ies_Interface_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls represents the /nokia-conf/configure/service/ies/interface/vpls YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls struct {
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress  `path:"egress" module:"nokia-conf"`
	Evpn               *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn    `path:"evpn" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress `path:"ingress" module:"nokia-conf"`
	VplsName           *string                                                 `path:"vpls-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress{}
	return t.Egress
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetOrCreateEvpn() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn{}
	return t.Evpn
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetEgress() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetEvpn() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetIngress() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVplsName retrieves the value of the leaf VplsName from the NokiaConf_Configure_Service_Ies_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VplsName is set, it can
// safely use t.GetVplsName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VplsName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) GetVplsName() string {
	if t == nil || t.VplsName == nil {
		return ""
	}
	return *t.VplsName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Vpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VplsName == nil {
		return nil, fmt.Errorf("nil value for key VplsName")
	}

	return map[string]interface{}{
		"vpls-name": *t.VplsName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress represents the /nokia-conf/configure/service/ies/interface/vpls/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress struct {
	ReclassifyUsingQos   *string                                                                     `path:"reclassify-using-qos" module:"nokia-conf"`
	RoutedOverrideFilter *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter `path:"routed-override-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) IsYANGGoStruct() {}

// GetOrCreateRoutedOverrideFilter retrieves the value of the RoutedOverrideFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) GetOrCreateRoutedOverrideFilter() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter {
	if t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	t.RoutedOverrideFilter = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter{}
	return t.RoutedOverrideFilter
}

// GetRoutedOverrideFilter returns the value of the RoutedOverrideFilter struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress. If the receiver or the field RoutedOverrideFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) GetRoutedOverrideFilter() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter {
	if t != nil && t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	return nil
}

// GetReclassifyUsingQos retrieves the value of the leaf ReclassifyUsingQos from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReclassifyUsingQos is set, it can
// safely use t.GetReclassifyUsingQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReclassifyUsingQos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) GetReclassifyUsingQos() string {
	if t == nil || t.ReclassifyUsingQos == nil {
		return ""
	}
	return *t.ReclassifyUsingQos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RoutedOverrideFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter represents the /nokia-conf/configure/service/ies/interface/vpls/egress/routed-override-filter YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Egress_RoutedOverrideFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn represents the /nokia-conf/configure/service/ies/interface/vpls/evpn YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn struct {
	Arp *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp `path:"arp" module:"nokia-conf"`
	Nd  *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd  `path:"nd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) IsYANGGoStruct() {}

// GetOrCreateArp retrieves the value of the Arp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) GetOrCreateArp() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp {
	if t.Arp != nil {
		return t.Arp
	}
	t.Arp = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp{}
	return t.Arp
}

// GetOrCreateNd retrieves the value of the Nd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) GetOrCreateNd() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd {
	if t.Nd != nil {
		return t.Nd
	}
	t.Nd = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd{}
	return t.Nd
}

// GetArp returns the value of the Arp struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn. If the receiver or the field Arp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) GetArp() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp {
	if t != nil && t.Arp != nil {
		return t.Arp
	}
	return nil
}

// GetNd returns the value of the Nd struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn. If the receiver or the field Nd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) GetNd() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd {
	if t != nil && t.Nd != nil {
		return t.Nd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Arp.PopulateDefaults()
	t.Nd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp represents the /nokia-conf/configure/service/ies/interface/vpls/evpn/arp YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp struct {
	Advertise              map[E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise `path:"advertise" module:"nokia-conf"`
	FloodGarpAndUnknownReq *bool                                                                                                                                                `path:"flood-garp-and-unknown-req" module:"nokia-conf"`
	LearnDynamic           *bool                                                                                                                                                `path:"learn-dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) NewAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType) (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) RenameAdvertise(oldK, newK E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) GetOrCreateAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise {

	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) GetAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) DeleteAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise struct to the
// list Advertise of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) AppendAdvertise(v *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// GetFloodGarpAndUnknownReq retrieves the value of the leaf FloodGarpAndUnknownReq from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FloodGarpAndUnknownReq is set, it can
// safely use t.GetFloodGarpAndUnknownReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FloodGarpAndUnknownReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) GetFloodGarpAndUnknownReq() bool {
	if t == nil || t.FloodGarpAndUnknownReq == nil {
		return true
	}
	return *t.FloodGarpAndUnknownReq
}

// GetLearnDynamic retrieves the value of the leaf LearnDynamic from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnDynamic is set, it can
// safely use t.GetLearnDynamic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnDynamic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) GetLearnDynamic() bool {
	if t == nil || t.LearnDynamic == nil {
		return true
	}
	return *t.LearnDynamic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FloodGarpAndUnknownReq == nil {
		var v bool = true
		t.FloodGarpAndUnknownReq = &v
	}
	if t.LearnDynamic == nil {
		var v bool = true
		t.LearnDynamic = &v
	}
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise represents the /nokia-conf/configure/service/ies/interface/vpls/evpn/arp/advertise YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                       `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) GetRouteType() E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Arp_Advertise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd represents the /nokia-conf/configure/service/ies/interface/vpls/evpn/nd YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd struct {
	Advertise    map[E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise `path:"advertise" module:"nokia-conf"`
	LearnDynamic *bool                                                                                                                                              `path:"learn-dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) NewAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType) (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) RenameAdvertise(oldK, newK E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) GetOrCreateAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise {

	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) GetAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType) *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) DeleteAdvertise(RouteType E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise struct to the
// list Advertise of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) AppendAdvertise(v *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType]*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// GetLearnDynamic retrieves the value of the leaf LearnDynamic from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnDynamic is set, it can
// safely use t.GetLearnDynamic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnDynamic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) GetLearnDynamic() bool {
	if t == nil || t.LearnDynamic == nil {
		return true
	}
	return *t.LearnDynamic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnDynamic == nil {
		var v bool = true
		t.LearnDynamic = &v
	}
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise represents the /nokia-conf/configure/service/ies/interface/vpls/evpn/nd/advertise YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise struct {
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                      `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) GetRouteType() E_NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Evpn_Nd_Advertise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress represents the /nokia-conf/configure/service/ies/interface/vpls/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress struct {
	RoutedOverrideFilter *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter `path:"routed-override-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) IsYANGGoStruct() {}

// GetOrCreateRoutedOverrideFilter retrieves the value of the RoutedOverrideFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) GetOrCreateRoutedOverrideFilter() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter {
	if t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	t.RoutedOverrideFilter = &NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter{}
	return t.RoutedOverrideFilter
}

// GetRoutedOverrideFilter returns the value of the RoutedOverrideFilter struct pointer
// from NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress. If the receiver or the field RoutedOverrideFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) GetRoutedOverrideFilter() *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter {
	if t != nil && t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RoutedOverrideFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter represents the /nokia-conf/configure/service/ies/interface/vpls/ingress/routed-override-filter YANG schema element.
type NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter.
func (*NokiaConf_Configure_Service_Ies_Interface_Vpls_Ingress_RoutedOverrideFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface represents the /nokia-conf/configure/service/ies/redundant-interface YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                 `path:"description" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime            `path:"hold-time" module:"nokia-conf"`
	InterfaceName      *string                                                                 `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                                 `path:"ip-mtu" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4                `path:"ipv4" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Ies_RedundantInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Ies_RedundantInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_RedundantInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Ies_RedundantInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_RedundantInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Ies_RedundantInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4{}
	return t.Ipv4
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetHoldTime() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetIpv4() *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Ies_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.HoldTime.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_RedundantInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime represents the /nokia-conf/configure/service/ies/redundant-interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/ies/redundant-interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/ies/redundant-interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/ies/redundant-interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4 represents the /nokia-conf/configure/service/ies/redundant-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4 struct {
	Primary *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary{}
	return t.Primary
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary represents the /nokia-conf/configure/service/ies/redundant-interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
	RemoteIp           *string  `path:"remote-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetRemoteIp retrieves the value of the leaf RemoteIp from the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIp is set, it can
// safely use t.GetRemoteIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) GetRemoteIp() string {
	if t == nil || t.RemoteIp == nil {
		return ""
	}
	return *t.RemoteIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp represents the /nokia-conf/configure/service/ies/redundant-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ControlWord        *bool                                                                `path:"control-word" module:"nokia-conf"`
	Description        *string                                                              `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                              `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress represents the /nokia-conf/configure/service/ies/redundant-interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                    `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/ies/redundant-interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/ies/redundant-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                     `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/ies/redundant-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ies_RedundantInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface represents the /nokia-conf/configure/service/ies/subscriber-interface YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface struct {
	AdminState             E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                        `path:"description" module:"nokia-conf"`
	FwdService             *string                                                                        `path:"fwd-service" module:"nokia-conf"`
	FwdSubscriberInterface *string                                                                        `path:"fwd-subscriber-interface" module:"nokia-conf"`
	GroupInterface         map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface `path:"group-interface" module:"nokia-conf"`
	HoldTime               *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime                  `path:"hold-time" module:"nokia-conf"`
	InterfaceName          *string                                                                        `path:"interface-name" module:"nokia-conf"`
	IpoeLinking            *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking               `path:"ipoe-linking" module:"nokia-conf"`
	IpoeSession            *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession               `path:"ipoe-session" module:"nokia-conf"`
	Ipv4                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4                      `path:"ipv4" module:"nokia-conf"`
	Ipv6                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6                      `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LocalAddressAssignment *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment    `path:"local-address-assignment" module:"nokia-conf"`
	Pppoe                  *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe                     `path:"pppoe" module:"nokia-conf"`
	WanMode                E_NokiaConf_Configure_Service_Ies_SubscriberInterface_WanMode                  `path:"wan-mode" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw                    `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface) IsYANGGoStruct() {}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Service_Ies_SubscriberInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) AppendGroupInterface(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIpoeLinking retrieves the value of the IpoeLinking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateIpoeLinking() *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking {
	if t.IpoeLinking != nil {
		return t.IpoeLinking
	}
	t.IpoeLinking = &NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking{}
	return t.IpoeLinking
}

// GetOrCreateIpoeSession retrieves the value of the IpoeSession field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateIpoeSession() *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession {
	if t.IpoeSession != nil {
		return t.IpoeSession
	}
	t.IpoeSession = &NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession{}
	return t.IpoeSession
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLocalAddressAssignment retrieves the value of the LocalAddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateLocalAddressAssignment() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment {
	if t.LocalAddressAssignment != nil {
		return t.LocalAddressAssignment
	}
	t.LocalAddressAssignment = &NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment{}
	return t.LocalAddressAssignment
}

// GetOrCreatePppoe retrieves the value of the Pppoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreatePppoe() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe {
	if t.Pppoe != nil {
		return t.Pppoe
	}
	t.Pppoe = &NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe{}
	return t.Pppoe
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetOrCreateWlanGw() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw{}
	return t.WlanGw
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetHoldTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIpoeLinking returns the value of the IpoeLinking struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field IpoeLinking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetIpoeLinking() *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeLinking {
	if t != nil && t.IpoeLinking != nil {
		return t.IpoeLinking
	}
	return nil
}

// GetIpoeSession returns the value of the IpoeSession struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field IpoeSession is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetIpoeSession() *NokiaConf_Configure_Service_Ies_SubscriberInterface_IpoeSession {
	if t != nil && t.IpoeSession != nil {
		return t.IpoeSession
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLocalAddressAssignment returns the value of the LocalAddressAssignment struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field LocalAddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetLocalAddressAssignment() *NokiaConf_Configure_Service_Ies_SubscriberInterface_LocalAddressAssignment {
	if t != nil && t.LocalAddressAssignment != nil {
		return t.LocalAddressAssignment
	}
	return nil
}

// GetPppoe returns the value of the Pppoe struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field Pppoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetPppoe() *NokiaConf_Configure_Service_Ies_SubscriberInterface_Pppoe {
	if t != nil && t.Pppoe != nil {
		return t.Pppoe
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetWlanGw() *NokiaConf_Configure_Service_Ies_SubscriberInterface_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return ""
	}
	return *t.FwdService
}

// GetFwdSubscriberInterface retrieves the value of the leaf FwdSubscriberInterface from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdSubscriberInterface is set, it can
// safely use t.GetFwdSubscriberInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdSubscriberInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetFwdSubscriberInterface() string {
	if t == nil || t.FwdSubscriberInterface == nil {
		return ""
	}
	return *t.FwdSubscriberInterface
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetWanMode retrieves the value of the leaf WanMode from the NokiaConf_Configure_Service_Ies_SubscriberInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanMode is set, it can
// safely use t.GetWanMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) GetWanMode() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_WanMode {
	if t == nil || t.WanMode == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_WanMode_mode64
	}
	return t.WanMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.WanMode == 0 {
		t.WanMode = NokiaConf_Configure_Service_Ies_SubscriberInterface_WanMode_mode64
	}
	t.HoldTime.PopulateDefaults()
	t.IpoeLinking.PopulateDefaults()
	t.IpoeSession.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LocalAddressAssignment.PopulateDefaults()
	t.Pppoe.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	BondingParameters      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters      `path:"bonding-parameters" module:"nokia-conf"`
	Brg                    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg                    `path:"brg" module:"nokia-conf"`
	CflowdParameters       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters       `path:"cflowd-parameters" module:"nokia-conf"`
	DataTrigger            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger            `path:"data-trigger" module:"nokia-conf"`
	Description            *string                                                                                    `path:"description" module:"nokia-conf"`
	DynamicRoutesTrackSrrp *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp `path:"dynamic-routes-track-srrp" module:"nokia-conf" yangPresence:"true"`
	GroupInterfaceName     *string                                                                                    `path:"group-interface-name" module:"nokia-conf"`
	GtpParameters          *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters          `path:"gtp-parameters" module:"nokia-conf"`
	GxPolicy               *string                                                                                    `path:"gx-policy" module:"nokia-conf"`
	Ingress                *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress                `path:"ingress" module:"nokia-conf"`
	IngressStats           *bool                                                                                      `path:"ingress-stats" module:"nokia-conf"`
	IpMtu                  *uint32                                                                                    `path:"ip-mtu" module:"nokia-conf"`
	IpoeLinking            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking            `path:"ipoe-linking" module:"nokia-conf"`
	IpoeSession            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession            `path:"ipoe-session" module:"nokia-conf"`
	Ipv4                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4                   `path:"ipv4" module:"nokia-conf"`
	Ipv6                   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6                   `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LocalAddressAssignment *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment `path:"local-address-assignment" module:"nokia-conf"`
	Mac                    *string                                                                                    `path:"mac" module:"nokia-conf"`
	NasreqAuthPolicy       *string                                                                                    `path:"nasreq-auth-policy" module:"nokia-conf"`
	OperUpWhileEmpty       *bool                                                                                      `path:"oper-up-while-empty" module:"nokia-conf"`
	Pppoe                  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe                  `path:"pppoe" module:"nokia-conf"`
	RadiusAuthPolicy       *string                                                                                    `path:"radius-auth-policy" module:"nokia-conf"`
	RedundantInterface     *string                                                                                    `path:"redundant-interface" module:"nokia-conf"`
	Sap                    map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap         `path:"sap" module:"nokia-conf"`
	SapParameters          *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters          `path:"sap-parameters" module:"nokia-conf"`
	ShcvPolicy             *string                                                                                    `path:"shcv-policy" module:"nokia-conf"`
	ShcvPolicyIpv4         *string                                                                                    `path:"shcv-policy-ipv4" module:"nokia-conf"`
	ShcvPolicyIpv6         *string                                                                                    `path:"shcv-policy-ipv6" module:"nokia-conf"`
	Srrp                   map[uint32]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp        `path:"srrp" module:"nokia-conf"`
	SuppressAaSub          *bool                                                                                      `path:"suppress-aa-sub" module:"nokia-conf"`
	TosMarkingState        E_NokiaTypesRouter_TosMarkingState                                                         `path:"tos-marking-state" module:"nokia-conf"`
	Type                   E_NokiaTypesServices_GroupInterfaceType                                                    `path:"type" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw                 `path:"wlan-gw" module:"nokia-conf"`
	Wpp                    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp                    `path:"wpp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) NewSap(SapId string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetSap(SapId string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) AppendSap(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSrrp creates a new entry in the Srrp list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) NewSrrp(SrrpId uint32) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srrp == nil {
		t.Srrp = make(map[uint32]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp)
	}

	key := SrrpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srrp", key)
	}

	t.Srrp[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp{
		SrrpId: &SrrpId,
	}

	return t.Srrp[key], nil
}

// RenameSrrp renames an entry in the list Srrp within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) RenameSrrp(oldK, newK uint32) error {
	if _, ok := t.Srrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Srrp", newK)
	}

	e, ok := t.Srrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srrp", oldK)
	}
	e.SrrpId = &newK

	t.Srrp[newK] = e
	delete(t.Srrp, oldK)
	return nil
}

// GetOrCreateSrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateSrrp(SrrpId uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp {

	key := SrrpId

	if v, ok := t.Srrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrrp(SrrpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrrp got unexpected error: %v", err))
	}
	return v
}

// GetSrrp retrieves the value with the specified key from
// the Srrp map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetSrrp(SrrpId uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp {

	if t == nil {
		return nil
	}

	key := SrrpId

	if lm, ok := t.Srrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) DeleteSrrp(SrrpId uint32) {
	key := SrrpId

	delete(t.Srrp, key)
}

// AppendSrrp appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp struct to the
// list Srrp of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) AppendSrrp(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp) error {
	if v.SrrpId == nil {
		return fmt.Errorf("invalid nil key received for SrrpId")
	}

	key := *v.SrrpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srrp == nil {
		t.Srrp = make(map[uint32]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Srrp)
	}

	if _, ok := t.Srrp[key]; ok {
		return fmt.Errorf("duplicate key for list Srrp %v", key)
	}

	t.Srrp[key] = v
	return nil
}

// GetOrCreateBondingParameters retrieves the value of the BondingParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateBondingParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters {
	if t.BondingParameters != nil {
		return t.BondingParameters
	}
	t.BondingParameters = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters{}
	return t.BondingParameters
}

// GetOrCreateBrg retrieves the value of the Brg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateBrg() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg {
	if t.Brg != nil {
		return t.Brg
	}
	t.Brg = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg{}
	return t.Brg
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateDataTrigger retrieves the value of the DataTrigger field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateDataTrigger() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger {
	if t.DataTrigger != nil {
		return t.DataTrigger
	}
	t.DataTrigger = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger{}
	return t.DataTrigger
}

// GetOrCreateDynamicRoutesTrackSrrp retrieves the value of the DynamicRoutesTrackSrrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateDynamicRoutesTrackSrrp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp {
	if t.DynamicRoutesTrackSrrp != nil {
		return t.DynamicRoutesTrackSrrp
	}
	t.DynamicRoutesTrackSrrp = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp{}
	return t.DynamicRoutesTrackSrrp
}

// GetOrCreateGtpParameters retrieves the value of the GtpParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateGtpParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters {
	if t.GtpParameters != nil {
		return t.GtpParameters
	}
	t.GtpParameters = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters{}
	return t.GtpParameters
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpoeLinking retrieves the value of the IpoeLinking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateIpoeLinking() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking {
	if t.IpoeLinking != nil {
		return t.IpoeLinking
	}
	t.IpoeLinking = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking{}
	return t.IpoeLinking
}

// GetOrCreateIpoeSession retrieves the value of the IpoeSession field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateIpoeSession() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession {
	if t.IpoeSession != nil {
		return t.IpoeSession
	}
	t.IpoeSession = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession{}
	return t.IpoeSession
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLocalAddressAssignment retrieves the value of the LocalAddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateLocalAddressAssignment() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment {
	if t.LocalAddressAssignment != nil {
		return t.LocalAddressAssignment
	}
	t.LocalAddressAssignment = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment{}
	return t.LocalAddressAssignment
}

// GetOrCreatePppoe retrieves the value of the Pppoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreatePppoe() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe {
	if t.Pppoe != nil {
		return t.Pppoe
	}
	t.Pppoe = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe{}
	return t.Pppoe
}

// GetOrCreateSapParameters retrieves the value of the SapParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateSapParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters {
	if t.SapParameters != nil {
		return t.SapParameters
	}
	t.SapParameters = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters{}
	return t.SapParameters
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateWlanGw() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw{}
	return t.WlanGw
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOrCreateWpp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp{}
	return t.Wpp
}

// GetBondingParameters returns the value of the BondingParameters struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field BondingParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetBondingParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters {
	if t != nil && t.BondingParameters != nil {
		return t.BondingParameters
	}
	return nil
}

// GetBrg returns the value of the Brg struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field Brg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetBrg() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg {
	if t != nil && t.Brg != nil {
		return t.Brg
	}
	return nil
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetCflowdParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetDataTrigger returns the value of the DataTrigger struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field DataTrigger is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetDataTrigger() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger {
	if t != nil && t.DataTrigger != nil {
		return t.DataTrigger
	}
	return nil
}

// GetDynamicRoutesTrackSrrp returns the value of the DynamicRoutesTrackSrrp struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field DynamicRoutesTrackSrrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetDynamicRoutesTrackSrrp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp {
	if t != nil && t.DynamicRoutesTrackSrrp != nil {
		return t.DynamicRoutesTrackSrrp
	}
	return nil
}

// GetGtpParameters returns the value of the GtpParameters struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field GtpParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetGtpParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters {
	if t != nil && t.GtpParameters != nil {
		return t.GtpParameters
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpoeLinking returns the value of the IpoeLinking struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field IpoeLinking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIpoeLinking() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking {
	if t != nil && t.IpoeLinking != nil {
		return t.IpoeLinking
	}
	return nil
}

// GetIpoeSession returns the value of the IpoeSession struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field IpoeSession is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIpoeSession() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession {
	if t != nil && t.IpoeSession != nil {
		return t.IpoeSession
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLocalAddressAssignment returns the value of the LocalAddressAssignment struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field LocalAddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetLocalAddressAssignment() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment {
	if t != nil && t.LocalAddressAssignment != nil {
		return t.LocalAddressAssignment
	}
	return nil
}

// GetPppoe returns the value of the Pppoe struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field Pppoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetPppoe() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe {
	if t != nil && t.Pppoe != nil {
		return t.Pppoe
	}
	return nil
}

// GetSapParameters returns the value of the SapParameters struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field SapParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetSapParameters() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters {
	if t != nil && t.SapParameters != nil {
		return t.SapParameters
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetWlanGw() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetWpp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetGxPolicy retrieves the value of the leaf GxPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GxPolicy is set, it can
// safely use t.GetGxPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GxPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetGxPolicy() string {
	if t == nil || t.GxPolicy == nil {
		return ""
	}
	return *t.GxPolicy
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetNasreqAuthPolicy retrieves the value of the leaf NasreqAuthPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasreqAuthPolicy is set, it can
// safely use t.GetNasreqAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasreqAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetNasreqAuthPolicy() string {
	if t == nil || t.NasreqAuthPolicy == nil {
		return ""
	}
	return *t.NasreqAuthPolicy
}

// GetOperUpWhileEmpty retrieves the value of the leaf OperUpWhileEmpty from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperUpWhileEmpty is set, it can
// safely use t.GetOperUpWhileEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperUpWhileEmpty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetOperUpWhileEmpty() bool {
	if t == nil || t.OperUpWhileEmpty == nil {
		return false
	}
	return *t.OperUpWhileEmpty
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetRedundantInterface retrieves the value of the leaf RedundantInterface from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantInterface is set, it can
// safely use t.GetRedundantInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetRedundantInterface() string {
	if t == nil || t.RedundantInterface == nil {
		return ""
	}
	return *t.RedundantInterface
}

// GetShcvPolicy retrieves the value of the leaf ShcvPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicy is set, it can
// safely use t.GetShcvPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetShcvPolicy() string {
	if t == nil || t.ShcvPolicy == nil {
		return ""
	}
	return *t.ShcvPolicy
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetShcvPolicyIpv6 retrieves the value of the leaf ShcvPolicyIpv6 from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv6 is set, it can
// safely use t.GetShcvPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetShcvPolicyIpv6() string {
	if t == nil || t.ShcvPolicyIpv6 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv6
}

// GetSuppressAaSub retrieves the value of the leaf SuppressAaSub from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressAaSub is set, it can
// safely use t.GetSuppressAaSub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressAaSub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetSuppressAaSub() bool {
	if t == nil || t.SuppressAaSub == nil {
		return false
	}
	return *t.SuppressAaSub
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_untrusted
	}
	return t.TosMarkingState
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) GetType() E_NokiaTypesServices_GroupInterfaceType {
	if t == nil || t.Type == 0 {
		return NokiaTypesServices_GroupInterfaceType_plain
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.OperUpWhileEmpty == nil {
		var v bool = false
		t.OperUpWhileEmpty = &v
	}
	if t.SuppressAaSub == nil {
		var v bool = false
		t.SuppressAaSub = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_untrusted
	}
	if t.Type == 0 {
		t.Type = NokiaTypesServices_GroupInterfaceType_plain
	}
	t.BondingParameters.PopulateDefaults()
	t.Brg.PopulateDefaults()
	t.CflowdParameters.PopulateDefaults()
	t.DataTrigger.PopulateDefaults()
	t.DynamicRoutesTrackSrrp.PopulateDefaults()
	t.GtpParameters.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.IpoeLinking.PopulateDefaults()
	t.IpoeSession.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LocalAddressAssignment.PopulateDefaults()
	t.Pppoe.PopulateDefaults()
	t.SapParameters.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	t.Wpp.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.Srrp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/bonding-parameters YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Connection         map[uint32]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection `path:"connection" module:"nokia-conf"`
	Fpe                *uint32                                                                                                     `path:"fpe" module:"nokia-conf"`
	Multicast          *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast             `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) IsYANGGoStruct() {
}

// NewConnection creates a new entry in the Connection list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) NewConnection(ConnectionIndex uint32) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Connection == nil {
		t.Connection = make(map[uint32]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection)
	}

	key := ConnectionIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Connection[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Connection", key)
	}

	t.Connection[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection{
		ConnectionIndex: &ConnectionIndex,
	}

	return t.Connection[key], nil
}

// RenameConnection renames an entry in the list Connection within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) RenameConnection(oldK, newK uint32) error {
	if _, ok := t.Connection[newK]; ok {
		return fmt.Errorf("key %v already exists in Connection", newK)
	}

	e, ok := t.Connection[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Connection", oldK)
	}
	e.ConnectionIndex = &newK

	t.Connection[newK] = e
	delete(t.Connection, oldK)
	return nil
}

// GetOrCreateConnection retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetOrCreateConnection(ConnectionIndex uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection {

	key := ConnectionIndex

	if v, ok := t.Connection[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewConnection(ConnectionIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateConnection got unexpected error: %v", err))
	}
	return v
}

// GetConnection retrieves the value with the specified key from
// the Connection map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetConnection(ConnectionIndex uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection {

	if t == nil {
		return nil
	}

	key := ConnectionIndex

	if lm, ok := t.Connection[key]; ok {
		return lm
	}
	return nil
}

// DeleteConnection deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) DeleteConnection(ConnectionIndex uint32) {
	key := ConnectionIndex

	delete(t.Connection, key)
}

// AppendConnection appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection struct to the
// list Connection of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) AppendConnection(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) error {
	if v.ConnectionIndex == nil {
		return fmt.Errorf("invalid nil key received for ConnectionIndex")
	}

	key := *v.ConnectionIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Connection == nil {
		t.Connection = make(map[uint32]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection)
	}

	if _, ok := t.Connection[key]; ok {
		return fmt.Errorf("duplicate key for list Connection %v", key)
	}

	t.Connection[key] = v
	return nil
}

// GetOrCreateMulticast retrieves the value of the Multicast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetOrCreateMulticast() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast {
	if t.Multicast != nil {
		return t.Multicast
	}
	t.Multicast = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast{}
	return t.Multicast
}

// GetMulticast returns the value of the Multicast struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters. If the receiver or the field Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetMulticast() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast {
	if t != nil && t.Multicast != nil {
		return t.Multicast
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Multicast.PopulateDefaults()
	for _, e := range t.Connection {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/bonding-parameters/connection YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ConnectionIndex    *uint32  `path:"connection-index" module:"nokia-conf"`
	Service            *string  `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetConnectionIndex retrieves the value of the leaf ConnectionIndex from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionIndex is set, it can
// safely use t.GetConnectionIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) GetConnectionIndex() uint32 {
	if t == nil || t.ConnectionIndex == nil {
		return 0
	}
	return *t.ConnectionIndex
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ConnectionIndex == nil {
		return nil, fmt.Errorf("nil value for key ConnectionIndex")
	}

	return map[string]interface{}{
		"connection-index": *t.ConnectionIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Connection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/bonding-parameters/multicast YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast struct {
	Connection NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast_Connection_Union `path:"connection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) IsYANGGoStruct() {
}

// GetConnection retrieves the value of the leaf Connection from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Connection is set, it can
// safely use t.GetConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Connection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) GetConnection() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast_Connection_Union {
	if t == nil || t.Connection == nil {
		return NokiaTypesSubscriberMgmt_MulticastBondingConnection_Enum_use_incoming
	}
	return t.Connection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Connection == nil {
		t.Connection = NokiaTypesSubscriberMgmt_MulticastBondingConnection_Enum_use_incoming
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_BondingParameters_Multicast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/brg YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg struct {
	AdminState           E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticatedBrgOnly *bool                       `path:"authenticated-brg-only" module:"nokia-conf"`
	DefaultBrgProfile    *string                     `path:"default-brg-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticatedBrgOnly retrieves the value of the leaf AuthenticatedBrgOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticatedBrgOnly is set, it can
// safely use t.GetAuthenticatedBrgOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticatedBrgOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) GetAuthenticatedBrgOnly() bool {
	if t == nil || t.AuthenticatedBrgOnly == nil {
		return false
	}
	return *t.AuthenticatedBrgOnly
}

// GetDefaultBrgProfile retrieves the value of the leaf DefaultBrgProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultBrgProfile is set, it can
// safely use t.GetDefaultBrgProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultBrgProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) GetDefaultBrgProfile() string {
	if t == nil || t.DefaultBrgProfile == nil {
		return ""
	}
	return *t.DefaultBrgProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuthenticatedBrgOnly == nil {
		var v bool = false
		t.AuthenticatedBrgOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Brg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters struct {
	Sampling map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) IsYANGGoStruct() {
}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) NewSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) RenameSampling(oldK, newK E_NokiaTypesRouter_CflowdSampling) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) GetOrCreateSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) GetSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) DeleteSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile      NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType       E_NokiaTypesRouter_CflowdSampling                                                                                `path:"sampling-type" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) GetSamplingType() E_NokiaTypesRouter_CflowdSampling {
	if t == nil || t.SamplingType == 0 {
		return 0
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/data-trigger YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DataTrigger) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/dynamic-routes-track-srrp YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp struct {
	HoldTime *uint32 `path:"hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) IsYANGGoStruct() {
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_DynamicRoutesTrackSrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/gtp-parameters YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Fpe                *uint32                     `path:"fpe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_GtpParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress struct {
	PolicyAccounting *string `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) IsYANGGoStruct() {}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipoe-linking YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking struct {
	AdminState                    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                   []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude            []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	GratuitousRouterAdvertisement *bool                       `path:"gratuitous-router-advertisement" module:"nokia-conf"`
	SharedCircuitId               *bool                       `path:"shared-circuit-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGratuitousRouterAdvertisement retrieves the value of the leaf GratuitousRouterAdvertisement from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousRouterAdvertisement is set, it can
// safely use t.GetGratuitousRouterAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousRouterAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) GetGratuitousRouterAdvertisement() bool {
	if t == nil || t.GratuitousRouterAdvertisement == nil {
		return false
	}
	return *t.GratuitousRouterAdvertisement
}

// GetSharedCircuitId retrieves the value of the leaf SharedCircuitId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SharedCircuitId is set, it can
// safely use t.GetSharedCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SharedCircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) GetSharedCircuitId() bool {
	if t == nil || t.SharedCircuitId == nil {
		return false
	}
	return *t.SharedCircuitId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.GratuitousRouterAdvertisement == nil {
		var v bool = false
		t.GratuitousRouterAdvertisement = &v
	}
	if t.SharedCircuitId == nil {
		var v bool = false
		t.SharedCircuitId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeLinking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipoe-session YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                                              `path:"description" module:"nokia-conf"`
	ForceAuth            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth            `path:"force-auth" module:"nokia-conf"`
	IpoeSessionPolicy    *string                                                                                              `path:"ipoe-session-policy" module:"nokia-conf"`
	MinAuthInterval      NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_MinAuthInterval_Union `path:"min-auth-interval" module:"nokia-conf"`
	RadiusSessionTimeout E_NokiaTypesSubscriberMgmt_IpoeSessionRadiusSessionTimeout                                           `path:"radius-session-timeout" module:"nokia-conf"`
	SapSessionLimit      *uint32                                                                                              `path:"sap-session-limit" module:"nokia-conf"`
	SessionLimit         *uint32                                                                                              `path:"session-limit" module:"nokia-conf"`
	StatelessRedundancy  *bool                                                                                                `path:"stateless-redundancy" module:"nokia-conf"`
	UserDb               *string                                                                                              `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) IsYANGGoStruct() {
}

// GetOrCreateForceAuth retrieves the value of the ForceAuth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetOrCreateForceAuth() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth {
	if t.ForceAuth != nil {
		return t.ForceAuth
	}
	t.ForceAuth = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth{}
	return t.ForceAuth
}

// GetForceAuth returns the value of the ForceAuth struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession. If the receiver or the field ForceAuth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetForceAuth() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth {
	if t != nil && t.ForceAuth != nil {
		return t.ForceAuth
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpoeSessionPolicy retrieves the value of the leaf IpoeSessionPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeSessionPolicy is set, it can
// safely use t.GetIpoeSessionPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeSessionPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetIpoeSessionPolicy() string {
	if t == nil || t.IpoeSessionPolicy == nil {
		return ""
	}
	return *t.IpoeSessionPolicy
}

// GetMinAuthInterval retrieves the value of the leaf MinAuthInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAuthInterval is set, it can
// safely use t.GetMinAuthInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAuthInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetMinAuthInterval() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_MinAuthInterval_Union {
	if t == nil || t.MinAuthInterval == nil {
		return NokiaTypesSubscriberMgmt_IpoeSessionMinAuthInterval_Enum_infinite
	}
	return t.MinAuthInterval
}

// GetRadiusSessionTimeout retrieves the value of the leaf RadiusSessionTimeout from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusSessionTimeout is set, it can
// safely use t.GetRadiusSessionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusSessionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetRadiusSessionTimeout() E_NokiaTypesSubscriberMgmt_IpoeSessionRadiusSessionTimeout {
	if t == nil || t.RadiusSessionTimeout == 0 {
		return 0
	}
	return t.RadiusSessionTimeout
}

// GetSapSessionLimit retrieves the value of the leaf SapSessionLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapSessionLimit is set, it can
// safely use t.GetSapSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetSapSessionLimit() uint32 {
	if t == nil || t.SapSessionLimit == nil {
		return 0
	}
	return *t.SapSessionLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetSessionLimit() uint32 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetStatelessRedundancy retrieves the value of the leaf StatelessRedundancy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatelessRedundancy is set, it can
// safely use t.GetStatelessRedundancy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatelessRedundancy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetStatelessRedundancy() bool {
	if t == nil || t.StatelessRedundancy == nil {
		return false
	}
	return *t.StatelessRedundancy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinAuthInterval == nil {
		t.MinAuthInterval = NokiaTypesSubscriberMgmt_IpoeSessionMinAuthInterval_Enum_infinite
	}
	if t.StatelessRedundancy == nil {
		var v bool = false
		t.StatelessRedundancy = &v
	}
	t.ForceAuth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipoe-session/force-auth YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth struct {
	CidChange *bool `path:"cid-change" module:"nokia-conf"`
	RidChange *bool `path:"rid-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) IsYANGGoStruct() {
}

// GetCidChange retrieves the value of the leaf CidChange from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CidChange is set, it can
// safely use t.GetCidChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CidChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) GetCidChange() bool {
	if t == nil || t.CidChange == nil {
		return false
	}
	return *t.CidChange
}

// GetRidChange retrieves the value of the leaf RidChange from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RidChange is set, it can
// safely use t.GetRidChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RidChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) GetRidChange() bool {
	if t == nil || t.RidChange == nil {
		return false
	}
	return *t.RidChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_IpoeSession_ForceAuth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4 struct {
	ArpHost           *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost           `path:"arp-host" module:"nokia-conf"`
	Dhcp              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp              `path:"dhcp" module:"nokia-conf"`
	Icmp              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp              `path:"icmp" module:"nokia-conf"`
	IgnoreDfBit       *bool                                                                                      `path:"ignore-df-bit" module:"nokia-conf"`
	NeighborDiscovery *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery `path:"neighbor-discovery" module:"nokia-conf"`
	QosRouteLookup    E_NokiaTypesRouter_QosRouteLookupGrpIf                                                     `path:"qos-route-lookup" module:"nokia-conf"`
	UrpfCheck         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck         `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateArpHost retrieves the value of the ArpHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetOrCreateArpHost() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost {
	if t.ArpHost != nil {
		return t.ArpHost
	}
	t.ArpHost = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost{}
	return t.ArpHost
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetArpHost returns the value of the ArpHost struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4. If the receiver or the field ArpHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetArpHost() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost {
	if t != nil && t.ArpHost != nil {
		return t.ArpHost
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetDhcp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetIcmp() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetIgnoreDfBit retrieves the value of the leaf IgnoreDfBit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDfBit is set, it can
// safely use t.GetIgnoreDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetIgnoreDfBit() bool {
	if t == nil || t.IgnoreDfBit == nil {
		return false
	}
	return *t.IgnoreDfBit
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookupGrpIf {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDfBit == nil {
		var v bool = false
		t.IgnoreDfBit = &v
	}
	t.ArpHost.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/arp-host YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	HostLimit          *uint32                     `path:"host-limit" module:"nokia-conf"`
	MinAuthInterval    *uint32                     `path:"min-auth-interval" module:"nokia-conf"`
	SapHostLimit       *uint32                     `path:"sap-host-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHostLimit retrieves the value of the leaf HostLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLimit is set, it can
// safely use t.GetHostLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) GetHostLimit() uint32 {
	if t == nil || t.HostLimit == nil {
		return 0
	}
	return *t.HostLimit
}

// GetMinAuthInterval retrieves the value of the leaf MinAuthInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAuthInterval is set, it can
// safely use t.GetMinAuthInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAuthInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) GetMinAuthInterval() uint32 {
	if t == nil || t.MinAuthInterval == nil {
		return 15
	}
	return *t.MinAuthInterval
}

// GetSapHostLimit retrieves the value of the leaf SapHostLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapHostLimit is set, it can
// safely use t.GetSapHostLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapHostLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) GetSapHostLimit() uint32 {
	if t == nil || t.SapHostLimit == nil {
		return 1
	}
	return *t.SapHostLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinAuthInterval == nil {
		var v uint32 = 15
		t.MinAuthInterval = &v
	}
	if t.SapHostLimit == nil {
		var v uint32 = 1
		t.SapHostLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_ArpHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientApplications      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Description             *string                                                                                          `path:"description" module:"nokia-conf"`
	Filter                  *uint32                                                                                          `path:"filter" module:"nokia-conf"`
	GiAddress               *string                                                                                          `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate      `path:"lease-populate" module:"nokia-conf"`
	MatchCircuitId          *bool                                                                                            `path:"match-circuit-id" module:"nokia-conf"`
	OfferSelection          *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection     `path:"offer-selection" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82          `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer        `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                                                          `path:"python-policy" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy         `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                                                            `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                                                         `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_SrcIpAddr         `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                                                            `path:"trusted" module:"nokia-conf"`
	UserDb                  *string                                                                                          `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOfferSelection retrieves the value of the OfferSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOrCreateOfferSelection() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection {
	if t.OfferSelection != nil {
		return t.OfferSelection
	}
	t.OfferSelection = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection{}
	return t.OfferSelection
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOfferSelection returns the value of the OfferSelection struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp. If the receiver or the field OfferSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOfferSelection() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection {
	if t != nil && t.OfferSelection != nil {
		return t.OfferSelection
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFilter retrieves the value of the leaf Filter from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filter is set, it can
// safely use t.GetFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetFilter() uint32 {
	if t == nil || t.Filter == nil {
		return 0
	}
	return *t.Filter
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetMatchCircuitId retrieves the value of the leaf MatchCircuitId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchCircuitId is set, it can
// safely use t.GetMatchCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchCircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetMatchCircuitId() bool {
	if t == nil || t.MatchCircuitId == nil {
		return false
	}
	return *t.MatchCircuitId
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MatchCircuitId == nil {
		var v bool = false
		t.MatchCircuitId = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	t.ClientApplications.PopulateDefaults()
	t.LeasePopulate.PopulateDefaults()
	t.OfferSelection.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate struct {
	L2Header  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header `path:"l2-header" module:"nokia-conf" yangPresence:"true"`
	MaxLeases *uint32                                                                                              `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {
}

// GetOrCreateL2Header retrieves the value of the L2Header field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) GetOrCreateL2Header() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header {
	if t.L2Header != nil {
		return t.L2Header
	}
	t.L2Header = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header{}
	return t.L2Header
}

// GetL2Header returns the value of the L2Header struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate. If the receiver or the field L2Header is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) GetL2Header() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header {
	if t != nil && t.L2Header != nil {
		return t.L2Header
	}
	return nil
}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2Header.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/lease-populate/l2-header YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header struct {
	Mac *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) IsYANGGoStruct() {
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_LeasePopulate_L2Header) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/offer-selection YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection struct {
	ClientMac     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac         `path:"client-mac" module:"nokia-conf"`
	DiscoverDelay *int32                                                                                                         `path:"discover-delay" module:"nokia-conf"`
	Server        map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) NewServer(Ipv4Address string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server{
		Ipv4Address: &Ipv4Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Ipv4Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) GetOrCreateServer(Ipv4Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server {

	key := Ipv4Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) GetServer(Ipv4Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) DeleteServer(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server struct to the
// list Server of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) AppendServer(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateClientMac retrieves the value of the ClientMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) GetOrCreateClientMac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac {
	if t.ClientMac != nil {
		return t.ClientMac
	}
	t.ClientMac = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac{}
	return t.ClientMac
}

// GetClientMac returns the value of the ClientMac struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection. If the receiver or the field ClientMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) GetClientMac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac {
	if t != nil && t.ClientMac != nil {
		return t.ClientMac
	}
	return nil
}

// GetDiscoverDelay retrieves the value of the leaf DiscoverDelay from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoverDelay is set, it can
// safely use t.GetDiscoverDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoverDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) GetDiscoverDelay() int32 {
	if t == nil || t.DiscoverDelay == nil {
		return 0
	}
	return *t.DiscoverDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientMac.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/offer-selection/client-mac YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac struct {
	DiscoverDelay *int32                                                                                                             `path:"discover-delay" module:"nokia-conf"`
	MacAddress    E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac_MacAddress `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) IsYANGGoStruct() {
}

// GetDiscoverDelay retrieves the value of the leaf DiscoverDelay from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoverDelay is set, it can
// safely use t.GetDiscoverDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoverDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) GetDiscoverDelay() int32 {
	if t == nil || t.DiscoverDelay == nil {
		return 0
	}
	return *t.DiscoverDelay
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) GetMacAddress() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac_MacAddress {
	if t == nil || t.MacAddress == 0 {
		return 0
	}
	return t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_ClientMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/offer-selection/server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DiscoverDelay      *int32   `path:"discover-delay" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDiscoverDelay retrieves the value of the leaf DiscoverDelay from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscoverDelay is set, it can
// safely use t.GetDiscoverDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscoverDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) GetDiscoverDelay() int32 {
	if t == nil || t.DiscoverDelay == nil {
		return 0
	}
	return *t.DiscoverDelay
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_OfferSelection_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {
}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	SapId          YANGEmpty `path:"sap-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	PoolName         *bool   `path:"pool-name" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetPoolName() bool {
	if t == nil || t.PoolName == nil {
		return false
	}
	return *t.PoolName
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.PoolName == nil {
		var v bool = false
		t.PoolName = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                         `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                                             `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) IsYANGGoStruct() {
}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {
}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/dhcp/relay-proxy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy struct {
	ReleaseUpdateSrcIp *bool   `path:"release-update-src-ip" module:"nokia-conf"`
	SiaddrOverride     *string `path:"siaddr-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) IsYANGGoStruct() {
}

// GetReleaseUpdateSrcIp retrieves the value of the leaf ReleaseUpdateSrcIp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseUpdateSrcIp is set, it can
// safely use t.GetReleaseUpdateSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseUpdateSrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) GetReleaseUpdateSrcIp() bool {
	if t == nil || t.ReleaseUpdateSrcIp == nil {
		return false
	}
	return *t.ReleaseUpdateSrcIp
}

// GetSiaddrOverride retrieves the value of the leaf SiaddrOverride from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiaddrOverride is set, it can
// safely use t.GetSiaddrOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiaddrOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) GetSiaddrOverride() string {
	if t == nil || t.SiaddrOverride == nil {
		return ""
	}
	return *t.SiaddrOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseUpdateSrcIp == nil {
		var v bool = false
		t.ReleaseUpdateSrcIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Dhcp_RelayProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp struct {
	MaskReply    *bool                                                                                      `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) IsYANGGoStruct() {
}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery struct {
	LocalProxyArp  *bool    `path:"local-proxy-arp" module:"nokia-conf"`
	Populate       *bool    `path:"populate" module:"nokia-conf"`
	ProxyArpPolicy []string `path:"proxy-arp-policy" module:"nokia-conf"`
	RemoteProxyArp *bool    `path:"remote-proxy-arp" module:"nokia-conf"`
	Timeout        *uint32  `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {
}

// GetLocalProxyArp retrieves the value of the leaf LocalProxyArp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyArp is set, it can
// safely use t.GetLocalProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) GetLocalProxyArp() bool {
	if t == nil || t.LocalProxyArp == nil {
		return false
	}
	return *t.LocalProxyArp
}

// GetPopulate retrieves the value of the leaf Populate from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Populate is set, it can
// safely use t.GetPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Populate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) GetPopulate() bool {
	if t == nil || t.Populate == nil {
		return false
	}
	return *t.Populate
}

// GetProxyArpPolicy retrieves the value of the leaf ProxyArpPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyArpPolicy is set, it can
// safely use t.GetProxyArpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyArpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) GetProxyArpPolicy() []string {
	if t == nil || t.ProxyArpPolicy == nil {
		return nil
	}
	return t.ProxyArpPolicy
}

// GetRemoteProxyArp retrieves the value of the leaf RemoteProxyArp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteProxyArp is set, it can
// safely use t.GetRemoteProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) GetRemoteProxyArp() bool {
	if t == nil || t.RemoteProxyArp == nil {
		return false
	}
	return *t.RemoteProxyArp
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoteProxyArp == nil {
		var v bool = false
		t.RemoteProxyArp = &v
	}
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck struct {
	Mode E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6 struct {
	AllowMultipleWanAddresses *bool                                                                                         `path:"allow-multiple-wan-addresses" module:"nokia-conf"`
	AutoReply                 *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply            `path:"auto-reply" module:"nokia-conf"`
	Dhcp6                     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6                `path:"dhcp6" module:"nokia-conf"`
	IpoeBridgedMode           *bool                                                                                         `path:"ipoe-bridged-mode" module:"nokia-conf"`
	NeighborDiscovery         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery    `path:"neighbor-discovery" module:"nokia-conf"`
	QosRouteLookup            E_NokiaTypesRouter_QosRouteLookupGrpIf                                                        `path:"qos-route-lookup" module:"nokia-conf"`
	RouterAdvertisements      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements `path:"router-advertisements" module:"nokia-conf"`
	RouterSolicit             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit        `path:"router-solicit" module:"nokia-conf"`
	UrpfCheck                 *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck            `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) IsYANGGoStruct() {}

// GetOrCreateAutoReply retrieves the value of the AutoReply field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetOrCreateAutoReply() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply {
	if t.AutoReply != nil {
		return t.AutoReply
	}
	t.AutoReply = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply{}
	return t.AutoReply
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetOrCreateDhcp6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateRouterAdvertisements retrieves the value of the RouterAdvertisements field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetOrCreateRouterAdvertisements() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements {
	if t.RouterAdvertisements != nil {
		return t.RouterAdvertisements
	}
	t.RouterAdvertisements = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements{}
	return t.RouterAdvertisements
}

// GetOrCreateRouterSolicit retrieves the value of the RouterSolicit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetOrCreateRouterSolicit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit {
	if t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	t.RouterSolicit = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit{}
	return t.RouterSolicit
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck{}
	return t.UrpfCheck
}

// GetAutoReply returns the value of the AutoReply struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6. If the receiver or the field AutoReply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetAutoReply() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply {
	if t != nil && t.AutoReply != nil {
		return t.AutoReply
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetDhcp6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetRouterAdvertisements returns the value of the RouterAdvertisements struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6. If the receiver or the field RouterAdvertisements is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetRouterAdvertisements() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements {
	if t != nil && t.RouterAdvertisements != nil {
		return t.RouterAdvertisements
	}
	return nil
}

// GetRouterSolicit returns the value of the RouterSolicit struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6. If the receiver or the field RouterSolicit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetRouterSolicit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit {
	if t != nil && t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetUrpfCheck() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowMultipleWanAddresses retrieves the value of the leaf AllowMultipleWanAddresses from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleWanAddresses is set, it can
// safely use t.GetAllowMultipleWanAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleWanAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetAllowMultipleWanAddresses() bool {
	if t == nil || t.AllowMultipleWanAddresses == nil {
		return false
	}
	return *t.AllowMultipleWanAddresses
}

// GetIpoeBridgedMode retrieves the value of the leaf IpoeBridgedMode from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeBridgedMode is set, it can
// safely use t.GetIpoeBridgedMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeBridgedMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetIpoeBridgedMode() bool {
	if t == nil || t.IpoeBridgedMode == nil {
		return false
	}
	return *t.IpoeBridgedMode
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookupGrpIf {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowMultipleWanAddresses == nil {
		var v bool = false
		t.AllowMultipleWanAddresses = &v
	}
	if t.IpoeBridgedMode == nil {
		var v bool = false
		t.IpoeBridgedMode = &v
	}
	t.AutoReply.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.RouterAdvertisements.PopulateDefaults()
	t.RouterSolicit.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/auto-reply YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply struct {
	NeighborSolicitation *bool `path:"neighbor-solicitation" module:"nokia-conf"`
	RouterSolicitation   *bool `path:"router-solicitation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) IsYANGGoStruct() {
}

// GetNeighborSolicitation retrieves the value of the leaf NeighborSolicitation from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborSolicitation is set, it can
// safely use t.GetNeighborSolicitation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborSolicitation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) GetNeighborSolicitation() bool {
	if t == nil || t.NeighborSolicitation == nil {
		return false
	}
	return *t.NeighborSolicitation
}

// GetRouterSolicitation retrieves the value of the leaf RouterSolicitation from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterSolicitation is set, it can
// safely use t.GetRouterSolicitation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterSolicitation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) GetRouterSolicitation() bool {
	if t == nil || t.RouterSolicitation == nil {
		return false
	}
	return *t.RouterSolicitation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NeighborSolicitation == nil {
		var v bool = false
		t.NeighborSolicitation = &v
	}
	if t.RouterSolicitation == nil {
		var v bool = false
		t.RouterSolicitation = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_AutoReply) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6 struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Filter             *uint32                                                                                       `path:"filter" module:"nokia-conf"`
	Option             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option         `path:"option" module:"nokia-conf"`
	OverrideSlaac      *bool                                                                                         `path:"override-slaac" module:"nokia-conf"`
	PdManagedRoute     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute `path:"pd-managed-route" module:"nokia-conf" yangPresence:"true"`
	ProxyServer        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer    `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy       *string                                                                                       `path:"python-policy" module:"nokia-conf"`
	Relay              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay          `path:"relay" module:"nokia-conf"`
	Snooping           *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping       `path:"snooping" module:"nokia-conf"`
	UserDb             *string                                                                                       `path:"user-db" module:"nokia-conf"`
	UserIdent          E_NokiaTypesServices_Dhcp6UserIdent                                                           `path:"user-ident" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) IsYANGGoStruct() {
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOrCreateOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option{}
	return t.Option
}

// GetOrCreatePdManagedRoute retrieves the value of the PdManagedRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOrCreatePdManagedRoute() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute {
	if t.PdManagedRoute != nil {
		return t.PdManagedRoute
	}
	t.PdManagedRoute = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute{}
	return t.PdManagedRoute
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelay retrieves the value of the Relay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOrCreateRelay() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay {
	if t.Relay != nil {
		return t.Relay
	}
	t.Relay = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay{}
	return t.Relay
}

// GetOrCreateSnooping retrieves the value of the Snooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOrCreateSnooping() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping {
	if t.Snooping != nil {
		return t.Snooping
	}
	t.Snooping = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping{}
	return t.Snooping
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetPdManagedRoute returns the value of the PdManagedRoute struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6. If the receiver or the field PdManagedRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetPdManagedRoute() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute {
	if t != nil && t.PdManagedRoute != nil {
		return t.PdManagedRoute
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetProxyServer() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelay returns the value of the Relay struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6. If the receiver or the field Relay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetRelay() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay {
	if t != nil && t.Relay != nil {
		return t.Relay
	}
	return nil
}

// GetSnooping returns the value of the Snooping struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6. If the receiver or the field Snooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetSnooping() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping {
	if t != nil && t.Snooping != nil {
		return t.Snooping
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFilter retrieves the value of the leaf Filter from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filter is set, it can
// safely use t.GetFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetFilter() uint32 {
	if t == nil || t.Filter == nil {
		return 0
	}
	return *t.Filter
}

// GetOverrideSlaac retrieves the value of the leaf OverrideSlaac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideSlaac is set, it can
// safely use t.GetOverrideSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetOverrideSlaac() bool {
	if t == nil || t.OverrideSlaac == nil {
		return false
	}
	return *t.OverrideSlaac
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// GetUserIdent retrieves the value of the leaf UserIdent from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdent is set, it can
// safely use t.GetUserIdent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) GetUserIdent() E_NokiaTypesServices_Dhcp6UserIdent {
	if t == nil || t.UserIdent == 0 {
		return NokiaTypesServices_Dhcp6UserIdent_mac
	}
	return t.UserIdent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverrideSlaac == nil {
		var v bool = false
		t.OverrideSlaac = &v
	}
	if t.UserIdent == 0 {
		t.UserIdent = NokiaTypesServices_Dhcp6UserIdent_mac
	}
	t.Option.PopulateDefaults()
	t.PdManagedRoute.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.Relay.PopulateDefaults()
	t.Snooping.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/option YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option struct {
	ApplyGroups        []string                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceId        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId `path:"interface-id" module:"nokia-conf"`
	RemoteId           *bool                                                                                             `path:"remote-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) IsYANGGoStruct() {
}

// GetOrCreateInterfaceId retrieves the value of the InterfaceId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) GetOrCreateInterfaceId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId {
	if t.InterfaceId != nil {
		return t.InterfaceId
	}
	t.InterfaceId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId{}
	return t.InterfaceId
}

// GetInterfaceId returns the value of the InterfaceId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option. If the receiver or the field InterfaceId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) GetInterfaceId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId {
	if t != nil && t.InterfaceId != nil {
		return t.InterfaceId
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	t.InterfaceId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/option/interface-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId struct {
	AsciiTuple YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	IfIndex    YANGEmpty `path:"if-index" module:"nokia-conf"`
	SapId      YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String     *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfIndex retrieves the value of the leaf IfIndex from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IfIndex is set, it can
// safely use t.GetIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) GetIfIndex() YANGEmpty {
	if t == nil || t.IfIndex == false {
		return false
	}
	return t.IfIndex
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Option_InterfaceId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/pd-managed-route YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute struct {
	NextHop E_NokiaTypesServices_Dhcp6PdManagedRouteNh `path:"next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) IsYANGGoStruct() {
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) GetNextHop() E_NokiaTypesServices_Dhcp6PdManagedRouteNh {
	if t == nil || t.NextHop == 0 {
		return NokiaTypesServices_Dhcp6PdManagedRouteNh_ipv6
	}
	return t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NextHop == 0 {
		t.NextHop = NokiaTypesServices_Dhcp6PdManagedRouteNh_ipv6
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_PdManagedRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                       `path:"admin-state" module:"nokia-conf"`
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications     `path:"client-applications" module:"nokia-conf"`
	PreferredLifetime  NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTimer        *uint32                                                                                                           `path:"rebind-timer" module:"nokia-conf"`
	RenewTimer         *uint32                                                                                                           `path:"renew-timer" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId               `path:"server-id" module:"nokia-conf"`
	ValidLifetime      NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetOrCreateServerId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId{}
	return t.ServerId
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetServerId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetPreferredLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetRebindTimer retrieves the value of the leaf RebindTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTimer is set, it can
// safely use t.GetRebindTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetRebindTimer() uint32 {
	if t == nil || t.RebindTimer == nil {
		return 2880
	}
	return *t.RebindTimer
}

// GetRenewTimer retrieves the value of the leaf RenewTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTimer is set, it can
// safely use t.GetRenewTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetRenewTimer() uint32 {
	if t == nil || t.RenewTimer == nil {
		return 1800
	}
	return *t.RenewTimer
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) GetValidLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.RebindTimer == nil {
		var v uint32 = 2880
		t.RebindTimer = &v
	}
	if t.RenewTimer == nil {
		var v uint32 = 1800
		t.RenewTimer = &v
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
	t.ClientApplications.PopulateDefaults()
	t.ServerId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/proxy-server/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/proxy-server/server-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId struct {
	ApplyGroups        []string  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string  `path:"apply-groups-exclude" module:"nokia-conf"`
	DuidEnAscii        *string   `path:"duid-en-ascii" module:"nokia-conf"`
	DuidEnHex          *string   `path:"duid-en-hex" module:"nokia-conf"`
	DuidLl             YANGEmpty `path:"duid-ll" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDuidEnAscii retrieves the value of the leaf DuidEnAscii from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidEnAscii is set, it can
// safely use t.GetDuidEnAscii() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidEnAscii == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidEnAscii() string {
	if t == nil || t.DuidEnAscii == nil {
		return ""
	}
	return *t.DuidEnAscii
}

// GetDuidEnHex retrieves the value of the leaf DuidEnHex from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidEnHex is set, it can
// safely use t.GetDuidEnHex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidEnHex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidEnHex() string {
	if t == nil || t.DuidEnHex == nil {
		return ""
	}
	return *t.DuidEnHex
}

// GetDuidLl retrieves the value of the leaf DuidLl from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLl is set, it can
// safely use t.GetDuidLl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) GetDuidLl() YANGEmpty {
	if t == nil || t.DuidLl == false {
		return false
	}
	return t.DuidLl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_ProxyServer_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                             `path:"admin-state" module:"nokia-conf"`
	AdvertiseSelection *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection `path:"advertise-selection" module:"nokia-conf"`
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Description        *string                                                                                                 `path:"description" module:"nokia-conf"`
	LeaseSplit         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit         `path:"lease-split" module:"nokia-conf"`
	LinkAddress        *string                                                                                                 `path:"link-address" module:"nokia-conf"`
	Server             []string                                                                                                `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                                                 `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) IsYANGGoStruct() {
}

// GetOrCreateAdvertiseSelection retrieves the value of the AdvertiseSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetOrCreateAdvertiseSelection() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection {
	if t.AdvertiseSelection != nil {
		return t.AdvertiseSelection
	}
	t.AdvertiseSelection = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection{}
	return t.AdvertiseSelection
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications{}
	return t.ClientApplications
}

// GetOrCreateLeaseSplit retrieves the value of the LeaseSplit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetOrCreateLeaseSplit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit {
	if t.LeaseSplit != nil {
		return t.LeaseSplit
	}
	t.LeaseSplit = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit{}
	return t.LeaseSplit
}

// GetAdvertiseSelection returns the value of the AdvertiseSelection struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay. If the receiver or the field AdvertiseSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetAdvertiseSelection() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection {
	if t != nil && t.AdvertiseSelection != nil {
		return t.AdvertiseSelection
	}
	return nil
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetLeaseSplit returns the value of the LeaseSplit struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay. If the receiver or the field LeaseSplit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetLeaseSplit() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit {
	if t != nil && t.LeaseSplit != nil {
		return t.LeaseSplit
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AdvertiseSelection.PopulateDefaults()
	t.ClientApplications.PopulateDefaults()
	t.LeaseSplit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/advertise-selection YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection struct {
	ClientMac        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac         `path:"client-mac" module:"nokia-conf"`
	PreferenceOption *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption  `path:"preference-option" module:"nokia-conf"`
	Server           map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server `path:"server" module:"nokia-conf"`
	SolicitDelay     *int32                                                                                                                    `path:"solicit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) IsYANGGoStruct() {
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) NewServer(Ipv6Address string) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server{
		Ipv6Address: &Ipv6Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Ipv6Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetOrCreateServer(Ipv6Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server {

	key := Ipv6Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetServer(Ipv6Address string) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) DeleteServer(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server struct to the
// list Server of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) AppendServer(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateClientMac retrieves the value of the ClientMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetOrCreateClientMac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac {
	if t.ClientMac != nil {
		return t.ClientMac
	}
	t.ClientMac = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac{}
	return t.ClientMac
}

// GetOrCreatePreferenceOption retrieves the value of the PreferenceOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetOrCreatePreferenceOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption {
	if t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	t.PreferenceOption = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption{}
	return t.PreferenceOption
}

// GetClientMac returns the value of the ClientMac struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the receiver or the field ClientMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetClientMac() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac {
	if t != nil && t.ClientMac != nil {
		return t.ClientMac
	}
	return nil
}

// GetPreferenceOption returns the value of the PreferenceOption struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection. If the receiver or the field PreferenceOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetPreferenceOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption {
	if t != nil && t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	return nil
}

// GetSolicitDelay retrieves the value of the leaf SolicitDelay from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitDelay is set, it can
// safely use t.GetSolicitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) GetSolicitDelay() int32 {
	if t == nil || t.SolicitDelay == nil {
		return 0
	}
	return *t.SolicitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientMac.PopulateDefaults()
	t.PreferenceOption.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/advertise-selection/client-mac YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac struct {
	MacAddress       E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_MacAddress      `path:"mac-address" module:"nokia-conf"`
	PreferenceOption *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption `path:"preference-option" module:"nokia-conf"`
	SolicitDelay     *int32                                                                                                                             `path:"solicit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) IsYANGGoStruct() {
}

// GetOrCreatePreferenceOption retrieves the value of the PreferenceOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetOrCreatePreferenceOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption {
	if t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	t.PreferenceOption = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption{}
	return t.PreferenceOption
}

// GetPreferenceOption returns the value of the PreferenceOption struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac. If the receiver or the field PreferenceOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetPreferenceOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption {
	if t != nil && t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	return nil
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetMacAddress() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_MacAddress {
	if t == nil || t.MacAddress == 0 {
		return 0
	}
	return t.MacAddress
}

// GetSolicitDelay retrieves the value of the leaf SolicitDelay from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitDelay is set, it can
// safely use t.GetSolicitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) GetSolicitDelay() int32 {
	if t == nil || t.SolicitDelay == nil {
		return 0
	}
	return *t.SolicitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PreferenceOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/advertise-selection/client-mac/preference-option YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_ClientMac_PreferenceOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/advertise-selection/preference-option YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_PreferenceOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/advertise-selection/server YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server struct {
	ApplyGroups        []string                                                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string                                                                                                                         `path:"ipv6-address" module:"nokia-conf"`
	PreferenceOption   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption `path:"preference-option" module:"nokia-conf"`
	SolicitDelay       *int32                                                                                                                          `path:"solicit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) IsYANGGoStruct() {
}

// GetOrCreatePreferenceOption retrieves the value of the PreferenceOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetOrCreatePreferenceOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption {
	if t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	t.PreferenceOption = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption{}
	return t.PreferenceOption
}

// GetPreferenceOption returns the value of the PreferenceOption struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server. If the receiver or the field PreferenceOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetPreferenceOption() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption {
	if t != nil && t.PreferenceOption != nil {
		return t.PreferenceOption
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetSolicitDelay retrieves the value of the leaf SolicitDelay from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitDelay is set, it can
// safely use t.GetSolicitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) GetSolicitDelay() int32 {
	if t == nil || t.SolicitDelay == nil {
		return 0
	}
	return *t.SolicitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PreferenceOption.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/advertise-selection/server/preference-option YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption struct {
	Value *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_AdvertiseSelection_Server_PreferenceOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/relay/lease-split YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ValidLifetime *uint32                     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 3600
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ValidLifetime == nil {
		var v uint32 = 3600
		t.ValidLifetime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Relay_LeaseSplit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/dhcp6/snooping YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_Dhcp6_Snooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DadSnooping        *bool    `path:"dad-snooping" module:"nokia-conf"`
	NeighborLimit      *int32   `path:"neighbor-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDadSnooping retrieves the value of the leaf DadSnooping from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DadSnooping is set, it can
// safely use t.GetDadSnooping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DadSnooping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) GetDadSnooping() bool {
	if t == nil || t.DadSnooping == nil {
		return false
	}
	return *t.DadSnooping
}

// GetNeighborLimit retrieves the value of the leaf NeighborLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborLimit is set, it can
// safely use t.GetNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) GetNeighborLimit() int32 {
	if t == nil || t.NeighborLimit == nil {
		return 1
	}
	return *t.NeighborLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DadSnooping == nil {
		var v bool = false
		t.DadSnooping = &v
	}
	if t.NeighborLimit == nil {
		var v int32 = 1
		t.NeighborLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/router-advertisements YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements struct {
	AdminState               E_NokiaTypesSros_AdminState                                                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups              []string                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ForceMcast               E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_ForceMcast   `path:"force-mcast" module:"nokia-conf"`
	MaxAdvertisementInterval *uint32                                                                                                     `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval *uint32                                                                                                     `path:"min-advertisement-interval" module:"nokia-conf"`
	Options                  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options       `path:"options" module:"nokia-conf"`
	PrefixOptions            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions `path:"prefix-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) IsYANGGoStruct() {
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetOrCreateOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options{}
	return t.Options
}

// GetOrCreatePrefixOptions retrieves the value of the PrefixOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetOrCreatePrefixOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions {
	if t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	t.PrefixOptions = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions{}
	return t.PrefixOptions
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixOptions returns the value of the PrefixOptions struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements. If the receiver or the field PrefixOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetPrefixOptions() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions {
	if t != nil && t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetForceMcast retrieves the value of the leaf ForceMcast from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceMcast is set, it can
// safely use t.GetForceMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetForceMcast() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_ForceMcast {
	if t == nil || t.ForceMcast == 0 {
		return 0
	}
	return t.ForceMcast
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 1800
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 900
	}
	return *t.MinAdvertisementInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 1800
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 900
		t.MinAdvertisementInterval = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/router-advertisements/options YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options struct {
	CurrentHopLimit            *uint32                                                                                                                   `path:"current-hop-limit" module:"nokia-conf"`
	Dns                        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns                 `path:"dns" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                                                     `path:"managed-configuration" module:"nokia-conf"`
	Mtu                        NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Mtu_Union            `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                                                     `path:"other-stateful-configuration" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                                                   `path:"reachable-time" module:"nokia-conf"`
	RetransmitTimer            *uint32                                                                                                                   `path:"retransmit-timer" module:"nokia-conf"`
	RouterLifetime             NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_RouterLifetime_Union `path:"router-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) IsYANGGoStruct() {
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetOrCreateDns() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns{}
	return t.Dns
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetDns() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetCurrentHopLimit() uint32 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetMtu() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Mtu_Union {
	if t == nil || t.Mtu == nil {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Mtu_Enum_not_included
	}
	return t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTimer retrieves the value of the leaf RetransmitTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTimer is set, it can
// safely use t.GetRetransmitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetRetransmitTimer() uint32 {
	if t == nil || t.RetransmitTimer == nil {
		return 0
	}
	return *t.RetransmitTimer
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) GetRouterLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_RouterLifetime_Union {
	if t == nil || t.RouterLifetime == nil {
		return UnionUint32(4500)
	}
	return t.RouterLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CurrentHopLimit == nil {
		var v uint32 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.Mtu == nil {
		t.Mtu = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Mtu_Enum_not_included
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTimer == nil {
		var v uint32 = 0
		t.RetransmitTimer = &v
	}
	if t.RouterLifetime == nil {
		t.RouterLifetime = UnionUint32(4500)
	}
	t.Dns.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/router-advertisements/options/dns YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns struct {
	IncludeRdnss  *bool                                                                                                                        `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) IsYANGGoStruct() {
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return false
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) GetRdnssLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return UnionUint32(3600)
	}
	return t.RdnssLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = false
		t.IncludeRdnss = &v
	}
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = UnionUint32(3600)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_Options_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/router-advertisements/prefix-options YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions struct {
	Autonomous        *bool                                                                                                                              `path:"autonomous" module:"nokia-conf"`
	OnLink            *bool                                                                                                                              `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) IsYANGGoStruct() {
}

// GetAutonomous retrieves the value of the leaf Autonomous from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonomous is set, it can
// safely use t.GetAutonomous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonomous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetAutonomous() bool {
	if t == nil || t.Autonomous == nil {
		return false
	}
	return *t.Autonomous
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetPreferredLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) GetValidLifetime() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Autonomous == nil {
		var v bool = false
		t.Autonomous = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterAdvertisements_PrefixOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/router-solicit YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	InactivityTimer    NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit_InactivityTimer_Union `path:"inactivity-timer" module:"nokia-conf"`
	MinAuthInterval    *uint32                                                                                                     `path:"min-auth-interval" module:"nokia-conf"`
	UserDb             *string                                                                                                     `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInactivityTimer retrieves the value of the leaf InactivityTimer from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimer is set, it can
// safely use t.GetInactivityTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) GetInactivityTimer() NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit_InactivityTimer_Union {
	if t == nil || t.InactivityTimer == nil {
		return UnionUint32(300)
	}
	return t.InactivityTimer
}

// GetMinAuthInterval retrieves the value of the leaf MinAuthInterval from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAuthInterval is set, it can
// safely use t.GetMinAuthInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAuthInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) GetMinAuthInterval() uint32 {
	if t == nil || t.MinAuthInterval == nil {
		return 300
	}
	return *t.MinAuthInterval
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.InactivityTimer == nil {
		t.InactivityTimer = UnionUint32(300)
	}
	if t.MinAuthInterval == nil {
		var v uint32 = 300
		t.MinAuthInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_RouterSolicit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/ipv6/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck struct {
	Mode E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Ipv6_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/local-address-assignment YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetOrCreateIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetOrCreateIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetIpv4() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetIpv6() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/local-address-assignment/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4 struct {
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications `path:"client-applications" module:"nokia-conf"`
	DefaultPool        []string                                                                                                           `path:"default-pool" module:"nokia-conf"`
	Server             *string                                                                                                            `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications{}
	return t.ClientApplications
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetDefaultPool retrieves the value of the leaf DefaultPool from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPool is set, it can
// safely use t.GetDefaultPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) GetDefaultPool() []string {
	if t == nil || t.DefaultPool == nil {
		return nil
	}
	return t.DefaultPool
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientApplications.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/local-address-assignment/ipv4/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications struct {
	Ipoe *bool `path:"ipoe" module:"nokia-conf"`
	Ppp  *bool `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) IsYANGGoStruct() {
}

// GetIpoe retrieves the value of the leaf Ipoe from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipoe is set, it can
// safely use t.GetIpoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) GetIpoe() bool {
	if t == nil || t.Ipoe == nil {
		return false
	}
	return *t.Ipoe
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) GetPpp() bool {
	if t == nil || t.Ppp == nil {
		return false
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipoe == nil {
		var v bool = false
		t.Ipoe = &v
	}
	if t.Ppp == nil {
		var v bool = false
		t.Ppp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv4_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/local-address-assignment/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6 struct {
	ClientApplications *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications `path:"client-applications" module:"nokia-conf"`
	Server             *string                                                                                                            `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateClientApplications retrieves the value of the ClientApplications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) GetOrCreateClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications {
	if t.ClientApplications != nil {
		return t.ClientApplications
	}
	t.ClientApplications = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications{}
	return t.ClientApplications
}

// GetClientApplications returns the value of the ClientApplications struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6. If the receiver or the field ClientApplications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) GetClientApplications() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications {
	if t != nil && t.ClientApplications != nil {
		return t.ClientApplications
	}
	return nil
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClientApplications.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/local-address-assignment/ipv6/client-applications YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications struct {
	IpoeSlaac *bool `path:"ipoe-slaac" module:"nokia-conf"`
	IpoeWan   *bool `path:"ipoe-wan" module:"nokia-conf"`
	PppSlaac  *bool `path:"ppp-slaac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) IsYANGGoStruct() {
}

// GetIpoeSlaac retrieves the value of the leaf IpoeSlaac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeSlaac is set, it can
// safely use t.GetIpoeSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetIpoeSlaac() bool {
	if t == nil || t.IpoeSlaac == nil {
		return false
	}
	return *t.IpoeSlaac
}

// GetIpoeWan retrieves the value of the leaf IpoeWan from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeWan is set, it can
// safely use t.GetIpoeWan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeWan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetIpoeWan() bool {
	if t == nil || t.IpoeWan == nil {
		return false
	}
	return *t.IpoeWan
}

// GetPppSlaac retrieves the value of the leaf PppSlaac from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppSlaac is set, it can
// safely use t.GetPppSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) GetPppSlaac() bool {
	if t == nil || t.PppSlaac == nil {
		return false
	}
	return *t.PppSlaac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpoeSlaac == nil {
		var v bool = false
		t.IpoeSlaac = &v
	}
	if t.IpoeWan == nil {
		var v bool = false
		t.IpoeWan = &v
	}
	if t.PppSlaac == nil {
		var v bool = false
		t.PppSlaac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_LocalAddressAssignment_Ipv6_ClientApplications) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/pppoe YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe struct {
	AdminState         E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	AntiSpoof          E_NokiaTypesSubscriberMgmt_PppoeAntiSpoof                                            `path:"anti-spoof" module:"nokia-conf"`
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                              `path:"description" module:"nokia-conf"`
	DhcpClient         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient `path:"dhcp-client" module:"nokia-conf"`
	Policy             *string                                                                              `path:"policy" module:"nokia-conf"`
	PythonPolicy       *string                                                                              `path:"python-policy" module:"nokia-conf"`
	SapSessionLimit    *uint32                                                                              `path:"sap-session-limit" module:"nokia-conf"`
	SessionLimit       *uint32                                                                              `path:"session-limit" module:"nokia-conf"`
	UserDb             *string                                                                              `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) IsYANGGoStruct() {}

// GetOrCreateDhcpClient retrieves the value of the DhcpClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetOrCreateDhcpClient() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient {
	if t.DhcpClient != nil {
		return t.DhcpClient
	}
	t.DhcpClient = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient{}
	return t.DhcpClient
}

// GetDhcpClient returns the value of the DhcpClient struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe. If the receiver or the field DhcpClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetDhcpClient() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient {
	if t != nil && t.DhcpClient != nil {
		return t.DhcpClient
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetAntiSpoof() E_NokiaTypesSubscriberMgmt_PppoeAntiSpoof {
	if t == nil || t.AntiSpoof == 0 {
		return NokiaTypesSubscriberMgmt_PppoeAntiSpoof_mac_sid
	}
	return t.AntiSpoof
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSapSessionLimit retrieves the value of the leaf SapSessionLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapSessionLimit is set, it can
// safely use t.GetSapSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetSapSessionLimit() uint32 {
	if t == nil || t.SapSessionLimit == nil {
		return 1
	}
	return *t.SapSessionLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetSessionLimit() uint32 {
	if t == nil || t.SessionLimit == nil {
		return 1
	}
	return *t.SessionLimit
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AntiSpoof == 0 {
		t.AntiSpoof = NokiaTypesSubscriberMgmt_PppoeAntiSpoof_mac_sid
	}
	if t.SapSessionLimit == nil {
		var v uint32 = 1
		t.SapSessionLimit = &v
	}
	if t.SessionLimit == nil {
		var v uint32 = 1
		t.SessionLimit = &v
	}
	t.DhcpClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/pppoe/dhcp-client YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient struct {
	ClientId E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient_ClientId `path:"client-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) IsYANGGoStruct() {
}

// GetClientId retrieves the value of the leaf ClientId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientId is set, it can
// safely use t.GetClientId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) GetClientId() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient_ClientId {
	if t == nil || t.ClientId == 0 {
		return 0
	}
	return t.ClientId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Pppoe_DhcpClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap struct {
	AccountingPolicy   *uint32                                                                                  `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	AntiSpoof          E_NokiaTypesServices_AntiSpoofOptionIp                                                   `path:"anti-spoof" module:"nokia-conf"`
	AppProfile         *string                                                                                  `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CallingStationId   *string                                                                                  `path:"calling-station-id" module:"nokia-conf"`
	CollectStats       *bool                                                                                    `path:"collect-stats" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection    `path:"cpu-protection" module:"nokia-conf"`
	DefaultHost        *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost      `path:"default-host" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                                                                  `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress           `path:"egress" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm           `path:"eth-cfm" module:"nokia-conf"`
	FwdWholesale       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale     `path:"fwd-wholesale" module:"nokia-conf"`
	HostAdminState     E_NokiaTypesSros_AdminState                                                              `path:"host-admin-state" module:"nokia-conf"`
	HostLockoutPolicy  *string                                                                                  `path:"host-lockout-policy" module:"nokia-conf"`
	IgmpHostTracking   *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking `path:"igmp-host-tracking" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress          `path:"ingress" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag              `path:"lag" module:"nokia-conf"`
	MonitorOperGroup   *string                                                                                  `path:"monitor-oper-group" module:"nokia-conf"`
	MultiServiceSite   *string                                                                                  `path:"multi-service-site" module:"nokia-conf"`
	OperGroup          *string                                                                                  `path:"oper-group" module:"nokia-conf"`
	SapId              *string                                                                                  `path:"sap-id" module:"nokia-conf"`
	StaticHost         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost       `path:"static-host" module:"nokia-conf"`
	SubSlaMgmt         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt       `path:"sub-sla-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDefaultHost retrieves the value of the DefaultHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateDefaultHost() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost {
	if t.DefaultHost != nil {
		return t.DefaultHost
	}
	t.DefaultHost = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost{}
	return t.DefaultHost
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag{}
	return t.Lag
}

// GetOrCreateStaticHost retrieves the value of the StaticHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateStaticHost() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost {
	if t.StaticHost != nil {
		return t.StaticHost
	}
	t.StaticHost = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost{}
	return t.StaticHost
}

// GetOrCreateSubSlaMgmt retrieves the value of the SubSlaMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOrCreateSubSlaMgmt() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt {
	if t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	t.SubSlaMgmt = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt{}
	return t.SubSlaMgmt
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetCpuProtection() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDefaultHost returns the value of the DefaultHost struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field DefaultHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetDefaultHost() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost {
	if t != nil && t.DefaultHost != nil {
		return t.DefaultHost
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetEgress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetEthCfm() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetFwdWholesale() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetIgmpHostTracking() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetLag() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetStaticHost returns the value of the StaticHost struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field StaticHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetStaticHost() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_StaticHost {
	if t != nil && t.StaticHost != nil {
		return t.StaticHost
	}
	return nil
}

// GetSubSlaMgmt returns the value of the SubSlaMgmt struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap. If the receiver or the field SubSlaMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetSubSlaMgmt() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_SubSlaMgmt {
	if t != nil && t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetAntiSpoof() E_NokiaTypesServices_AntiSpoofOptionIp {
	if t == nil || t.AntiSpoof == 0 {
		return 0
	}
	return t.AntiSpoof
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetCallingStationId() string {
	if t == nil || t.CallingStationId == nil {
		return ""
	}
	return *t.CallingStationId
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHostAdminState retrieves the value of the leaf HostAdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostAdminState is set, it can
// safely use t.GetHostAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetHostAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.HostAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.HostAdminState
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HostAdminState == 0 {
		t.HostAdminState = NokiaTypesSros_AdminState_enable
	}
	t.CpuProtection.PopulateDefaults()
	t.DefaultHost.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.StaticHost.PopulateDefaults()
	t.SubSlaMgmt.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap-parameters YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters struct {
	AntiSpoof          E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_AntiSpoof `path:"anti-spoof" module:"nokia-conf"`
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                      `path:"description" module:"nokia-conf"`
	SubSlaMgmt         *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt `path:"sub-sla-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) IsYANGGoStruct() {
}

// GetOrCreateSubSlaMgmt retrieves the value of the SubSlaMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) GetOrCreateSubSlaMgmt() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt {
	if t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	t.SubSlaMgmt = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt{}
	return t.SubSlaMgmt
}

// GetSubSlaMgmt returns the value of the SubSlaMgmt struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters. If the receiver or the field SubSlaMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) GetSubSlaMgmt() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt {
	if t != nil && t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	return nil
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) GetAntiSpoof() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_AntiSpoof {
	if t == nil || t.AntiSpoof == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_AntiSpoof_ip_mac
	}
	return t.AntiSpoof
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AntiSpoof == 0 {
		t.AntiSpoof = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_AntiSpoof_ip_mac
	}
	t.SubSlaMgmt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap-parameters/sub-sla-mgmt YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt struct {
	Defaults       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults `path:"defaults" module:"nokia-conf"`
	SubIdentPolicy *string                                                                                               `path:"sub-ident-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) IsYANGGoStruct() {
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) GetOrCreateDefaults() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults{}
	return t.Defaults
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) GetDefaults() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetSubIdentPolicy retrieves the value of the leaf SubIdentPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubIdentPolicy is set, it can
// safely use t.GetSubIdentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubIdentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) GetSubIdentPolicy() string {
	if t == nil || t.SubIdentPolicy == nil {
		return ""
	}
	return *t.SubIdentPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Defaults.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap-parameters/sub-sla-mgmt/defaults YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults struct {
	AppProfile   *string                                                                                                            `path:"app-profile" module:"nokia-conf"`
	SlaProfile   *string                                                                                                            `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string                                                                                                            `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) IsYANGGoStruct() {
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId{}
	return t.SubscriberId
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) GetSubscriberId() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SubscriberId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap-parameters/sub-sla-mgmt/defaults/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId struct {
	AutoId YANGEmpty `path:"auto-id" module:"nokia-conf"`
	String *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) IsYANGGoStruct() {
}

// GetAutoId retrieves the value of the leaf AutoId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoId is set, it can
// safely use t.GetAutoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) GetAutoId() YANGEmpty {
	if t == nil || t.AutoId == false {
		return false
	}
	return t.AutoId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_SapParameters_SubSlaMgmt_Defaults_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                                              `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                                              `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                                                `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) IsYANGGoStruct() {
}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/default-host YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost struct {
	Ipv4 map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key represents the key for list Ipv4 of element /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/default-host.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key struct {
	Address      string `path:"address"`
	PrefixLength uint32 `path:"prefix-length"`
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key represents the key for list Ipv6 of element /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/default-host.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key struct {
	Address      string `path:"address"`
	PrefixLength uint32 `path:"prefix-length"`
}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) NewIpv4(Address string, PrefixLength uint32) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4)
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4{
		Address:      &Address,
		PrefixLength: &PrefixLength,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) RenameIpv4(oldK, newK NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Address = &newK.Address
	e.PrefixLength = &newK.PrefixLength

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) GetOrCreateIpv4(Address string, PrefixLength uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 {

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Address, PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) GetIpv4(Address string, PrefixLength uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) DeleteIpv4(Address string, PrefixLength uint32) {
	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) AppendIpv4(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key for PrefixLength")
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key{
		Address:      *v.Address,
		PrefixLength: *v.PrefixLength,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) NewIpv6(Address string, PrefixLength uint32) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6)
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6{
		Address:      &Address,
		PrefixLength: &PrefixLength,
	}

	return t.Ipv6[key], nil
}

// RenameIpv6 renames an entry in the list Ipv6 within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) RenameIpv6(oldK, newK NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key) error {
	if _, ok := t.Ipv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6", newK)
	}

	e, ok := t.Ipv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6", oldK)
	}
	e.Address = &newK.Address
	e.PrefixLength = &newK.PrefixLength

	t.Ipv6[newK] = e
	delete(t.Ipv6, oldK)
	return nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) GetOrCreateIpv6(Address string, PrefixLength uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 {

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(Address, PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) GetIpv6(Address string, PrefixLength uint32) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) DeleteIpv6(Address string, PrefixLength uint32) {
	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key{
		Address:      Address,
		PrefixLength: PrefixLength,
	}

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 struct to the
// list Ipv6 of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) AppendIpv6(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key for PrefixLength")
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key{
		Address:      *v.Address,
		PrefixLength: *v.PrefixLength,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/default-host/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	NextHop            *string  `path:"next-hop" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"address":       *t.Address,
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/default-host/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	NextHop            *string  `path:"next-hop" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"address":       *t.Address,
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_DefaultHost_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress struct {
	AggRate *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Filter  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter  `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) IsYANGGoStruct() {
}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate struct {
	LimitUnusedBandwidth      *bool  `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool  `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) IsYANGGoStruct() {
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                                                   `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) IsYANGGoStruct() {
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm struct {
	ApplyGroups          []string                                                                                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats                                                                             `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                                                                        `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                                                                     `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                          `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                                                `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                                                `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                                               `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                                              `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                                              `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                                              `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                                               `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                                              `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                                              `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                                              `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                                              `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) IsYANGGoStruct() {
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                                                `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {
}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                                           `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {
}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {
}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) IsYANGGoStruct() {
}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking struct {
	ApplyGroups               []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ExpiryTime                *uint32  `path:"expiry-time" module:"nokia-conf"`
	ImportPolicy              *string  `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32  `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32  `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32  `path:"maximum-number-sources" module:"nokia-conf"`
	RouterAlertCheck          *bool    `path:"router-alert-check" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 0
	}
	return *t.ExpiryTime
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress struct {
	Filter       *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	IpFilterPair *bool                                                                                  `path:"ip-filter-pair" module:"nokia-conf"`
	Qos          *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) IsYANGGoStruct() {
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) GetFilter() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) IsYANGGoStruct() {
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress struct {
	PolicyName  *string                                     `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaTypesServices_ServicesSapQueuingType `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/ies/subscriber-interface/group-interface/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Ies_SubscriberInterface_GroupInterface_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}
