/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress represents the /nokia-conf/configure/mirror/mirror-dest/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress struct {
	L2Tpv3  *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3 `path:"l2tpv3" module:"nokia-conf"`
	VcLabel *uint32                                                       `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) GetOrCreateL2Tpv3() *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3{}
	return t.L2Tpv3
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) GetL2Tpv3() *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2Tpv3.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3 represents the /nokia-conf/configure/mirror/mirror-dest/spoke-sdp/egress/l2tpv3 YANG schema element.
type NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3 struct {
	Cookie *string `path:"cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) IsYANGGoStruct() {}

// GetCookie retrieves the value of the leaf Cookie from the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie is set, it can
// safely use t.GetCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) GetCookie() string {
	if t == nil || t.Cookie == nil {
		return ""
	}
	return *t.Cookie
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Egress_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint represents the /nokia-conf/configure/mirror/mirror-dest/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint struct {
	Icb        *bool                                                                    `path:"icb" module:"nokia-conf"`
	Name       *string                                                                  `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetIcb retrieves the value of the leaf Icb from the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icb is set, it can
// safely use t.GetIcb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) GetIcb() bool {
	if t == nil || t.Icb == nil {
		return false
	}
	return *t.Icb
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icb == nil {
		var v bool = false
		t.Icb = &v
	}
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress represents the /nokia-conf/configure/mirror/mirror-dest/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress struct {
	VcLabel *uint32 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Mirror_MirrorDest_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource represents the /nokia-conf/configure/mirror/mirror-source YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	IpFilter           map[string]*NokiaConf_Configure_Mirror_MirrorSource_IpFilter   `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter         map[string]*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter `path:"ipv6-filter" module:"nokia-conf"`
	MacFilter          map[string]*NokiaConf_Configure_Mirror_MirrorSource_MacFilter  `path:"mac-filter" module:"nokia-conf"`
	Port               map[string]*NokiaConf_Configure_Mirror_MirrorSource_Port       `path:"port" module:"nokia-conf"`
	Sap                map[string]*NokiaConf_Configure_Mirror_MirrorSource_Sap        `path:"sap" module:"nokia-conf"`
	ServiceName        *string                                                        `path:"service-name" module:"nokia-conf"`
	Subscriber         map[string]*NokiaConf_Configure_Mirror_MirrorSource_Subscriber `path:"subscriber" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource) IsYANGGoStruct() {}

// NewIpFilter creates a new entry in the IpFilter list of the
// NokiaConf_Configure_Mirror_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource) NewIpFilter(FilterName string) (*NokiaConf_Configure_Mirror_MirrorSource_IpFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpFilter == nil {
		t.IpFilter = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_IpFilter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpFilter", key)
	}

	t.IpFilter[key] = &NokiaConf_Configure_Mirror_MirrorSource_IpFilter{
		FilterName: &FilterName,
	}

	return t.IpFilter[key], nil
}

// RenameIpFilter renames an entry in the list IpFilter within
// the NokiaConf_Configure_Mirror_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) RenameIpFilter(oldK, newK string) error {
	if _, ok := t.IpFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in IpFilter", newK)
	}

	e, ok := t.IpFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpFilter", oldK)
	}
	e.FilterName = &newK

	t.IpFilter[newK] = e
	delete(t.IpFilter, oldK)
	return nil
}

// GetOrCreateIpFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetOrCreateIpFilter(FilterName string) *NokiaConf_Configure_Mirror_MirrorSource_IpFilter {

	key := FilterName

	if v, ok := t.IpFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpFilter got unexpected error: %v", err))
	}
	return v
}

// GetIpFilter retrieves the value with the specified key from
// the IpFilter map field of NokiaConf_Configure_Mirror_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetIpFilter(FilterName string) *NokiaConf_Configure_Mirror_MirrorSource_IpFilter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.IpFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource) DeleteIpFilter(FilterName string) {
	key := FilterName

	delete(t.IpFilter, key)
}

// AppendIpFilter appends the supplied NokiaConf_Configure_Mirror_MirrorSource_IpFilter struct to the
// list IpFilter of NokiaConf_Configure_Mirror_MirrorSource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_IpFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource) AppendIpFilter(v *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpFilter == nil {
		t.IpFilter = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_IpFilter)
	}

	if _, ok := t.IpFilter[key]; ok {
		return fmt.Errorf("duplicate key for list IpFilter %v", key)
	}

	t.IpFilter[key] = v
	return nil
}

// NewIpv6Filter creates a new entry in the Ipv6Filter list of the
// NokiaConf_Configure_Mirror_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource) NewIpv6Filter(FilterName string) (*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6Filter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6Filter", key)
	}

	t.Ipv6Filter[key] = &NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter{
		FilterName: &FilterName,
	}

	return t.Ipv6Filter[key], nil
}

// RenameIpv6Filter renames an entry in the list Ipv6Filter within
// the NokiaConf_Configure_Mirror_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) RenameIpv6Filter(oldK, newK string) error {
	if _, ok := t.Ipv6Filter[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6Filter", newK)
	}

	e, ok := t.Ipv6Filter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6Filter", oldK)
	}
	e.FilterName = &newK

	t.Ipv6Filter[newK] = e
	delete(t.Ipv6Filter, oldK)
	return nil
}

// GetOrCreateIpv6Filter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetOrCreateIpv6Filter(FilterName string) *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter {

	key := FilterName

	if v, ok := t.Ipv6Filter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6Filter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6Filter got unexpected error: %v", err))
	}
	return v
}

// GetIpv6Filter retrieves the value with the specified key from
// the Ipv6Filter map field of NokiaConf_Configure_Mirror_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetIpv6Filter(FilterName string) *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.Ipv6Filter[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6Filter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource) DeleteIpv6Filter(FilterName string) {
	key := FilterName

	delete(t.Ipv6Filter, key)
}

// AppendIpv6Filter appends the supplied NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter struct to the
// list Ipv6Filter of NokiaConf_Configure_Mirror_MirrorSource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource) AppendIpv6Filter(v *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6Filter == nil {
		t.Ipv6Filter = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter)
	}

	if _, ok := t.Ipv6Filter[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6Filter %v", key)
	}

	t.Ipv6Filter[key] = v
	return nil
}

// NewMacFilter creates a new entry in the MacFilter list of the
// NokiaConf_Configure_Mirror_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource) NewMacFilter(FilterName string) (*NokiaConf_Configure_Mirror_MirrorSource_MacFilter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacFilter == nil {
		t.MacFilter = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_MacFilter)
	}

	key := FilterName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacFilter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacFilter", key)
	}

	t.MacFilter[key] = &NokiaConf_Configure_Mirror_MirrorSource_MacFilter{
		FilterName: &FilterName,
	}

	return t.MacFilter[key], nil
}

// RenameMacFilter renames an entry in the list MacFilter within
// the NokiaConf_Configure_Mirror_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) RenameMacFilter(oldK, newK string) error {
	if _, ok := t.MacFilter[newK]; ok {
		return fmt.Errorf("key %v already exists in MacFilter", newK)
	}

	e, ok := t.MacFilter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacFilter", oldK)
	}
	e.FilterName = &newK

	t.MacFilter[newK] = e
	delete(t.MacFilter, oldK)
	return nil
}

// GetOrCreateMacFilter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetOrCreateMacFilter(FilterName string) *NokiaConf_Configure_Mirror_MirrorSource_MacFilter {

	key := FilterName

	if v, ok := t.MacFilter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacFilter(FilterName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacFilter got unexpected error: %v", err))
	}
	return v
}

// GetMacFilter retrieves the value with the specified key from
// the MacFilter map field of NokiaConf_Configure_Mirror_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetMacFilter(FilterName string) *NokiaConf_Configure_Mirror_MirrorSource_MacFilter {

	if t == nil {
		return nil
	}

	key := FilterName

	if lm, ok := t.MacFilter[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacFilter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource) DeleteMacFilter(FilterName string) {
	key := FilterName

	delete(t.MacFilter, key)
}

// AppendMacFilter appends the supplied NokiaConf_Configure_Mirror_MirrorSource_MacFilter struct to the
// list MacFilter of NokiaConf_Configure_Mirror_MirrorSource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_MacFilter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource) AppendMacFilter(v *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) error {
	if v.FilterName == nil {
		return fmt.Errorf("invalid nil key received for FilterName")
	}

	key := *v.FilterName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacFilter == nil {
		t.MacFilter = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_MacFilter)
	}

	if _, ok := t.MacFilter[key]; ok {
		return fmt.Errorf("duplicate key for list MacFilter %v", key)
	}

	t.MacFilter[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Mirror_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource) NewPort(PortId string) (*NokiaConf_Configure_Mirror_MirrorSource_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Mirror_MirrorSource_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Mirror_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetOrCreatePort(PortId string) *NokiaConf_Configure_Mirror_MirrorSource_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Mirror_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetPort(PortId string) *NokiaConf_Configure_Mirror_MirrorSource_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Mirror_MirrorSource_Port struct to the
// list Port of NokiaConf_Configure_Mirror_MirrorSource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource) AppendPort(v *NokiaConf_Configure_Mirror_MirrorSource_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Mirror_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource) NewSap(SapId string) (*NokiaConf_Configure_Mirror_MirrorSource_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Mirror_MirrorSource_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Mirror_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetOrCreateSap(SapId string) *NokiaConf_Configure_Mirror_MirrorSource_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Mirror_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetSap(SapId string) *NokiaConf_Configure_Mirror_MirrorSource_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Mirror_MirrorSource_Sap struct to the
// list Sap of NokiaConf_Configure_Mirror_MirrorSource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource) AppendSap(v *NokiaConf_Configure_Mirror_MirrorSource_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSubscriber creates a new entry in the Subscriber list of the
// NokiaConf_Configure_Mirror_MirrorSource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource) NewSubscriber(SubscriberId string) (*NokiaConf_Configure_Mirror_MirrorSource_Subscriber, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscriber == nil {
		t.Subscriber = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Subscriber)
	}

	key := SubscriberId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subscriber[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subscriber", key)
	}

	t.Subscriber[key] = &NokiaConf_Configure_Mirror_MirrorSource_Subscriber{
		SubscriberId: &SubscriberId,
	}

	return t.Subscriber[key], nil
}

// RenameSubscriber renames an entry in the list Subscriber within
// the NokiaConf_Configure_Mirror_MirrorSource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) RenameSubscriber(oldK, newK string) error {
	if _, ok := t.Subscriber[newK]; ok {
		return fmt.Errorf("key %v already exists in Subscriber", newK)
	}

	e, ok := t.Subscriber[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subscriber", oldK)
	}
	e.SubscriberId = &newK

	t.Subscriber[newK] = e
	delete(t.Subscriber, oldK)
	return nil
}

// GetOrCreateSubscriber retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetOrCreateSubscriber(SubscriberId string) *NokiaConf_Configure_Mirror_MirrorSource_Subscriber {

	key := SubscriberId

	if v, ok := t.Subscriber[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscriber(SubscriberId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscriber got unexpected error: %v", err))
	}
	return v
}

// GetSubscriber retrieves the value with the specified key from
// the Subscriber map field of NokiaConf_Configure_Mirror_MirrorSource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetSubscriber(SubscriberId string) *NokiaConf_Configure_Mirror_MirrorSource_Subscriber {

	if t == nil {
		return nil
	}

	key := SubscriberId

	if lm, ok := t.Subscriber[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscriber deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource) DeleteSubscriber(SubscriberId string) {
	key := SubscriberId

	delete(t.Subscriber, key)
}

// AppendSubscriber appends the supplied NokiaConf_Configure_Mirror_MirrorSource_Subscriber struct to the
// list Subscriber of NokiaConf_Configure_Mirror_MirrorSource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_Subscriber already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource) AppendSubscriber(v *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) error {
	if v.SubscriberId == nil {
		return fmt.Errorf("invalid nil key received for SubscriberId")
	}

	key := *v.SubscriberId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscriber == nil {
		t.Subscriber = make(map[string]*NokiaConf_Configure_Mirror_MirrorSource_Subscriber)
	}

	if _, ok := t.Subscriber[key]; ok {
		return fmt.Errorf("duplicate key for list Subscriber %v", key)
	}

	t.Subscriber[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Mirror_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Mirror_MirrorSource
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.IpFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6Filter {
		e.PopulateDefaults()
	}
	for _, e := range t.MacFilter {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.Subscriber {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource.
func (*NokiaConf_Configure_Mirror_MirrorSource) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_IpFilter represents the /nokia-conf/configure/mirror/mirror-source/ip-filter YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_IpFilter struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterName         *string                                                            `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_IpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Mirror_MirrorSource_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Mirror_MirrorSource_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Mirror_MirrorSource_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Mirror_MirrorSource_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) AppendEntry(v *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Mirror_MirrorSource_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_IpFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_IpFilter.
func (*NokiaConf_Configure_Mirror_MirrorSource_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry represents the /nokia-conf/configure/mirror/mirror-source/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry struct {
	EntryId *uint32 `path:"entry-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) IsYANGGoStruct() {}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry.
func (*NokiaConf_Configure_Mirror_MirrorSource_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter represents the /nokia-conf/configure/mirror/mirror-source/ipv6-filter YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
	FilterName         *string                                                              `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) GetEntry(EntryId uint32) *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter.
func (*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry represents the /nokia-conf/configure/mirror/mirror-source/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry struct {
	EntryId *uint32 `path:"entry-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) IsYANGGoStruct() {}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry.
func (*NokiaConf_Configure_Mirror_MirrorSource_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_MacFilter represents the /nokia-conf/configure/mirror/mirror-source/mac-filter YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_MacFilter struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry `path:"entry" module:"nokia-conf"`
	FilterName         *string                                                             `path:"filter-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_MacFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Mirror_MirrorSource_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Mirror_MirrorSource_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Mirror_MirrorSource_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Mirror_MirrorSource_MacFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Mirror_MirrorSource_MacFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) AppendEntry(v *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFilterName retrieves the value of the leaf FilterName from the NokiaConf_Configure_Mirror_MirrorSource_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterName is set, it can
// safely use t.GetFilterName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) GetFilterName() string {
	if t == nil || t.FilterName == nil {
		return ""
	}
	return *t.FilterName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_MacFilter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FilterName == nil {
		return nil, fmt.Errorf("nil value for key FilterName")
	}

	return map[string]interface{}{
		"filter-name": *t.FilterName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_MacFilter.
func (*NokiaConf_Configure_Mirror_MirrorSource_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry represents the /nokia-conf/configure/mirror/mirror-source/mac-filter/entry YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry struct {
	EntryId *uint32 `path:"entry-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) IsYANGGoStruct() {}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry.
func (*NokiaConf_Configure_Mirror_MirrorSource_MacFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_Port represents the /nokia-conf/configure/mirror/mirror-source/port YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_Port struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *bool    `path:"egress" module:"nokia-conf"`
	Ingress            *bool    `path:"ingress" module:"nokia-conf"`
	PortId             *string  `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_Port) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEgress retrieves the value of the leaf Egress from the NokiaConf_Configure_Mirror_MirrorSource_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return false
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the NokiaConf_Configure_Mirror_MirrorSource_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return false
	}
	return *t.Ingress
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Mirror_MirrorSource_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = false
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = false
		t.Ingress = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_Port.
func (*NokiaConf_Configure_Mirror_MirrorSource_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_Sap represents the /nokia-conf/configure/mirror/mirror-source/sap YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_Sap struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *bool    `path:"egress" module:"nokia-conf"`
	Ingress            *bool    `path:"ingress" module:"nokia-conf"`
	SapId              *string  `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_Sap) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEgress retrieves the value of the leaf Egress from the NokiaConf_Configure_Mirror_MirrorSource_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return false
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the NokiaConf_Configure_Mirror_MirrorSource_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return false
	}
	return *t.Ingress
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Mirror_MirrorSource_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = false
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = false
		t.Ingress = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_Sap.
func (*NokiaConf_Configure_Mirror_MirrorSource_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Mirror_MirrorSource_Subscriber represents the /nokia-conf/configure/mirror/mirror-source/subscriber YANG schema element.
type NokiaConf_Configure_Mirror_MirrorSource_Subscriber struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *bool                                                         `path:"egress" module:"nokia-conf"`
	Fc                 []E_NokiaConf_Configure_Mirror_MirrorSource_Subscriber_Fc     `path:"fc" module:"nokia-conf"`
	HostType           E_NokiaConf_Configure_Mirror_MirrorSource_Subscriber_HostType `path:"host-type" module:"nokia-conf"`
	Ingress            *bool                                                         `path:"ingress" module:"nokia-conf"`
	IpAddress          *string                                                       `path:"ip-address" module:"nokia-conf"`
	IpFamily           E_NokiaConf_Configure_Mirror_MirrorSource_Subscriber_IpFamily `path:"ip-family" module:"nokia-conf"`
	MacAddress         *string                                                       `path:"mac-address" module:"nokia-conf"`
	SapId              *string                                                       `path:"sap-id" module:"nokia-conf"`
	SlaProfile         *string                                                       `path:"sla-profile" module:"nokia-conf"`
	SubscriberId       *string                                                       `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Mirror_MirrorSource_Subscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Mirror_MirrorSource_Subscriber) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEgress retrieves the value of the leaf Egress from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetEgress() bool {
	if t == nil || t.Egress == nil {
		return false
	}
	return *t.Egress
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetFc() []E_NokiaConf_Configure_Mirror_MirrorSource_Subscriber_Fc {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetHostType retrieves the value of the leaf HostType from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostType is set, it can
// safely use t.GetHostType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetHostType() E_NokiaConf_Configure_Mirror_MirrorSource_Subscriber_HostType {
	if t == nil || t.HostType == 0 {
		return 0
	}
	return t.HostType
}

// GetIngress retrieves the value of the leaf Ingress from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetIngress() bool {
	if t == nil || t.Ingress == nil {
		return false
	}
	return *t.Ingress
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpFamily retrieves the value of the leaf IpFamily from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFamily is set, it can
// safely use t.GetIpFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFamily == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetIpFamily() E_NokiaConf_Configure_Mirror_MirrorSource_Subscriber_IpFamily {
	if t == nil || t.IpFamily == 0 {
		return 0
	}
	return t.IpFamily
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Mirror_MirrorSource_Subscriber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Egress == nil {
		var v bool = false
		t.Egress = &v
	}
	if t.Ingress == nil {
		var v bool = false
		t.Ingress = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Mirror_MirrorSource_Subscriber struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SubscriberId == nil {
		return nil, fmt.Errorf("nil value for key SubscriberId")
	}

	return map[string]interface{}{
		"subscriber-id": *t.SubscriberId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Mirror_MirrorSource_Subscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Mirror_MirrorSource_Subscriber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Mirror_MirrorSource_Subscriber.
func (*NokiaConf_Configure_Mirror_MirrorSource_Subscriber) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement represents the /nokia-conf/configure/multicast-management YANG schema element.
type NokiaConf_Configure_MulticastManagement struct {
	ApplyGroups                   []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude            []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	BandwidthPolicy               map[string]*NokiaConf_Configure_MulticastManagement_BandwidthPolicy               `path:"bandwidth-policy" module:"nokia-conf"`
	ChassisLevel                  *NokiaConf_Configure_MulticastManagement_ChassisLevel                             `path:"chassis-level" module:"nokia-conf"`
	MulticastInfoPolicy           map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy           `path:"multicast-info-policy" module:"nokia-conf"`
	MulticastReportingDestination map[string]*NokiaConf_Configure_MulticastManagement_MulticastReportingDestination `path:"multicast-reporting-destination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement) IsYANGGoStruct() {}

// NewBandwidthPolicy creates a new entry in the BandwidthPolicy list of the
// NokiaConf_Configure_MulticastManagement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement) NewBandwidthPolicy(PolicyName string) (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BandwidthPolicy == nil {
		t.BandwidthPolicy = make(map[string]*NokiaConf_Configure_MulticastManagement_BandwidthPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BandwidthPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BandwidthPolicy", key)
	}

	t.BandwidthPolicy[key] = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy{
		PolicyName: &PolicyName,
	}

	return t.BandwidthPolicy[key], nil
}

// RenameBandwidthPolicy renames an entry in the list BandwidthPolicy within
// the NokiaConf_Configure_MulticastManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement) RenameBandwidthPolicy(oldK, newK string) error {
	if _, ok := t.BandwidthPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in BandwidthPolicy", newK)
	}

	e, ok := t.BandwidthPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BandwidthPolicy", oldK)
	}
	e.PolicyName = &newK

	t.BandwidthPolicy[newK] = e
	delete(t.BandwidthPolicy, oldK)
	return nil
}

// GetOrCreateBandwidthPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement) GetOrCreateBandwidthPolicy(PolicyName string) *NokiaConf_Configure_MulticastManagement_BandwidthPolicy {

	key := PolicyName

	if v, ok := t.BandwidthPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBandwidthPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBandwidthPolicy got unexpected error: %v", err))
	}
	return v
}

// GetBandwidthPolicy retrieves the value with the specified key from
// the BandwidthPolicy map field of NokiaConf_Configure_MulticastManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement) GetBandwidthPolicy(PolicyName string) *NokiaConf_Configure_MulticastManagement_BandwidthPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.BandwidthPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteBandwidthPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement) DeleteBandwidthPolicy(PolicyName string) {
	key := PolicyName

	delete(t.BandwidthPolicy, key)
}

// AppendBandwidthPolicy appends the supplied NokiaConf_Configure_MulticastManagement_BandwidthPolicy struct to the
// list BandwidthPolicy of NokiaConf_Configure_MulticastManagement. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_BandwidthPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement) AppendBandwidthPolicy(v *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BandwidthPolicy == nil {
		t.BandwidthPolicy = make(map[string]*NokiaConf_Configure_MulticastManagement_BandwidthPolicy)
	}

	if _, ok := t.BandwidthPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list BandwidthPolicy %v", key)
	}

	t.BandwidthPolicy[key] = v
	return nil
}

// NewMulticastInfoPolicy creates a new entry in the MulticastInfoPolicy list of the
// NokiaConf_Configure_MulticastManagement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement) NewMulticastInfoPolicy(PolicyName string) (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MulticastInfoPolicy == nil {
		t.MulticastInfoPolicy = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MulticastInfoPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MulticastInfoPolicy", key)
	}

	t.MulticastInfoPolicy[key] = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy{
		PolicyName: &PolicyName,
	}

	return t.MulticastInfoPolicy[key], nil
}

// RenameMulticastInfoPolicy renames an entry in the list MulticastInfoPolicy within
// the NokiaConf_Configure_MulticastManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement) RenameMulticastInfoPolicy(oldK, newK string) error {
	if _, ok := t.MulticastInfoPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in MulticastInfoPolicy", newK)
	}

	e, ok := t.MulticastInfoPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MulticastInfoPolicy", oldK)
	}
	e.PolicyName = &newK

	t.MulticastInfoPolicy[newK] = e
	delete(t.MulticastInfoPolicy, oldK)
	return nil
}

// GetOrCreateMulticastInfoPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement) GetOrCreateMulticastInfoPolicy(PolicyName string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy {

	key := PolicyName

	if v, ok := t.MulticastInfoPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMulticastInfoPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMulticastInfoPolicy got unexpected error: %v", err))
	}
	return v
}

// GetMulticastInfoPolicy retrieves the value with the specified key from
// the MulticastInfoPolicy map field of NokiaConf_Configure_MulticastManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement) GetMulticastInfoPolicy(PolicyName string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.MulticastInfoPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteMulticastInfoPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement) DeleteMulticastInfoPolicy(PolicyName string) {
	key := PolicyName

	delete(t.MulticastInfoPolicy, key)
}

// AppendMulticastInfoPolicy appends the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy struct to the
// list MulticastInfoPolicy of NokiaConf_Configure_MulticastManagement. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement) AppendMulticastInfoPolicy(v *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MulticastInfoPolicy == nil {
		t.MulticastInfoPolicy = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy)
	}

	if _, ok := t.MulticastInfoPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list MulticastInfoPolicy %v", key)
	}

	t.MulticastInfoPolicy[key] = v
	return nil
}

// NewMulticastReportingDestination creates a new entry in the MulticastReportingDestination list of the
// NokiaConf_Configure_MulticastManagement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement) NewMulticastReportingDestination(Name string) (*NokiaConf_Configure_MulticastManagement_MulticastReportingDestination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MulticastReportingDestination == nil {
		t.MulticastReportingDestination = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastReportingDestination)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MulticastReportingDestination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MulticastReportingDestination", key)
	}

	t.MulticastReportingDestination[key] = &NokiaConf_Configure_MulticastManagement_MulticastReportingDestination{
		Name: &Name,
	}

	return t.MulticastReportingDestination[key], nil
}

// RenameMulticastReportingDestination renames an entry in the list MulticastReportingDestination within
// the NokiaConf_Configure_MulticastManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement) RenameMulticastReportingDestination(oldK, newK string) error {
	if _, ok := t.MulticastReportingDestination[newK]; ok {
		return fmt.Errorf("key %v already exists in MulticastReportingDestination", newK)
	}

	e, ok := t.MulticastReportingDestination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MulticastReportingDestination", oldK)
	}
	e.Name = &newK

	t.MulticastReportingDestination[newK] = e
	delete(t.MulticastReportingDestination, oldK)
	return nil
}

// GetOrCreateMulticastReportingDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement) GetOrCreateMulticastReportingDestination(Name string) *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination {

	key := Name

	if v, ok := t.MulticastReportingDestination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMulticastReportingDestination(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMulticastReportingDestination got unexpected error: %v", err))
	}
	return v
}

// GetMulticastReportingDestination retrieves the value with the specified key from
// the MulticastReportingDestination map field of NokiaConf_Configure_MulticastManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement) GetMulticastReportingDestination(Name string) *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MulticastReportingDestination[key]; ok {
		return lm
	}
	return nil
}

// DeleteMulticastReportingDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement) DeleteMulticastReportingDestination(Name string) {
	key := Name

	delete(t.MulticastReportingDestination, key)
}

// AppendMulticastReportingDestination appends the supplied NokiaConf_Configure_MulticastManagement_MulticastReportingDestination struct to the
// list MulticastReportingDestination of NokiaConf_Configure_MulticastManagement. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_MulticastReportingDestination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement) AppendMulticastReportingDestination(v *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MulticastReportingDestination == nil {
		t.MulticastReportingDestination = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastReportingDestination)
	}

	if _, ok := t.MulticastReportingDestination[key]; ok {
		return fmt.Errorf("duplicate key for list MulticastReportingDestination %v", key)
	}

	t.MulticastReportingDestination[key] = v
	return nil
}

// GetOrCreateChassisLevel retrieves the value of the ChassisLevel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement) GetOrCreateChassisLevel() *NokiaConf_Configure_MulticastManagement_ChassisLevel {
	if t.ChassisLevel != nil {
		return t.ChassisLevel
	}
	t.ChassisLevel = &NokiaConf_Configure_MulticastManagement_ChassisLevel{}
	return t.ChassisLevel
}

// GetChassisLevel returns the value of the ChassisLevel struct pointer
// from NokiaConf_Configure_MulticastManagement. If the receiver or the field ChassisLevel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement) GetChassisLevel() *NokiaConf_Configure_MulticastManagement_ChassisLevel {
	if t != nil && t.ChassisLevel != nil {
		return t.ChassisLevel
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ChassisLevel.PopulateDefaults()
	for _, e := range t.BandwidthPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.MulticastInfoPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.MulticastReportingDestination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement.
func (*NokiaConf_Configure_MulticastManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy represents the /nokia-conf/configure/multicast-management/bandwidth-policy YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy struct {
	AdminBwThreshold    *uint32                                                            `path:"admin-bw-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description         *string                                                            `path:"description" module:"nokia-conf"`
	FallingPercentReset *uint32                                                            `path:"falling-percent-reset" module:"nokia-conf"`
	ImpmPaths           *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths `path:"impm-paths" module:"nokia-conf"`
	McastPool           *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool `path:"mcast-pool" module:"nokia-conf"`
	PolicyName          *string                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy) IsYANGGoStruct() {}

// GetOrCreateImpmPaths retrieves the value of the ImpmPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetOrCreateImpmPaths() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths {
	if t.ImpmPaths != nil {
		return t.ImpmPaths
	}
	t.ImpmPaths = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths{}
	return t.ImpmPaths
}

// GetOrCreateMcastPool retrieves the value of the McastPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetOrCreateMcastPool() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool {
	if t.McastPool != nil {
		return t.McastPool
	}
	t.McastPool = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool{}
	return t.McastPool
}

// GetImpmPaths returns the value of the ImpmPaths struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy. If the receiver or the field ImpmPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetImpmPaths() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths {
	if t != nil && t.ImpmPaths != nil {
		return t.ImpmPaths
	}
	return nil
}

// GetMcastPool returns the value of the McastPool struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy. If the receiver or the field McastPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetMcastPool() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool {
	if t != nil && t.McastPool != nil {
		return t.McastPool
	}
	return nil
}

// GetAdminBwThreshold retrieves the value of the leaf AdminBwThreshold from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminBwThreshold is set, it can
// safely use t.GetAdminBwThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminBwThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetAdminBwThreshold() uint32 {
	if t == nil || t.AdminBwThreshold == nil {
		return 10
	}
	return *t.AdminBwThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFallingPercentReset retrieves the value of the leaf FallingPercentReset from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingPercentReset is set, it can
// safely use t.GetFallingPercentReset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingPercentReset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetFallingPercentReset() uint32 {
	if t == nil || t.FallingPercentReset == nil {
		return 50
	}
	return *t.FallingPercentReset
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminBwThreshold == nil {
		var v uint32 = 10
		t.AdminBwThreshold = &v
	}
	if t.FallingPercentReset == nil {
		var v uint32 = 50
		t.FallingPercentReset = &v
	}
	t.ImpmPaths.PopulateDefaults()
	t.McastPool.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_BandwidthPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths struct {
	PrimaryPath   *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath   `path:"primary-path" module:"nokia-conf"`
	SecondaryPath *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath `path:"secondary-path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) IsYANGGoStruct() {}

// GetOrCreatePrimaryPath retrieves the value of the PrimaryPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) GetOrCreatePrimaryPath() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath {
	if t.PrimaryPath != nil {
		return t.PrimaryPath
	}
	t.PrimaryPath = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath{}
	return t.PrimaryPath
}

// GetOrCreateSecondaryPath retrieves the value of the SecondaryPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) GetOrCreateSecondaryPath() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath {
	if t.SecondaryPath != nil {
		return t.SecondaryPath
	}
	t.SecondaryPath = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath{}
	return t.SecondaryPath
}

// GetPrimaryPath returns the value of the PrimaryPath struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths. If the receiver or the field PrimaryPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) GetPrimaryPath() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath {
	if t != nil && t.PrimaryPath != nil {
		return t.PrimaryPath
	}
	return nil
}

// GetSecondaryPath returns the value of the SecondaryPath struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths. If the receiver or the field SecondaryPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) GetSecondaryPath() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath {
	if t != nil && t.SecondaryPath != nil {
		return t.SecondaryPath
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PrimaryPath.PopulateDefaults()
	t.SecondaryPath.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/primary-path YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	QueueParameters    *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters `path:"queue-parameters" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) IsYANGGoStruct() {
}

// GetOrCreateQueueParameters retrieves the value of the QueueParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) GetOrCreateQueueParameters() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters {
	if t.QueueParameters != nil {
		return t.QueueParameters
	}
	t.QueueParameters = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters{}
	return t.QueueParameters
}

// GetQueueParameters returns the value of the QueueParameters struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath. If the receiver or the field QueueParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) GetQueueParameters() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters {
	if t != nil && t.QueueParameters != nil {
		return t.QueueParameters
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.QueueParameters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/primary-path/queue-parameters YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters struct {
	Cbs      *float64                                                                                                `path:"cbs" module:"nokia-conf"`
	DropTail *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail `path:"drop-tail" module:"nokia-conf"`
	Mbs      *float64                                                                                                `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) IsYANGGoStruct() {
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) GetOrCreateDropTail() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail{}
	return t.DropTail
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) GetDropTail() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) GetCbs() float64 {
	if t == nil || t.Cbs == nil {
		return 5.00
	}
	return *t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) GetMbs() float64 {
	if t == nil || t.Mbs == nil {
		return 7.00
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v float64 = 5.00
		t.Cbs = &v
	}
	if t.Mbs == nil {
		var v float64 = 7.00
		t.Mbs = &v
	}
	t.DropTail.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/primary-path/queue-parameters/drop-tail YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail struct {
	Low *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) GetOrCreateLow() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) GetLow() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/primary-path/queue-parameters/drop-tail/low YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low struct {
	PercentReductionFromMbs *uint32 `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) GetPercentReductionFromMbs() uint32 {
	if t == nil || t.PercentReductionFromMbs == nil {
		return 10
	}
	return *t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		var v uint32 = 10
		t.PercentReductionFromMbs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_PrimaryPath_QueueParameters_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/secondary-path YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	NumberPaths        *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths     `path:"number-paths" module:"nokia-conf"`
	QueueParameters    *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters `path:"queue-parameters" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) IsYANGGoStruct() {
}

// GetOrCreateNumberPaths retrieves the value of the NumberPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) GetOrCreateNumberPaths() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths {
	if t.NumberPaths != nil {
		return t.NumberPaths
	}
	t.NumberPaths = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths{}
	return t.NumberPaths
}

// GetOrCreateQueueParameters retrieves the value of the QueueParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) GetOrCreateQueueParameters() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters {
	if t.QueueParameters != nil {
		return t.QueueParameters
	}
	t.QueueParameters = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters{}
	return t.QueueParameters
}

// GetNumberPaths returns the value of the NumberPaths struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath. If the receiver or the field NumberPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) GetNumberPaths() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths {
	if t != nil && t.NumberPaths != nil {
		return t.NumberPaths
	}
	return nil
}

// GetQueueParameters returns the value of the QueueParameters struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath. If the receiver or the field QueueParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) GetQueueParameters() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters {
	if t != nil && t.QueueParameters != nil {
		return t.QueueParameters
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NumberPaths.PopulateDefaults()
	t.QueueParameters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/secondary-path/number-paths YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths struct {
	NumberOfPaths *uint32 `path:"number-of-paths" module:"nokia-conf"`
	RedundantSfm  *uint32 `path:"redundant-sfm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) IsYANGGoStruct() {
}

// GetNumberOfPaths retrieves the value of the leaf NumberOfPaths from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberOfPaths is set, it can
// safely use t.GetNumberOfPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberOfPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) GetNumberOfPaths() uint32 {
	if t == nil || t.NumberOfPaths == nil {
		return 1
	}
	return *t.NumberOfPaths
}

// GetRedundantSfm retrieves the value of the leaf RedundantSfm from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantSfm is set, it can
// safely use t.GetRedundantSfm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantSfm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) GetRedundantSfm() uint32 {
	if t == nil || t.RedundantSfm == nil {
		return 1
	}
	return *t.RedundantSfm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NumberOfPaths == nil {
		var v uint32 = 1
		t.NumberOfPaths = &v
	}
	if t.RedundantSfm == nil {
		var v uint32 = 1
		t.RedundantSfm = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_NumberPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/secondary-path/queue-parameters YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters struct {
	Cbs      *float64                                                                                                  `path:"cbs" module:"nokia-conf"`
	DropTail *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail `path:"drop-tail" module:"nokia-conf"`
	Mbs      *float64                                                                                                  `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) IsYANGGoStruct() {
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) GetOrCreateDropTail() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail{}
	return t.DropTail
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) GetDropTail() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) GetCbs() float64 {
	if t == nil || t.Cbs == nil {
		return 30.00
	}
	return *t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) GetMbs() float64 {
	if t == nil || t.Mbs == nil {
		return 40.00
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		var v float64 = 30.00
		t.Cbs = &v
	}
	if t.Mbs == nil {
		var v float64 = 40.00
		t.Mbs = &v
	}
	t.DropTail.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/secondary-path/queue-parameters/drop-tail YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail struct {
	Low *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) GetOrCreateLow() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) GetLow() *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low represents the /nokia-conf/configure/multicast-management/bandwidth-policy/impm-paths/secondary-path/queue-parameters/drop-tail/low YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low struct {
	PercentReductionFromMbs *uint32 `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) GetPercentReductionFromMbs() uint32 {
	if t == nil || t.PercentReductionFromMbs == nil {
		return 10
	}
	return *t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentReductionFromMbs == nil {
		var v uint32 = 10
		t.PercentReductionFromMbs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_ImpmPaths_SecondaryPath_QueueParameters_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool represents the /nokia-conf/configure/multicast-management/bandwidth-policy/mcast-pool YANG schema element.
type NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool struct {
	PercentOfTotal *uint32 `path:"percent-of-total" module:"nokia-conf"`
	ResvCbs        *uint32 `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy    *string `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) IsYANGGoStruct() {}

// GetPercentOfTotal retrieves the value of the leaf PercentOfTotal from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentOfTotal is set, it can
// safely use t.GetPercentOfTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentOfTotal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) GetPercentOfTotal() uint32 {
	if t == nil || t.PercentOfTotal == nil {
		return 10
	}
	return *t.PercentOfTotal
}

// GetResvCbs retrieves the value of the leaf ResvCbs from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResvCbs is set, it can
// safely use t.GetResvCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResvCbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) GetResvCbs() uint32 {
	if t == nil || t.ResvCbs == nil {
		return 50
	}
	return *t.ResvCbs
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentOfTotal == nil {
		var v uint32 = 10
		t.PercentOfTotal = &v
	}
	if t.ResvCbs == nil {
		var v uint32 = 50
		t.ResvCbs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool.
func (*NokiaConf_Configure_MulticastManagement_BandwidthPolicy_McastPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_ChassisLevel represents the /nokia-conf/configure/multicast-management/chassis-level YANG schema element.
type NokiaConf_Configure_MulticastManagement_ChassisLevel struct {
	ApplyGroups               []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	MmrpImpmOverride          *bool                                                                       `path:"mmrp-impm-override" module:"nokia-conf"`
	PerMcastPlaneCapacity     *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity `path:"per-mcast-plane-capacity" module:"nokia-conf"`
	RoundRobinInactiveRecords *bool                                                                       `path:"round-robin-inactive-records" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_ChassisLevel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel) IsYANGGoStruct() {}

// GetOrCreatePerMcastPlaneCapacity retrieves the value of the PerMcastPlaneCapacity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) GetOrCreatePerMcastPlaneCapacity() *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity {
	if t.PerMcastPlaneCapacity != nil {
		return t.PerMcastPlaneCapacity
	}
	t.PerMcastPlaneCapacity = &NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity{}
	return t.PerMcastPlaneCapacity
}

// GetPerMcastPlaneCapacity returns the value of the PerMcastPlaneCapacity struct pointer
// from NokiaConf_Configure_MulticastManagement_ChassisLevel. If the receiver or the field PerMcastPlaneCapacity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) GetPerMcastPlaneCapacity() *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity {
	if t != nil && t.PerMcastPlaneCapacity != nil {
		return t.PerMcastPlaneCapacity
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_ChassisLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_ChassisLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMmrpImpmOverride retrieves the value of the leaf MmrpImpmOverride from the NokiaConf_Configure_MulticastManagement_ChassisLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MmrpImpmOverride is set, it can
// safely use t.GetMmrpImpmOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MmrpImpmOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) GetMmrpImpmOverride() bool {
	if t == nil || t.MmrpImpmOverride == nil {
		return false
	}
	return *t.MmrpImpmOverride
}

// GetRoundRobinInactiveRecords retrieves the value of the leaf RoundRobinInactiveRecords from the NokiaConf_Configure_MulticastManagement_ChassisLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoundRobinInactiveRecords is set, it can
// safely use t.GetRoundRobinInactiveRecords() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoundRobinInactiveRecords == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) GetRoundRobinInactiveRecords() bool {
	if t == nil || t.RoundRobinInactiveRecords == nil {
		return false
	}
	return *t.RoundRobinInactiveRecords
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_ChassisLevel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MmrpImpmOverride == nil {
		var v bool = false
		t.MmrpImpmOverride = &v
	}
	if t.RoundRobinInactiveRecords == nil {
		var v bool = false
		t.RoundRobinInactiveRecords = &v
	}
	t.PerMcastPlaneCapacity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_ChassisLevel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_ChassisLevel.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity represents the /nokia-conf/configure/multicast-management/chassis-level/per-mcast-plane-capacity YANG schema element.
type NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity struct {
	McastCapacity          *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity          `path:"mcast-capacity" module:"nokia-conf"`
	RedundantMcastCapacity *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity `path:"redundant-mcast-capacity" module:"nokia-conf"`
	TotalCapacity          E_NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_TotalCapacity         `path:"total-capacity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) IsYANGGoStruct() {}

// GetOrCreateMcastCapacity retrieves the value of the McastCapacity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) GetOrCreateMcastCapacity() *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity {
	if t.McastCapacity != nil {
		return t.McastCapacity
	}
	t.McastCapacity = &NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity{}
	return t.McastCapacity
}

// GetOrCreateRedundantMcastCapacity retrieves the value of the RedundantMcastCapacity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) GetOrCreateRedundantMcastCapacity() *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity {
	if t.RedundantMcastCapacity != nil {
		return t.RedundantMcastCapacity
	}
	t.RedundantMcastCapacity = &NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity{}
	return t.RedundantMcastCapacity
}

// GetMcastCapacity returns the value of the McastCapacity struct pointer
// from NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity. If the receiver or the field McastCapacity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) GetMcastCapacity() *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity {
	if t != nil && t.McastCapacity != nil {
		return t.McastCapacity
	}
	return nil
}

// GetRedundantMcastCapacity returns the value of the RedundantMcastCapacity struct pointer
// from NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity. If the receiver or the field RedundantMcastCapacity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) GetRedundantMcastCapacity() *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity {
	if t != nil && t.RedundantMcastCapacity != nil {
		return t.RedundantMcastCapacity
	}
	return nil
}

// GetTotalCapacity retrieves the value of the leaf TotalCapacity from the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalCapacity is set, it can
// safely use t.GetTotalCapacity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalCapacity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) GetTotalCapacity() E_NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_TotalCapacity {
	if t == nil || t.TotalCapacity == 0 {
		return 0
	}
	return t.TotalCapacity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.McastCapacity.PopulateDefaults()
	t.RedundantMcastCapacity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity represents the /nokia-conf/configure/multicast-management/chassis-level/per-mcast-plane-capacity/mcast-capacity YANG schema element.
type NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity struct {
	PrimaryPercentage   *float64 `path:"primary-percentage" module:"nokia-conf"`
	SecondaryPercentage *float64 `path:"secondary-percentage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) IsYANGGoStruct() {
}

// GetPrimaryPercentage retrieves the value of the leaf PrimaryPercentage from the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryPercentage is set, it can
// safely use t.GetPrimaryPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryPercentage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) GetPrimaryPercentage() float64 {
	if t == nil || t.PrimaryPercentage == nil {
		return 0.0
	}
	return *t.PrimaryPercentage
}

// GetSecondaryPercentage retrieves the value of the leaf SecondaryPercentage from the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryPercentage is set, it can
// safely use t.GetSecondaryPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryPercentage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) GetSecondaryPercentage() float64 {
	if t == nil || t.SecondaryPercentage == nil {
		return 0.0
	}
	return *t.SecondaryPercentage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_McastCapacity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity represents the /nokia-conf/configure/multicast-management/chassis-level/per-mcast-plane-capacity/redundant-mcast-capacity YANG schema element.
type NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity struct {
	PrimaryPercentage   *float64 `path:"primary-percentage" module:"nokia-conf"`
	SecondaryPercentage *float64 `path:"secondary-percentage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) IsYANGGoStruct() {
}

// GetPrimaryPercentage retrieves the value of the leaf PrimaryPercentage from the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryPercentage is set, it can
// safely use t.GetPrimaryPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryPercentage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) GetPrimaryPercentage() float64 {
	if t == nil || t.PrimaryPercentage == nil {
		return 0.0
	}
	return *t.PrimaryPercentage
}

// GetSecondaryPercentage retrieves the value of the leaf SecondaryPercentage from the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryPercentage is set, it can
// safely use t.GetSecondaryPercentage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryPercentage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) GetSecondaryPercentage() float64 {
	if t == nil || t.SecondaryPercentage == nil {
		return 0.0
	}
	return *t.SecondaryPercentage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity.
func (*NokiaConf_Configure_MulticastManagement_ChassisLevel_PerMcastPlaneCapacity_RedundantMcastCapacity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy represents the /nokia-conf/configure/multicast-management/multicast-info-policy YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Bundle             map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle `path:"bundle" module:"nokia-conf"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	PolicyName         *string                                                                        `path:"policy-name" module:"nokia-conf"`
	VideoPolicy        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy       `path:"video-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) IsYANGGoStruct() {}

// NewBundle creates a new entry in the Bundle list of the
// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) NewBundle(BundleName string) (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bundle == nil {
		t.Bundle = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle)
	}

	key := BundleName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bundle[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bundle", key)
	}

	t.Bundle[key] = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle{
		BundleName: &BundleName,
	}

	return t.Bundle[key], nil
}

// RenameBundle renames an entry in the list Bundle within
// the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) RenameBundle(oldK, newK string) error {
	if _, ok := t.Bundle[newK]; ok {
		return fmt.Errorf("key %v already exists in Bundle", newK)
	}

	e, ok := t.Bundle[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Bundle", oldK)
	}
	e.BundleName = &newK

	t.Bundle[newK] = e
	delete(t.Bundle, oldK)
	return nil
}

// GetOrCreateBundle retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetOrCreateBundle(BundleName string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle {

	key := BundleName

	if v, ok := t.Bundle[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBundle(BundleName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBundle got unexpected error: %v", err))
	}
	return v
}

// GetBundle retrieves the value with the specified key from
// the Bundle map field of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetBundle(BundleName string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle {

	if t == nil {
		return nil
	}

	key := BundleName

	if lm, ok := t.Bundle[key]; ok {
		return lm
	}
	return nil
}

// DeleteBundle deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) DeleteBundle(BundleName string) {
	key := BundleName

	delete(t.Bundle, key)
}

// AppendBundle appends the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle struct to the
// list Bundle of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) AppendBundle(v *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) error {
	if v.BundleName == nil {
		return fmt.Errorf("invalid nil key received for BundleName")
	}

	key := *v.BundleName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bundle == nil {
		t.Bundle = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle)
	}

	if _, ok := t.Bundle[key]; ok {
		return fmt.Errorf("duplicate key for list Bundle %v", key)
	}

	t.Bundle[key] = v
	return nil
}

// GetOrCreateVideoPolicy retrieves the value of the VideoPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetOrCreateVideoPolicy() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy {
	if t.VideoPolicy != nil {
		return t.VideoPolicy
	}
	t.VideoPolicy = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy{}
	return t.VideoPolicy
}

// GetVideoPolicy returns the value of the VideoPolicy struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy. If the receiver or the field VideoPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetVideoPolicy() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy {
	if t != nil && t.VideoPolicy != nil {
		return t.VideoPolicy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VideoPolicy.PopulateDefaults()
	for _, e := range t.Bundle {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle struct {
	AdminBw                *uint32                                                                                                                                                        `path:"admin-bw" module:"nokia-conf"`
	ApplyGroups            []string                                                                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	BundleName             *string                                                                                                                                                        `path:"bundle-name" module:"nokia-conf"`
	BwActivity             *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity                                                                                 `path:"bw-activity" module:"nokia-conf"`
	Channel                map[NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel `path:"channel" module:"nokia-conf"`
	CongPriorityThreshold  *uint32                                                                                                                                                        `path:"cong-priority-threshold" module:"nokia-conf"`
	Description            *string                                                                                                                                                        `path:"description" module:"nokia-conf"`
	EcmpOptThreshold       *uint32                                                                                                                                                        `path:"ecmp-opt-threshold" module:"nokia-conf"`
	ExplicitSfPath         E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_ExplicitSfPath                                                                            `path:"explicit-sf-path" module:"nokia-conf"`
	KeepaliveOverride      *uint32                                                                                                                                                        `path:"keepalive-override" module:"nokia-conf"`
	Preference             *uint32                                                                                                                                                        `path:"preference" module:"nokia-conf"`
	PrimaryTunnelInterface *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface                                                                     `path:"primary-tunnel-interface" module:"nokia-conf"`
	Video                  *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video                                                                                      `path:"video" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) IsYANGGoStruct() {}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key represents the key for list Channel of element /nokia-conf/configure/multicast-management/multicast-info-policy/bundle.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewChannel creates a new entry in the Channel list of the
// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) NewChannel(Start string, End string) (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel)
	}

	key := NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel{
		Start: &Start,
		End:   &End,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) RenameChannel(oldK, newK NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetOrCreateChannel(Start string, End string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel {

	key := NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetChannel(Start string, End string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) DeleteChannel(Start string, End string) {
	key := NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Channel, key)
}

// AppendChannel appends the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel struct to the
// list Channel of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) AppendChannel(v *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Key]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// GetOrCreateBwActivity retrieves the value of the BwActivity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetOrCreateBwActivity() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity {
	if t.BwActivity != nil {
		return t.BwActivity
	}
	t.BwActivity = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity{}
	return t.BwActivity
}

// GetOrCreatePrimaryTunnelInterface retrieves the value of the PrimaryTunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetOrCreatePrimaryTunnelInterface() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface {
	if t.PrimaryTunnelInterface != nil {
		return t.PrimaryTunnelInterface
	}
	t.PrimaryTunnelInterface = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface{}
	return t.PrimaryTunnelInterface
}

// GetOrCreateVideo retrieves the value of the Video field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetOrCreateVideo() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video {
	if t.Video != nil {
		return t.Video
	}
	t.Video = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video{}
	return t.Video
}

// GetBwActivity returns the value of the BwActivity struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If the receiver or the field BwActivity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetBwActivity() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity {
	if t != nil && t.BwActivity != nil {
		return t.BwActivity
	}
	return nil
}

// GetPrimaryTunnelInterface returns the value of the PrimaryTunnelInterface struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If the receiver or the field PrimaryTunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetPrimaryTunnelInterface() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface {
	if t != nil && t.PrimaryTunnelInterface != nil {
		return t.PrimaryTunnelInterface
	}
	return nil
}

// GetVideo returns the value of the Video struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle. If the receiver or the field Video is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetVideo() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video {
	if t != nil && t.Video != nil {
		return t.Video
	}
	return nil
}

// GetAdminBw retrieves the value of the leaf AdminBw from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminBw is set, it can
// safely use t.GetAdminBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminBw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetAdminBw() uint32 {
	if t == nil || t.AdminBw == nil {
		return 0
	}
	return *t.AdminBw
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBundleName retrieves the value of the leaf BundleName from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BundleName is set, it can
// safely use t.GetBundleName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BundleName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetBundleName() string {
	if t == nil || t.BundleName == nil {
		return ""
	}
	return *t.BundleName
}

// GetCongPriorityThreshold retrieves the value of the leaf CongPriorityThreshold from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CongPriorityThreshold is set, it can
// safely use t.GetCongPriorityThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CongPriorityThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetCongPriorityThreshold() uint32 {
	if t == nil || t.CongPriorityThreshold == nil {
		return 4
	}
	return *t.CongPriorityThreshold
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEcmpOptThreshold retrieves the value of the leaf EcmpOptThreshold from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpOptThreshold is set, it can
// safely use t.GetEcmpOptThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpOptThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetEcmpOptThreshold() uint32 {
	if t == nil || t.EcmpOptThreshold == nil {
		return 7
	}
	return *t.EcmpOptThreshold
}

// GetExplicitSfPath retrieves the value of the leaf ExplicitSfPath from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitSfPath is set, it can
// safely use t.GetExplicitSfPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitSfPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetExplicitSfPath() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_ExplicitSfPath {
	if t == nil || t.ExplicitSfPath == 0 {
		return 0
	}
	return t.ExplicitSfPath
}

// GetKeepaliveOverride retrieves the value of the leaf KeepaliveOverride from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveOverride is set, it can
// safely use t.GetKeepaliveOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetKeepaliveOverride() uint32 {
	if t == nil || t.KeepaliveOverride == nil {
		return 0
	}
	return *t.KeepaliveOverride
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CongPriorityThreshold == nil {
		var v uint32 = 4
		t.CongPriorityThreshold = &v
	}
	if t.EcmpOptThreshold == nil {
		var v uint32 = 7
		t.EcmpOptThreshold = &v
	}
	t.BwActivity.PopulateDefaults()
	t.PrimaryTunnelInterface.PopulateDefaults()
	t.Video.PopulateDefaults()
	for _, e := range t.Channel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BundleName == nil {
		return nil, fmt.Errorf("nil value for key BundleName")
	}

	return map[string]interface{}{
		"bundle-name": *t.BundleName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/bw-activity YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity struct {
	BlackHoleRate  *uint32                                                                                        `path:"black-hole-rate" module:"nokia-conf"`
	BwActivityType E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity_BwActivityType `path:"bw-activity-type" module:"nokia-conf"`
	FallingDelay   *uint32                                                                                        `path:"falling-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) IsYANGGoStruct() {
}

// GetBlackHoleRate retrieves the value of the leaf BlackHoleRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackHoleRate is set, it can
// safely use t.GetBlackHoleRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackHoleRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) GetBlackHoleRate() uint32 {
	if t == nil || t.BlackHoleRate == nil {
		return 0
	}
	return *t.BlackHoleRate
}

// GetBwActivityType retrieves the value of the leaf BwActivityType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BwActivityType is set, it can
// safely use t.GetBwActivityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BwActivityType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) GetBwActivityType() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity_BwActivityType {
	if t == nil || t.BwActivityType == 0 {
		return NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity_BwActivityType_dynamic
	}
	return t.BwActivityType
}

// GetFallingDelay retrieves the value of the leaf FallingDelay from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingDelay is set, it can
// safely use t.GetFallingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) GetFallingDelay() uint32 {
	if t == nil || t.FallingDelay == nil {
		return 30
	}
	return *t.FallingDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BwActivityType == 0 {
		t.BwActivityType = NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity_BwActivityType_dynamic
	}
	if t.FallingDelay == nil {
		var v uint32 = 30
		t.FallingDelay = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_BwActivity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel struct {
	AdminBw                *uint32                                                                                               `path:"admin-bw" module:"nokia-conf"`
	ApplyGroups            []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	BwActivity             *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity                `path:"bw-activity" module:"nokia-conf"`
	End                    *string                                                                                               `path:"end" module:"nokia-conf"`
	ExplicitSfPath         E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_ExplicitSfPath           `path:"explicit-sf-path" module:"nokia-conf"`
	KeepaliveOverride      *uint32                                                                                               `path:"keepalive-override" module:"nokia-conf"`
	Preference             *uint32                                                                                               `path:"preference" module:"nokia-conf"`
	PrimaryTunnelInterface *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface    `path:"primary-tunnel-interface" module:"nokia-conf"`
	SourceOverride         map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride `path:"source-override" module:"nokia-conf"`
	Start                  *string                                                                                               `path:"start" module:"nokia-conf"`
	Video                  *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video                     `path:"video" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) IsYANGGoStruct() {}

// NewSourceOverride creates a new entry in the SourceOverride list of the
// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) NewSourceOverride(IpAddress string) (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceOverride == nil {
		t.SourceOverride = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceOverride[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceOverride", key)
	}

	t.SourceOverride[key] = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride{
		IpAddress: &IpAddress,
	}

	return t.SourceOverride[key], nil
}

// RenameSourceOverride renames an entry in the list SourceOverride within
// the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) RenameSourceOverride(oldK, newK string) error {
	if _, ok := t.SourceOverride[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceOverride", newK)
	}

	e, ok := t.SourceOverride[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceOverride", oldK)
	}
	e.IpAddress = &newK

	t.SourceOverride[newK] = e
	delete(t.SourceOverride, oldK)
	return nil
}

// GetOrCreateSourceOverride retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetOrCreateSourceOverride(IpAddress string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride {

	key := IpAddress

	if v, ok := t.SourceOverride[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceOverride(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceOverride got unexpected error: %v", err))
	}
	return v
}

// GetSourceOverride retrieves the value with the specified key from
// the SourceOverride map field of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetSourceOverride(IpAddress string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.SourceOverride[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceOverride deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) DeleteSourceOverride(IpAddress string) {
	key := IpAddress

	delete(t.SourceOverride, key)
}

// AppendSourceOverride appends the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride struct to the
// list SourceOverride of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) AppendSourceOverride(v *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceOverride == nil {
		t.SourceOverride = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride)
	}

	if _, ok := t.SourceOverride[key]; ok {
		return fmt.Errorf("duplicate key for list SourceOverride %v", key)
	}

	t.SourceOverride[key] = v
	return nil
}

// GetOrCreateBwActivity retrieves the value of the BwActivity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetOrCreateBwActivity() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity {
	if t.BwActivity != nil {
		return t.BwActivity
	}
	t.BwActivity = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity{}
	return t.BwActivity
}

// GetOrCreatePrimaryTunnelInterface retrieves the value of the PrimaryTunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetOrCreatePrimaryTunnelInterface() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface {
	if t.PrimaryTunnelInterface != nil {
		return t.PrimaryTunnelInterface
	}
	t.PrimaryTunnelInterface = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface{}
	return t.PrimaryTunnelInterface
}

// GetOrCreateVideo retrieves the value of the Video field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetOrCreateVideo() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video {
	if t.Video != nil {
		return t.Video
	}
	t.Video = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video{}
	return t.Video
}

// GetBwActivity returns the value of the BwActivity struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If the receiver or the field BwActivity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetBwActivity() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity {
	if t != nil && t.BwActivity != nil {
		return t.BwActivity
	}
	return nil
}

// GetPrimaryTunnelInterface returns the value of the PrimaryTunnelInterface struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If the receiver or the field PrimaryTunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetPrimaryTunnelInterface() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface {
	if t != nil && t.PrimaryTunnelInterface != nil {
		return t.PrimaryTunnelInterface
	}
	return nil
}

// GetVideo returns the value of the Video struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel. If the receiver or the field Video is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetVideo() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video {
	if t != nil && t.Video != nil {
		return t.Video
	}
	return nil
}

// GetAdminBw retrieves the value of the leaf AdminBw from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminBw is set, it can
// safely use t.GetAdminBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminBw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetAdminBw() uint32 {
	if t == nil || t.AdminBw == nil {
		return 0
	}
	return *t.AdminBw
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetExplicitSfPath retrieves the value of the leaf ExplicitSfPath from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitSfPath is set, it can
// safely use t.GetExplicitSfPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitSfPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetExplicitSfPath() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_ExplicitSfPath {
	if t == nil || t.ExplicitSfPath == 0 {
		return 0
	}
	return t.ExplicitSfPath
}

// GetKeepaliveOverride retrieves the value of the leaf KeepaliveOverride from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveOverride is set, it can
// safely use t.GetKeepaliveOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetKeepaliveOverride() uint32 {
	if t == nil || t.KeepaliveOverride == nil {
		return 0
	}
	return *t.KeepaliveOverride
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BwActivity.PopulateDefaults()
	t.PrimaryTunnelInterface.PopulateDefaults()
	t.Video.PopulateDefaults()
	for _, e := range t.SourceOverride {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/bw-activity YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity struct {
	BlackHoleRate  *uint32                                                                                                `path:"black-hole-rate" module:"nokia-conf"`
	BwActivityType E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity_BwActivityType `path:"bw-activity-type" module:"nokia-conf"`
	FallingDelay   *uint32                                                                                                `path:"falling-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) IsYANGGoStruct() {
}

// GetBlackHoleRate retrieves the value of the leaf BlackHoleRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackHoleRate is set, it can
// safely use t.GetBlackHoleRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackHoleRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) GetBlackHoleRate() uint32 {
	if t == nil || t.BlackHoleRate == nil {
		return 0
	}
	return *t.BlackHoleRate
}

// GetBwActivityType retrieves the value of the leaf BwActivityType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BwActivityType is set, it can
// safely use t.GetBwActivityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BwActivityType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) GetBwActivityType() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity_BwActivityType {
	if t == nil || t.BwActivityType == 0 {
		return 0
	}
	return t.BwActivityType
}

// GetFallingDelay retrieves the value of the leaf FallingDelay from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingDelay is set, it can
// safely use t.GetFallingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) GetFallingDelay() uint32 {
	if t == nil || t.FallingDelay == nil {
		return 0
	}
	return *t.FallingDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlackHoleRate == nil {
		var v uint32 = 0
		t.BlackHoleRate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_BwActivity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/primary-tunnel-interface YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface struct {
	LdpP2Mp  *uint32 `path:"ldp-p2mp" module:"nokia-conf"`
	RsvpP2Mp *string `path:"rsvp-p2mp" module:"nokia-conf"`
	Sender   *string `path:"sender" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) IsYANGGoStruct() {
}

// GetLdpP2Mp retrieves the value of the leaf LdpP2Mp from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpP2Mp is set, it can
// safely use t.GetLdpP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpP2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) GetLdpP2Mp() uint32 {
	if t == nil || t.LdpP2Mp == nil {
		return 0
	}
	return *t.LdpP2Mp
}

// GetRsvpP2Mp retrieves the value of the leaf RsvpP2Mp from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpP2Mp is set, it can
// safely use t.GetRsvpP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpP2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) GetRsvpP2Mp() string {
	if t == nil || t.RsvpP2Mp == nil {
		return ""
	}
	return *t.RsvpP2Mp
}

// GetSender retrieves the value of the leaf Sender from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sender is set, it can
// safely use t.GetSender() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sender == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) GetSender() string {
	if t == nil || t.Sender == nil {
		return ""
	}
	return *t.Sender
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_PrimaryTunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride struct {
	AdminBw                *uint32                                                                                                           `path:"admin-bw" module:"nokia-conf"`
	ApplyGroups            []string                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	BwActivity             *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity             `path:"bw-activity" module:"nokia-conf"`
	ExplicitSfPath         E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_ExplicitSfPath        `path:"explicit-sf-path" module:"nokia-conf"`
	IpAddress              *string                                                                                                           `path:"ip-address" module:"nokia-conf"`
	KeepaliveOverride      *uint32                                                                                                           `path:"keepalive-override" module:"nokia-conf"`
	Preference             *uint32                                                                                                           `path:"preference" module:"nokia-conf"`
	PrimaryTunnelInterface *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface `path:"primary-tunnel-interface" module:"nokia-conf"`
	Video                  *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video                  `path:"video" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) IsYANGGoStruct() {
}

// GetOrCreateBwActivity retrieves the value of the BwActivity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetOrCreateBwActivity() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity {
	if t.BwActivity != nil {
		return t.BwActivity
	}
	t.BwActivity = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity{}
	return t.BwActivity
}

// GetOrCreatePrimaryTunnelInterface retrieves the value of the PrimaryTunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetOrCreatePrimaryTunnelInterface() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface {
	if t.PrimaryTunnelInterface != nil {
		return t.PrimaryTunnelInterface
	}
	t.PrimaryTunnelInterface = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface{}
	return t.PrimaryTunnelInterface
}

// GetOrCreateVideo retrieves the value of the Video field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetOrCreateVideo() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video {
	if t.Video != nil {
		return t.Video
	}
	t.Video = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video{}
	return t.Video
}

// GetBwActivity returns the value of the BwActivity struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride. If the receiver or the field BwActivity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetBwActivity() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity {
	if t != nil && t.BwActivity != nil {
		return t.BwActivity
	}
	return nil
}

// GetPrimaryTunnelInterface returns the value of the PrimaryTunnelInterface struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride. If the receiver or the field PrimaryTunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetPrimaryTunnelInterface() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface {
	if t != nil && t.PrimaryTunnelInterface != nil {
		return t.PrimaryTunnelInterface
	}
	return nil
}

// GetVideo returns the value of the Video struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride. If the receiver or the field Video is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetVideo() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video {
	if t != nil && t.Video != nil {
		return t.Video
	}
	return nil
}

// GetAdminBw retrieves the value of the leaf AdminBw from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminBw is set, it can
// safely use t.GetAdminBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminBw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetAdminBw() uint32 {
	if t == nil || t.AdminBw == nil {
		return 0
	}
	return *t.AdminBw
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExplicitSfPath retrieves the value of the leaf ExplicitSfPath from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitSfPath is set, it can
// safely use t.GetExplicitSfPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitSfPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetExplicitSfPath() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_ExplicitSfPath {
	if t == nil || t.ExplicitSfPath == 0 {
		return 0
	}
	return t.ExplicitSfPath
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetKeepaliveOverride retrieves the value of the leaf KeepaliveOverride from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveOverride is set, it can
// safely use t.GetKeepaliveOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetKeepaliveOverride() uint32 {
	if t == nil || t.KeepaliveOverride == nil {
		return 0
	}
	return *t.KeepaliveOverride
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BwActivity.PopulateDefaults()
	t.PrimaryTunnelInterface.PopulateDefaults()
	t.Video.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/bw-activity YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity struct {
	BlackHoleRate  *uint32                                                                                                               `path:"black-hole-rate" module:"nokia-conf"`
	BwActivityType E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity_BwActivityType `path:"bw-activity-type" module:"nokia-conf"`
	FallingDelay   *uint32                                                                                                               `path:"falling-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) IsYANGGoStruct() {
}

// GetBlackHoleRate retrieves the value of the leaf BlackHoleRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackHoleRate is set, it can
// safely use t.GetBlackHoleRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackHoleRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) GetBlackHoleRate() uint32 {
	if t == nil || t.BlackHoleRate == nil {
		return 0
	}
	return *t.BlackHoleRate
}

// GetBwActivityType retrieves the value of the leaf BwActivityType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BwActivityType is set, it can
// safely use t.GetBwActivityType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BwActivityType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) GetBwActivityType() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity_BwActivityType {
	if t == nil || t.BwActivityType == 0 {
		return 0
	}
	return t.BwActivityType
}

// GetFallingDelay retrieves the value of the leaf FallingDelay from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingDelay is set, it can
// safely use t.GetFallingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) GetFallingDelay() uint32 {
	if t == nil || t.FallingDelay == nil {
		return 0
	}
	return *t.FallingDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlackHoleRate == nil {
		var v uint32 = 0
		t.BlackHoleRate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_BwActivity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/primary-tunnel-interface YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface struct {
	LdpP2Mp  *uint32 `path:"ldp-p2mp" module:"nokia-conf"`
	RsvpP2Mp *string `path:"rsvp-p2mp" module:"nokia-conf"`
	Sender   *string `path:"sender" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) IsYANGGoStruct() {
}

// GetLdpP2Mp retrieves the value of the leaf LdpP2Mp from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpP2Mp is set, it can
// safely use t.GetLdpP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpP2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) GetLdpP2Mp() uint32 {
	if t == nil || t.LdpP2Mp == nil {
		return 0
	}
	return *t.LdpP2Mp
}

// GetRsvpP2Mp retrieves the value of the leaf RsvpP2Mp from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpP2Mp is set, it can
// safely use t.GetRsvpP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpP2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) GetRsvpP2Mp() string {
	if t == nil || t.RsvpP2Mp == nil {
		return ""
	}
	return *t.RsvpP2Mp
}

// GetSender retrieves the value of the leaf Sender from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sender is set, it can
// safely use t.GetSender() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sender == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) GetSender() string {
	if t == nil || t.Sender == nil {
		return ""
	}
	return *t.Sender
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_PrimaryTunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video struct {
	Analyzer        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer        `path:"analyzer" module:"nokia-conf" yangPresence:"true"`
	FccChannelType  E_NokiaTypesMcastMgmt_ChannelTypeWithInherit                                                                     `path:"fcc-channel-type" module:"nokia-conf"`
	FccMinDuration  *uint32                                                                                                          `path:"fcc-min-duration" module:"nokia-conf"`
	FccServer       E_NokiaTypesSros_BoolWithInherit                                                                                 `path:"fcc-server" module:"nokia-conf"`
	LocalRtServer   E_NokiaTypesSros_BoolWithInherit                                                                                 `path:"local-rt-server" module:"nokia-conf"`
	ReorderAudio    *uint32                                                                                                          `path:"reorder-audio" module:"nokia-conf"`
	RtBufferSize    *uint32                                                                                                          `path:"rt-buffer-size" module:"nokia-conf"`
	RtServer        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer        `path:"rt-server" module:"nokia-conf"`
	StreamSelection *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection `path:"stream-selection" module:"nokia-conf"`
	VideoGroup      NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_VideoGroup_Union `path:"video-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) IsYANGGoStruct() {
}

// GetOrCreateAnalyzer retrieves the value of the Analyzer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetOrCreateAnalyzer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer {
	if t.Analyzer != nil {
		return t.Analyzer
	}
	t.Analyzer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer{}
	return t.Analyzer
}

// GetOrCreateRtServer retrieves the value of the RtServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetOrCreateRtServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer {
	if t.RtServer != nil {
		return t.RtServer
	}
	t.RtServer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer{}
	return t.RtServer
}

// GetOrCreateStreamSelection retrieves the value of the StreamSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetOrCreateStreamSelection() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection {
	if t.StreamSelection != nil {
		return t.StreamSelection
	}
	t.StreamSelection = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection{}
	return t.StreamSelection
}

// GetAnalyzer returns the value of the Analyzer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video. If the receiver or the field Analyzer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetAnalyzer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer {
	if t != nil && t.Analyzer != nil {
		return t.Analyzer
	}
	return nil
}

// GetRtServer returns the value of the RtServer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video. If the receiver or the field RtServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetRtServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer {
	if t != nil && t.RtServer != nil {
		return t.RtServer
	}
	return nil
}

// GetStreamSelection returns the value of the StreamSelection struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video. If the receiver or the field StreamSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetStreamSelection() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection {
	if t != nil && t.StreamSelection != nil {
		return t.StreamSelection
	}
	return nil
}

// GetFccChannelType retrieves the value of the leaf FccChannelType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccChannelType is set, it can
// safely use t.GetFccChannelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccChannelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetFccChannelType() E_NokiaTypesMcastMgmt_ChannelTypeWithInherit {
	if t == nil || t.FccChannelType == 0 {
		return 0
	}
	return t.FccChannelType
}

// GetFccMinDuration retrieves the value of the leaf FccMinDuration from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccMinDuration is set, it can
// safely use t.GetFccMinDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccMinDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetFccMinDuration() uint32 {
	if t == nil || t.FccMinDuration == nil {
		return 0
	}
	return *t.FccMinDuration
}

// GetFccServer retrieves the value of the leaf FccServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccServer is set, it can
// safely use t.GetFccServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetFccServer() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.FccServer == 0 {
		return 0
	}
	return t.FccServer
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetLocalRtServer() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LocalRtServer == 0 {
		return 0
	}
	return t.LocalRtServer
}

// GetReorderAudio retrieves the value of the leaf ReorderAudio from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReorderAudio is set, it can
// safely use t.GetReorderAudio() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReorderAudio == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetReorderAudio() uint32 {
	if t == nil || t.ReorderAudio == nil {
		return 0
	}
	return *t.ReorderAudio
}

// GetRtBufferSize retrieves the value of the leaf RtBufferSize from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtBufferSize is set, it can
// safely use t.GetRtBufferSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtBufferSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetRtBufferSize() uint32 {
	if t == nil || t.RtBufferSize == nil {
		return 300
	}
	return *t.RtBufferSize
}

// GetVideoGroup retrieves the value of the leaf VideoGroup from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VideoGroup is set, it can
// safely use t.GetVideoGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VideoGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) GetVideoGroup() NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_VideoGroup_Union {
	if t == nil || t.VideoGroup == nil {
		return nil
	}
	return t.VideoGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RtBufferSize == nil {
		var v uint32 = 300
		t.RtBufferSize = &v
	}
	t.Analyzer.PopulateDefaults()
	t.RtServer.PopulateDefaults()
	t.StreamSelection.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/analyzer YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer struct {
	Alarms      *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms `path:"alarms" module:"nokia-conf"`
	Description *string                                                                                                          `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) IsYANGGoStruct() {
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) GetOrCreateAlarms() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms{}
	return t.Alarms
}

// GetAlarms returns the value of the Alarms struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) GetAlarms() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Alarms.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/analyzer/alarms YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms struct {
	CcError         *bool                                                                                                                          `path:"cc-error" module:"nokia-conf"`
	NonVidPidAbsent *uint32                                                                                                                        `path:"non-vid-pid-absent" module:"nokia-conf"`
	PatRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition `path:"pat-repetition" module:"nokia-conf" yangPresence:"true"`
	PatSyntax       *bool                                                                                                                          `path:"pat-syntax" module:"nokia-conf"`
	PcrRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition `path:"pcr-repetition" module:"nokia-conf" yangPresence:"true"`
	PidPmtUnref     *bool                                                                                                                          `path:"pid-pmt-unref" module:"nokia-conf"`
	PmtRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition `path:"pmt-repetition" module:"nokia-conf" yangPresence:"true"`
	PmtSyntax       *bool                                                                                                                          `path:"pmt-syntax" module:"nokia-conf"`
	ReportAlarm     *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm   `path:"report-alarm" module:"nokia-conf"`
	TeiSet          *bool                                                                                                                          `path:"tei-set" module:"nokia-conf"`
	TsSyncLoss      *bool                                                                                                                          `path:"ts-sync-loss" module:"nokia-conf"`
	VidPidAbsent    *uint32                                                                                                                        `path:"vid-pid-absent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) IsYANGGoStruct() {
}

// GetOrCreatePatRepetition retrieves the value of the PatRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetOrCreatePatRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition {
	if t.PatRepetition != nil {
		return t.PatRepetition
	}
	t.PatRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition{}
	return t.PatRepetition
}

// GetOrCreatePcrRepetition retrieves the value of the PcrRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetOrCreatePcrRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition {
	if t.PcrRepetition != nil {
		return t.PcrRepetition
	}
	t.PcrRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition{}
	return t.PcrRepetition
}

// GetOrCreatePmtRepetition retrieves the value of the PmtRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetOrCreatePmtRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition {
	if t.PmtRepetition != nil {
		return t.PmtRepetition
	}
	t.PmtRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition{}
	return t.PmtRepetition
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetOrCreateReportAlarm() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm{}
	return t.ReportAlarm
}

// GetPatRepetition returns the value of the PatRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms. If the receiver or the field PatRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetPatRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition {
	if t != nil && t.PatRepetition != nil {
		return t.PatRepetition
	}
	return nil
}

// GetPcrRepetition returns the value of the PcrRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms. If the receiver or the field PcrRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetPcrRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition {
	if t != nil && t.PcrRepetition != nil {
		return t.PcrRepetition
	}
	return nil
}

// GetPmtRepetition returns the value of the PmtRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms. If the receiver or the field PmtRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetPmtRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition {
	if t != nil && t.PmtRepetition != nil {
		return t.PmtRepetition
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetReportAlarm() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetCcError retrieves the value of the leaf CcError from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcError is set, it can
// safely use t.GetCcError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetCcError() bool {
	if t == nil || t.CcError == nil {
		return false
	}
	return *t.CcError
}

// GetNonVidPidAbsent retrieves the value of the leaf NonVidPidAbsent from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonVidPidAbsent is set, it can
// safely use t.GetNonVidPidAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonVidPidAbsent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetNonVidPidAbsent() uint32 {
	if t == nil || t.NonVidPidAbsent == nil {
		return 0
	}
	return *t.NonVidPidAbsent
}

// GetPatSyntax retrieves the value of the leaf PatSyntax from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PatSyntax is set, it can
// safely use t.GetPatSyntax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PatSyntax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetPatSyntax() bool {
	if t == nil || t.PatSyntax == nil {
		return false
	}
	return *t.PatSyntax
}

// GetPidPmtUnref retrieves the value of the leaf PidPmtUnref from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PidPmtUnref is set, it can
// safely use t.GetPidPmtUnref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PidPmtUnref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetPidPmtUnref() bool {
	if t == nil || t.PidPmtUnref == nil {
		return false
	}
	return *t.PidPmtUnref
}

// GetPmtSyntax retrieves the value of the leaf PmtSyntax from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtSyntax is set, it can
// safely use t.GetPmtSyntax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtSyntax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetPmtSyntax() bool {
	if t == nil || t.PmtSyntax == nil {
		return false
	}
	return *t.PmtSyntax
}

// GetTeiSet retrieves the value of the leaf TeiSet from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeiSet is set, it can
// safely use t.GetTeiSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeiSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetTeiSet() bool {
	if t == nil || t.TeiSet == nil {
		return false
	}
	return *t.TeiSet
}

// GetTsSyncLoss retrieves the value of the leaf TsSyncLoss from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsSyncLoss is set, it can
// safely use t.GetTsSyncLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsSyncLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetTsSyncLoss() bool {
	if t == nil || t.TsSyncLoss == nil {
		return false
	}
	return *t.TsSyncLoss
}

// GetVidPidAbsent retrieves the value of the leaf VidPidAbsent from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VidPidAbsent is set, it can
// safely use t.GetVidPidAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VidPidAbsent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) GetVidPidAbsent() uint32 {
	if t == nil || t.VidPidAbsent == nil {
		return 0
	}
	return *t.VidPidAbsent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CcError == nil {
		var v bool = false
		t.CcError = &v
	}
	if t.PatSyntax == nil {
		var v bool = false
		t.PatSyntax = &v
	}
	if t.PidPmtUnref == nil {
		var v bool = false
		t.PidPmtUnref = &v
	}
	if t.PmtSyntax == nil {
		var v bool = false
		t.PmtSyntax = &v
	}
	if t.TeiSet == nil {
		var v bool = false
		t.TeiSet = &v
	}
	if t.TsSyncLoss == nil {
		var v bool = false
		t.TsSyncLoss = &v
	}
	t.PatRepetition.PopulateDefaults()
	t.PcrRepetition.PopulateDefaults()
	t.PmtRepetition.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/analyzer/alarms/pat-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 500
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 200
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 100
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 500
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 200
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 100
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PatRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/analyzer/alarms/pcr-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 500
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 200
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 100
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 500
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 200
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 100
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PcrRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/analyzer/alarms/pmt-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 2000
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 800
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 400
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 2000
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 800
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 400
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_PmtRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/analyzer/alarms/report-alarm YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm struct {
	Severity E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm_Severity `path:"severity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) IsYANGGoStruct() {
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) GetSeverity() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm_Severity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_Analyzer_Alarms_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/rt-server YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer struct {
	IpAddress *string                          `path:"ip-address" module:"nokia-conf"`
	Port      *uint32                          `path:"port" module:"nokia-conf"`
	RtState   E_NokiaTypesSros_BoolWithInherit `path:"rt-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetRtState retrieves the value of the leaf RtState from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtState is set, it can
// safely use t.GetRtState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) GetRtState() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.RtState == 0 {
		return 0
	}
	return t.RtState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_RtServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/source-override/video/stream-selection YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection struct {
	Intf1   *string `path:"intf1" module:"nokia-conf"`
	Intf2   *string `path:"intf2" module:"nokia-conf"`
	Source1 *string `path:"source1" module:"nokia-conf"`
	Source2 *string `path:"source2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) IsYANGGoStruct() {
}

// GetIntf1 retrieves the value of the leaf Intf1 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Intf1 is set, it can
// safely use t.GetIntf1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Intf1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) GetIntf1() string {
	if t == nil || t.Intf1 == nil {
		return ""
	}
	return *t.Intf1
}

// GetIntf2 retrieves the value of the leaf Intf2 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Intf2 is set, it can
// safely use t.GetIntf2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Intf2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) GetIntf2() string {
	if t == nil || t.Intf2 == nil {
		return ""
	}
	return *t.Intf2
}

// GetSource1 retrieves the value of the leaf Source1 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source1 is set, it can
// safely use t.GetSource1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) GetSource1() string {
	if t == nil || t.Source1 == nil {
		return ""
	}
	return *t.Source1
}

// GetSource2 retrieves the value of the leaf Source2 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source2 is set, it can
// safely use t.GetSource2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) GetSource2() string {
	if t == nil || t.Source2 == nil {
		return ""
	}
	return *t.Source2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_SourceOverride_Video_StreamSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video struct {
	Analyzer        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer        `path:"analyzer" module:"nokia-conf" yangPresence:"true"`
	FccChannelType  E_NokiaTypesMcastMgmt_ChannelTypeWithInherit                                                      `path:"fcc-channel-type" module:"nokia-conf"`
	FccMinDuration  *uint32                                                                                           `path:"fcc-min-duration" module:"nokia-conf"`
	FccServer       E_NokiaTypesSros_BoolWithInherit                                                                  `path:"fcc-server" module:"nokia-conf"`
	LocalRtServer   E_NokiaTypesSros_BoolWithInherit                                                                  `path:"local-rt-server" module:"nokia-conf"`
	ReorderAudio    *uint32                                                                                           `path:"reorder-audio" module:"nokia-conf"`
	RtBufferSize    *uint32                                                                                           `path:"rt-buffer-size" module:"nokia-conf"`
	RtServer        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer        `path:"rt-server" module:"nokia-conf"`
	StreamSelection *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection `path:"stream-selection" module:"nokia-conf"`
	VideoGroup      NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_VideoGroup_Union `path:"video-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) IsYANGGoStruct() {
}

// GetOrCreateAnalyzer retrieves the value of the Analyzer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetOrCreateAnalyzer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer {
	if t.Analyzer != nil {
		return t.Analyzer
	}
	t.Analyzer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer{}
	return t.Analyzer
}

// GetOrCreateRtServer retrieves the value of the RtServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetOrCreateRtServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer {
	if t.RtServer != nil {
		return t.RtServer
	}
	t.RtServer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer{}
	return t.RtServer
}

// GetOrCreateStreamSelection retrieves the value of the StreamSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetOrCreateStreamSelection() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection {
	if t.StreamSelection != nil {
		return t.StreamSelection
	}
	t.StreamSelection = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection{}
	return t.StreamSelection
}

// GetAnalyzer returns the value of the Analyzer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video. If the receiver or the field Analyzer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetAnalyzer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer {
	if t != nil && t.Analyzer != nil {
		return t.Analyzer
	}
	return nil
}

// GetRtServer returns the value of the RtServer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video. If the receiver or the field RtServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetRtServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer {
	if t != nil && t.RtServer != nil {
		return t.RtServer
	}
	return nil
}

// GetStreamSelection returns the value of the StreamSelection struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video. If the receiver or the field StreamSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetStreamSelection() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection {
	if t != nil && t.StreamSelection != nil {
		return t.StreamSelection
	}
	return nil
}

// GetFccChannelType retrieves the value of the leaf FccChannelType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccChannelType is set, it can
// safely use t.GetFccChannelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccChannelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetFccChannelType() E_NokiaTypesMcastMgmt_ChannelTypeWithInherit {
	if t == nil || t.FccChannelType == 0 {
		return 0
	}
	return t.FccChannelType
}

// GetFccMinDuration retrieves the value of the leaf FccMinDuration from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccMinDuration is set, it can
// safely use t.GetFccMinDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccMinDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetFccMinDuration() uint32 {
	if t == nil || t.FccMinDuration == nil {
		return 0
	}
	return *t.FccMinDuration
}

// GetFccServer retrieves the value of the leaf FccServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccServer is set, it can
// safely use t.GetFccServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetFccServer() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.FccServer == 0 {
		return 0
	}
	return t.FccServer
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetLocalRtServer() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LocalRtServer == 0 {
		return 0
	}
	return t.LocalRtServer
}

// GetReorderAudio retrieves the value of the leaf ReorderAudio from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReorderAudio is set, it can
// safely use t.GetReorderAudio() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReorderAudio == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetReorderAudio() uint32 {
	if t == nil || t.ReorderAudio == nil {
		return 0
	}
	return *t.ReorderAudio
}

// GetRtBufferSize retrieves the value of the leaf RtBufferSize from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtBufferSize is set, it can
// safely use t.GetRtBufferSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtBufferSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetRtBufferSize() uint32 {
	if t == nil || t.RtBufferSize == nil {
		return 300
	}
	return *t.RtBufferSize
}

// GetVideoGroup retrieves the value of the leaf VideoGroup from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VideoGroup is set, it can
// safely use t.GetVideoGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VideoGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) GetVideoGroup() NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_VideoGroup_Union {
	if t == nil || t.VideoGroup == nil {
		return nil
	}
	return t.VideoGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RtBufferSize == nil {
		var v uint32 = 300
		t.RtBufferSize = &v
	}
	t.Analyzer.PopulateDefaults()
	t.RtServer.PopulateDefaults()
	t.StreamSelection.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/analyzer YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer struct {
	Alarms      *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms `path:"alarms" module:"nokia-conf"`
	Description *string                                                                                           `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) IsYANGGoStruct() {
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) GetOrCreateAlarms() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms{}
	return t.Alarms
}

// GetAlarms returns the value of the Alarms struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) GetAlarms() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Alarms.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/analyzer/alarms YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms struct {
	CcError         *bool                                                                                                           `path:"cc-error" module:"nokia-conf"`
	NonVidPidAbsent *uint32                                                                                                         `path:"non-vid-pid-absent" module:"nokia-conf"`
	PatRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition `path:"pat-repetition" module:"nokia-conf" yangPresence:"true"`
	PatSyntax       *bool                                                                                                           `path:"pat-syntax" module:"nokia-conf"`
	PcrRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition `path:"pcr-repetition" module:"nokia-conf" yangPresence:"true"`
	PidPmtUnref     *bool                                                                                                           `path:"pid-pmt-unref" module:"nokia-conf"`
	PmtRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition `path:"pmt-repetition" module:"nokia-conf" yangPresence:"true"`
	PmtSyntax       *bool                                                                                                           `path:"pmt-syntax" module:"nokia-conf"`
	ReportAlarm     *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm   `path:"report-alarm" module:"nokia-conf"`
	TeiSet          *bool                                                                                                           `path:"tei-set" module:"nokia-conf"`
	TsSyncLoss      *bool                                                                                                           `path:"ts-sync-loss" module:"nokia-conf"`
	VidPidAbsent    *uint32                                                                                                         `path:"vid-pid-absent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) IsYANGGoStruct() {
}

// GetOrCreatePatRepetition retrieves the value of the PatRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetOrCreatePatRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition {
	if t.PatRepetition != nil {
		return t.PatRepetition
	}
	t.PatRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition{}
	return t.PatRepetition
}

// GetOrCreatePcrRepetition retrieves the value of the PcrRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetOrCreatePcrRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition {
	if t.PcrRepetition != nil {
		return t.PcrRepetition
	}
	t.PcrRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition{}
	return t.PcrRepetition
}

// GetOrCreatePmtRepetition retrieves the value of the PmtRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetOrCreatePmtRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition {
	if t.PmtRepetition != nil {
		return t.PmtRepetition
	}
	t.PmtRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition{}
	return t.PmtRepetition
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetOrCreateReportAlarm() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm{}
	return t.ReportAlarm
}

// GetPatRepetition returns the value of the PatRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms. If the receiver or the field PatRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetPatRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition {
	if t != nil && t.PatRepetition != nil {
		return t.PatRepetition
	}
	return nil
}

// GetPcrRepetition returns the value of the PcrRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms. If the receiver or the field PcrRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetPcrRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition {
	if t != nil && t.PcrRepetition != nil {
		return t.PcrRepetition
	}
	return nil
}

// GetPmtRepetition returns the value of the PmtRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms. If the receiver or the field PmtRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetPmtRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition {
	if t != nil && t.PmtRepetition != nil {
		return t.PmtRepetition
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetReportAlarm() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetCcError retrieves the value of the leaf CcError from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcError is set, it can
// safely use t.GetCcError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetCcError() bool {
	if t == nil || t.CcError == nil {
		return false
	}
	return *t.CcError
}

// GetNonVidPidAbsent retrieves the value of the leaf NonVidPidAbsent from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonVidPidAbsent is set, it can
// safely use t.GetNonVidPidAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonVidPidAbsent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetNonVidPidAbsent() uint32 {
	if t == nil || t.NonVidPidAbsent == nil {
		return 0
	}
	return *t.NonVidPidAbsent
}

// GetPatSyntax retrieves the value of the leaf PatSyntax from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PatSyntax is set, it can
// safely use t.GetPatSyntax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PatSyntax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetPatSyntax() bool {
	if t == nil || t.PatSyntax == nil {
		return false
	}
	return *t.PatSyntax
}

// GetPidPmtUnref retrieves the value of the leaf PidPmtUnref from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PidPmtUnref is set, it can
// safely use t.GetPidPmtUnref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PidPmtUnref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetPidPmtUnref() bool {
	if t == nil || t.PidPmtUnref == nil {
		return false
	}
	return *t.PidPmtUnref
}

// GetPmtSyntax retrieves the value of the leaf PmtSyntax from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtSyntax is set, it can
// safely use t.GetPmtSyntax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtSyntax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetPmtSyntax() bool {
	if t == nil || t.PmtSyntax == nil {
		return false
	}
	return *t.PmtSyntax
}

// GetTeiSet retrieves the value of the leaf TeiSet from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeiSet is set, it can
// safely use t.GetTeiSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeiSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetTeiSet() bool {
	if t == nil || t.TeiSet == nil {
		return false
	}
	return *t.TeiSet
}

// GetTsSyncLoss retrieves the value of the leaf TsSyncLoss from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsSyncLoss is set, it can
// safely use t.GetTsSyncLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsSyncLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetTsSyncLoss() bool {
	if t == nil || t.TsSyncLoss == nil {
		return false
	}
	return *t.TsSyncLoss
}

// GetVidPidAbsent retrieves the value of the leaf VidPidAbsent from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VidPidAbsent is set, it can
// safely use t.GetVidPidAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VidPidAbsent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) GetVidPidAbsent() uint32 {
	if t == nil || t.VidPidAbsent == nil {
		return 0
	}
	return *t.VidPidAbsent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CcError == nil {
		var v bool = false
		t.CcError = &v
	}
	if t.PatSyntax == nil {
		var v bool = false
		t.PatSyntax = &v
	}
	if t.PidPmtUnref == nil {
		var v bool = false
		t.PidPmtUnref = &v
	}
	if t.PmtSyntax == nil {
		var v bool = false
		t.PmtSyntax = &v
	}
	if t.TeiSet == nil {
		var v bool = false
		t.TeiSet = &v
	}
	if t.TsSyncLoss == nil {
		var v bool = false
		t.TsSyncLoss = &v
	}
	t.PatRepetition.PopulateDefaults()
	t.PcrRepetition.PopulateDefaults()
	t.PmtRepetition.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/analyzer/alarms/pat-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 500
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 200
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 100
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 500
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 200
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 100
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PatRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/analyzer/alarms/pcr-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 500
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 200
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 100
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 500
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 200
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 100
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PcrRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/analyzer/alarms/pmt-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 2000
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 800
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 400
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 2000
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 800
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 400
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_PmtRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/analyzer/alarms/report-alarm YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm struct {
	Severity E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm_Severity `path:"severity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) IsYANGGoStruct() {
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) GetSeverity() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm_Severity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_Analyzer_Alarms_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/rt-server YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer struct {
	IpAddress *string                          `path:"ip-address" module:"nokia-conf"`
	Port      *uint32                          `path:"port" module:"nokia-conf"`
	RtState   E_NokiaTypesSros_BoolWithInherit `path:"rt-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetRtState retrieves the value of the leaf RtState from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtState is set, it can
// safely use t.GetRtState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) GetRtState() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.RtState == 0 {
		return 0
	}
	return t.RtState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_RtServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/channel/video/stream-selection YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection struct {
	Intf1   *string `path:"intf1" module:"nokia-conf"`
	Intf2   *string `path:"intf2" module:"nokia-conf"`
	Source1 *string `path:"source1" module:"nokia-conf"`
	Source2 *string `path:"source2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) IsYANGGoStruct() {
}

// GetIntf1 retrieves the value of the leaf Intf1 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Intf1 is set, it can
// safely use t.GetIntf1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Intf1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) GetIntf1() string {
	if t == nil || t.Intf1 == nil {
		return ""
	}
	return *t.Intf1
}

// GetIntf2 retrieves the value of the leaf Intf2 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Intf2 is set, it can
// safely use t.GetIntf2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Intf2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) GetIntf2() string {
	if t == nil || t.Intf2 == nil {
		return ""
	}
	return *t.Intf2
}

// GetSource1 retrieves the value of the leaf Source1 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source1 is set, it can
// safely use t.GetSource1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) GetSource1() string {
	if t == nil || t.Source1 == nil {
		return ""
	}
	return *t.Source1
}

// GetSource2 retrieves the value of the leaf Source2 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source2 is set, it can
// safely use t.GetSource2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) GetSource2() string {
	if t == nil || t.Source2 == nil {
		return ""
	}
	return *t.Source2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Channel_Video_StreamSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/primary-tunnel-interface YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface struct {
	LdpP2Mp  *uint32 `path:"ldp-p2mp" module:"nokia-conf"`
	RsvpP2Mp *string `path:"rsvp-p2mp" module:"nokia-conf"`
	Sender   *string `path:"sender" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) IsYANGGoStruct() {
}

// GetLdpP2Mp retrieves the value of the leaf LdpP2Mp from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpP2Mp is set, it can
// safely use t.GetLdpP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpP2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) GetLdpP2Mp() uint32 {
	if t == nil || t.LdpP2Mp == nil {
		return 0
	}
	return *t.LdpP2Mp
}

// GetRsvpP2Mp retrieves the value of the leaf RsvpP2Mp from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpP2Mp is set, it can
// safely use t.GetRsvpP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpP2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) GetRsvpP2Mp() string {
	if t == nil || t.RsvpP2Mp == nil {
		return ""
	}
	return *t.RsvpP2Mp
}

// GetSender retrieves the value of the leaf Sender from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sender is set, it can
// safely use t.GetSender() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sender == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) GetSender() string {
	if t == nil || t.Sender == nil {
		return ""
	}
	return *t.Sender
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_PrimaryTunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video struct {
	Analyzer        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer        `path:"analyzer" module:"nokia-conf" yangPresence:"true"`
	FccChannelType  E_NokiaTypesMcastMgmt_ChannelType                                                         `path:"fcc-channel-type" module:"nokia-conf"`
	FccMinDuration  *uint32                                                                                   `path:"fcc-min-duration" module:"nokia-conf"`
	FccServer       *bool                                                                                     `path:"fcc-server" module:"nokia-conf"`
	LocalFccPort    *uint32                                                                                   `path:"local-fcc-port" module:"nokia-conf"`
	LocalRtPort     *uint32                                                                                   `path:"local-rt-port" module:"nokia-conf"`
	LocalRtServer   *bool                                                                                     `path:"local-rt-server" module:"nokia-conf"`
	ReorderAudio    *uint32                                                                                   `path:"reorder-audio" module:"nokia-conf"`
	RtBufferSize    *uint32                                                                                   `path:"rt-buffer-size" module:"nokia-conf"`
	RtServer        *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer        `path:"rt-server" module:"nokia-conf" yangPresence:"true"`
	StreamSelection *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection `path:"stream-selection" module:"nokia-conf"`
	VideoGroup      *uint32                                                                                   `path:"video-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) IsYANGGoStruct() {}

// GetOrCreateAnalyzer retrieves the value of the Analyzer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetOrCreateAnalyzer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer {
	if t.Analyzer != nil {
		return t.Analyzer
	}
	t.Analyzer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer{}
	return t.Analyzer
}

// GetOrCreateRtServer retrieves the value of the RtServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetOrCreateRtServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer {
	if t.RtServer != nil {
		return t.RtServer
	}
	t.RtServer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer{}
	return t.RtServer
}

// GetOrCreateStreamSelection retrieves the value of the StreamSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetOrCreateStreamSelection() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection {
	if t.StreamSelection != nil {
		return t.StreamSelection
	}
	t.StreamSelection = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection{}
	return t.StreamSelection
}

// GetAnalyzer returns the value of the Analyzer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video. If the receiver or the field Analyzer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetAnalyzer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer {
	if t != nil && t.Analyzer != nil {
		return t.Analyzer
	}
	return nil
}

// GetRtServer returns the value of the RtServer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video. If the receiver or the field RtServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetRtServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer {
	if t != nil && t.RtServer != nil {
		return t.RtServer
	}
	return nil
}

// GetStreamSelection returns the value of the StreamSelection struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video. If the receiver or the field StreamSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetStreamSelection() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection {
	if t != nil && t.StreamSelection != nil {
		return t.StreamSelection
	}
	return nil
}

// GetFccChannelType retrieves the value of the leaf FccChannelType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccChannelType is set, it can
// safely use t.GetFccChannelType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccChannelType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetFccChannelType() E_NokiaTypesMcastMgmt_ChannelType {
	if t == nil || t.FccChannelType == 0 {
		return NokiaTypesMcastMgmt_ChannelType_hd
	}
	return t.FccChannelType
}

// GetFccMinDuration retrieves the value of the leaf FccMinDuration from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccMinDuration is set, it can
// safely use t.GetFccMinDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccMinDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetFccMinDuration() uint32 {
	if t == nil || t.FccMinDuration == nil {
		return 300
	}
	return *t.FccMinDuration
}

// GetFccServer retrieves the value of the leaf FccServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccServer is set, it can
// safely use t.GetFccServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetFccServer() bool {
	if t == nil || t.FccServer == nil {
		return false
	}
	return *t.FccServer
}

// GetLocalFccPort retrieves the value of the leaf LocalFccPort from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalFccPort is set, it can
// safely use t.GetLocalFccPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalFccPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetLocalFccPort() uint32 {
	if t == nil || t.LocalFccPort == nil {
		return 4098
	}
	return *t.LocalFccPort
}

// GetLocalRtPort retrieves the value of the leaf LocalRtPort from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtPort is set, it can
// safely use t.GetLocalRtPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetLocalRtPort() uint32 {
	if t == nil || t.LocalRtPort == nil {
		return 4096
	}
	return *t.LocalRtPort
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetLocalRtServer() bool {
	if t == nil || t.LocalRtServer == nil {
		return false
	}
	return *t.LocalRtServer
}

// GetReorderAudio retrieves the value of the leaf ReorderAudio from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReorderAudio is set, it can
// safely use t.GetReorderAudio() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReorderAudio == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetReorderAudio() uint32 {
	if t == nil || t.ReorderAudio == nil {
		return 0
	}
	return *t.ReorderAudio
}

// GetRtBufferSize retrieves the value of the leaf RtBufferSize from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtBufferSize is set, it can
// safely use t.GetRtBufferSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtBufferSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetRtBufferSize() uint32 {
	if t == nil || t.RtBufferSize == nil {
		return 300
	}
	return *t.RtBufferSize
}

// GetVideoGroup retrieves the value of the leaf VideoGroup from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VideoGroup is set, it can
// safely use t.GetVideoGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VideoGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) GetVideoGroup() uint32 {
	if t == nil || t.VideoGroup == nil {
		return 0
	}
	return *t.VideoGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FccChannelType == 0 {
		t.FccChannelType = NokiaTypesMcastMgmt_ChannelType_hd
	}
	if t.FccMinDuration == nil {
		var v uint32 = 300
		t.FccMinDuration = &v
	}
	if t.FccServer == nil {
		var v bool = false
		t.FccServer = &v
	}
	if t.LocalFccPort == nil {
		var v uint32 = 4098
		t.LocalFccPort = &v
	}
	if t.LocalRtPort == nil {
		var v uint32 = 4096
		t.LocalRtPort = &v
	}
	if t.LocalRtServer == nil {
		var v bool = false
		t.LocalRtServer = &v
	}
	if t.RtBufferSize == nil {
		var v uint32 = 300
		t.RtBufferSize = &v
	}
	t.Analyzer.PopulateDefaults()
	t.RtServer.PopulateDefaults()
	t.StreamSelection.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/analyzer YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer struct {
	Alarms      *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms `path:"alarms" module:"nokia-conf"`
	Description *string                                                                                   `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) IsYANGGoStruct() {
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) GetOrCreateAlarms() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms{}
	return t.Alarms
}

// GetAlarms returns the value of the Alarms struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) GetAlarms() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Alarms.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/analyzer/alarms YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms struct {
	CcError         *bool                                                                                                   `path:"cc-error" module:"nokia-conf"`
	NonVidPidAbsent *uint32                                                                                                 `path:"non-vid-pid-absent" module:"nokia-conf"`
	PatRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition `path:"pat-repetition" module:"nokia-conf" yangPresence:"true"`
	PatSyntax       *bool                                                                                                   `path:"pat-syntax" module:"nokia-conf"`
	PcrRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition `path:"pcr-repetition" module:"nokia-conf" yangPresence:"true"`
	PidPmtUnref     *bool                                                                                                   `path:"pid-pmt-unref" module:"nokia-conf"`
	PmtRepetition   *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition `path:"pmt-repetition" module:"nokia-conf" yangPresence:"true"`
	PmtSyntax       *bool                                                                                                   `path:"pmt-syntax" module:"nokia-conf"`
	ReportAlarm     *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm   `path:"report-alarm" module:"nokia-conf"`
	TeiSet          *bool                                                                                                   `path:"tei-set" module:"nokia-conf"`
	TsSyncLoss      *bool                                                                                                   `path:"ts-sync-loss" module:"nokia-conf"`
	VidPidAbsent    *uint32                                                                                                 `path:"vid-pid-absent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) IsYANGGoStruct() {
}

// GetOrCreatePatRepetition retrieves the value of the PatRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetOrCreatePatRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition {
	if t.PatRepetition != nil {
		return t.PatRepetition
	}
	t.PatRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition{}
	return t.PatRepetition
}

// GetOrCreatePcrRepetition retrieves the value of the PcrRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetOrCreatePcrRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition {
	if t.PcrRepetition != nil {
		return t.PcrRepetition
	}
	t.PcrRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition{}
	return t.PcrRepetition
}

// GetOrCreatePmtRepetition retrieves the value of the PmtRepetition field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetOrCreatePmtRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition {
	if t.PmtRepetition != nil {
		return t.PmtRepetition
	}
	t.PmtRepetition = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition{}
	return t.PmtRepetition
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetOrCreateReportAlarm() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm{}
	return t.ReportAlarm
}

// GetPatRepetition returns the value of the PatRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms. If the receiver or the field PatRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetPatRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition {
	if t != nil && t.PatRepetition != nil {
		return t.PatRepetition
	}
	return nil
}

// GetPcrRepetition returns the value of the PcrRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms. If the receiver or the field PcrRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetPcrRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition {
	if t != nil && t.PcrRepetition != nil {
		return t.PcrRepetition
	}
	return nil
}

// GetPmtRepetition returns the value of the PmtRepetition struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms. If the receiver or the field PmtRepetition is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetPmtRepetition() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition {
	if t != nil && t.PmtRepetition != nil {
		return t.PmtRepetition
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetReportAlarm() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetCcError retrieves the value of the leaf CcError from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcError is set, it can
// safely use t.GetCcError() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcError == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetCcError() bool {
	if t == nil || t.CcError == nil {
		return false
	}
	return *t.CcError
}

// GetNonVidPidAbsent retrieves the value of the leaf NonVidPidAbsent from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonVidPidAbsent is set, it can
// safely use t.GetNonVidPidAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonVidPidAbsent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetNonVidPidAbsent() uint32 {
	if t == nil || t.NonVidPidAbsent == nil {
		return 0
	}
	return *t.NonVidPidAbsent
}

// GetPatSyntax retrieves the value of the leaf PatSyntax from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PatSyntax is set, it can
// safely use t.GetPatSyntax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PatSyntax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetPatSyntax() bool {
	if t == nil || t.PatSyntax == nil {
		return false
	}
	return *t.PatSyntax
}

// GetPidPmtUnref retrieves the value of the leaf PidPmtUnref from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PidPmtUnref is set, it can
// safely use t.GetPidPmtUnref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PidPmtUnref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetPidPmtUnref() bool {
	if t == nil || t.PidPmtUnref == nil {
		return false
	}
	return *t.PidPmtUnref
}

// GetPmtSyntax retrieves the value of the leaf PmtSyntax from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtSyntax is set, it can
// safely use t.GetPmtSyntax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtSyntax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetPmtSyntax() bool {
	if t == nil || t.PmtSyntax == nil {
		return false
	}
	return *t.PmtSyntax
}

// GetTeiSet retrieves the value of the leaf TeiSet from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeiSet is set, it can
// safely use t.GetTeiSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeiSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetTeiSet() bool {
	if t == nil || t.TeiSet == nil {
		return false
	}
	return *t.TeiSet
}

// GetTsSyncLoss retrieves the value of the leaf TsSyncLoss from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsSyncLoss is set, it can
// safely use t.GetTsSyncLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsSyncLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetTsSyncLoss() bool {
	if t == nil || t.TsSyncLoss == nil {
		return false
	}
	return *t.TsSyncLoss
}

// GetVidPidAbsent retrieves the value of the leaf VidPidAbsent from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VidPidAbsent is set, it can
// safely use t.GetVidPidAbsent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VidPidAbsent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) GetVidPidAbsent() uint32 {
	if t == nil || t.VidPidAbsent == nil {
		return 0
	}
	return *t.VidPidAbsent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CcError == nil {
		var v bool = false
		t.CcError = &v
	}
	if t.PatSyntax == nil {
		var v bool = false
		t.PatSyntax = &v
	}
	if t.PidPmtUnref == nil {
		var v bool = false
		t.PidPmtUnref = &v
	}
	if t.PmtSyntax == nil {
		var v bool = false
		t.PmtSyntax = &v
	}
	if t.TeiSet == nil {
		var v bool = false
		t.TeiSet = &v
	}
	if t.TsSyncLoss == nil {
		var v bool = false
		t.TsSyncLoss = &v
	}
	t.PatRepetition.PopulateDefaults()
	t.PcrRepetition.PopulateDefaults()
	t.PmtRepetition.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/analyzer/alarms/pat-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 500
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 200
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 100
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 500
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 200
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 100
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PatRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/analyzer/alarms/pcr-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 500
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 200
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 100
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 500
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 200
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 100
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PcrRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/analyzer/alarms/pmt-repetition YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition struct {
	Poa *uint32 `path:"poa" module:"nokia-conf"`
	Qos *uint32 `path:"qos" module:"nokia-conf"`
	Tnc *uint32 `path:"tnc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) IsYANGGoStruct() {
}

// GetPoa retrieves the value of the leaf Poa from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Poa is set, it can
// safely use t.GetPoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Poa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) GetPoa() uint32 {
	if t == nil || t.Poa == nil {
		return 2000
	}
	return *t.Poa
}

// GetQos retrieves the value of the leaf Qos from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qos is set, it can
// safely use t.GetQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) GetQos() uint32 {
	if t == nil || t.Qos == nil {
		return 800
	}
	return *t.Qos
}

// GetTnc retrieves the value of the leaf Tnc from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tnc is set, it can
// safely use t.GetTnc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tnc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) GetTnc() uint32 {
	if t == nil || t.Tnc == nil {
		return 400
	}
	return *t.Tnc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Poa == nil {
		var v uint32 = 2000
		t.Poa = &v
	}
	if t.Qos == nil {
		var v uint32 = 800
		t.Qos = &v
	}
	if t.Tnc == nil {
		var v uint32 = 400
		t.Tnc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_PmtRepetition) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/analyzer/alarms/report-alarm YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm struct {
	Severity E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm_Severity `path:"severity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) IsYANGGoStruct() {
}

// GetSeverity retrieves the value of the leaf Severity from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) GetSeverity() E_NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm_Severity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_Analyzer_Alarms_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/rt-server YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	Port      *uint32 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_RtServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection represents the /nokia-conf/configure/multicast-management/multicast-info-policy/bundle/video/stream-selection YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection struct {
	Intf1   *string `path:"intf1" module:"nokia-conf"`
	Intf2   *string `path:"intf2" module:"nokia-conf"`
	Source1 *string `path:"source1" module:"nokia-conf"`
	Source2 *string `path:"source2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) IsYANGGoStruct() {
}

// GetIntf1 retrieves the value of the leaf Intf1 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Intf1 is set, it can
// safely use t.GetIntf1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Intf1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) GetIntf1() string {
	if t == nil || t.Intf1 == nil {
		return ""
	}
	return *t.Intf1
}

// GetIntf2 retrieves the value of the leaf Intf2 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Intf2 is set, it can
// safely use t.GetIntf2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Intf2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) GetIntf2() string {
	if t == nil || t.Intf2 == nil {
		return ""
	}
	return *t.Intf2
}

// GetSource1 retrieves the value of the leaf Source1 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source1 is set, it can
// safely use t.GetSource1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) GetSource1() string {
	if t == nil || t.Source1 == nil {
		return ""
	}
	return *t.Source1
}

// GetSource2 retrieves the value of the leaf Source2 from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source2 is set, it can
// safely use t.GetSource2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) GetSource2() string {
	if t == nil || t.Source2 == nil {
		return ""
	}
	return *t.Source2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_Bundle_Video_StreamSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy struct {
	VideoInterface map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface `path:"video-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) IsYANGGoStruct() {}

// NewVideoInterface creates a new entry in the VideoInterface list of the
// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) NewVideoInterface(IpAddress string) (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VideoInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VideoInterface", key)
	}

	t.VideoInterface[key] = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface{
		IpAddress: &IpAddress,
	}

	return t.VideoInterface[key], nil
}

// RenameVideoInterface renames an entry in the list VideoInterface within
// the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) RenameVideoInterface(oldK, newK string) error {
	if _, ok := t.VideoInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VideoInterface", newK)
	}

	e, ok := t.VideoInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VideoInterface", oldK)
	}
	e.IpAddress = &newK

	t.VideoInterface[newK] = e
	delete(t.VideoInterface, oldK)
	return nil
}

// GetOrCreateVideoInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) GetOrCreateVideoInterface(IpAddress string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface {

	key := IpAddress

	if v, ok := t.VideoInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVideoInterface(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVideoInterface got unexpected error: %v", err))
	}
	return v
}

// GetVideoInterface retrieves the value with the specified key from
// the VideoInterface map field of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) GetVideoInterface(IpAddress string) *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.VideoInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVideoInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) DeleteVideoInterface(IpAddress string) {
	key := IpAddress

	delete(t.VideoInterface, key)
}

// AppendVideoInterface appends the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface struct to the
// list VideoInterface of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) AppendVideoInterface(v *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface)
	}

	if _, ok := t.VideoInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VideoInterface %v", key)
	}

	t.VideoInterface[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.VideoInterface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ExtendedUnicast    *bool                                                                                       `path:"extended-unicast" module:"nokia-conf"`
	FccSessionTimeout  *uint32                                                                                     `path:"fcc-session-timeout" module:"nokia-conf"`
	Hd                 *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd  `path:"hd" module:"nokia-conf"`
	IpAddress          *string                                                                                     `path:"ip-address" module:"nokia-conf"`
	MaxIgmpLatency     *uint32                                                                                     `path:"max-igmp-latency" module:"nokia-conf"`
	MaxSessions        *uint32                                                                                     `path:"max-sessions" module:"nokia-conf"`
	Pip                *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip `path:"pip" module:"nokia-conf"`
	RetSessionTimeout  *uint32                                                                                     `path:"ret-session-timeout" module:"nokia-conf"`
	RtPayloadType      *uint32                                                                                     `path:"rt-payload-type" module:"nokia-conf"`
	RtRate             *uint32                                                                                     `path:"rt-rate" module:"nokia-conf"`
	Sd                 *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd  `path:"sd" module:"nokia-conf"`
	SubscriberBwLimit  *uint32                                                                                     `path:"subscriber-bw-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) IsYANGGoStruct() {
}

// GetOrCreateHd retrieves the value of the Hd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetOrCreateHd() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd {
	if t.Hd != nil {
		return t.Hd
	}
	t.Hd = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd{}
	return t.Hd
}

// GetOrCreatePip retrieves the value of the Pip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetOrCreatePip() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip {
	if t.Pip != nil {
		return t.Pip
	}
	t.Pip = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip{}
	return t.Pip
}

// GetOrCreateSd retrieves the value of the Sd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetOrCreateSd() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd {
	if t.Sd != nil {
		return t.Sd
	}
	t.Sd = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd{}
	return t.Sd
}

// GetHd returns the value of the Hd struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface. If the receiver or the field Hd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetHd() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd {
	if t != nil && t.Hd != nil {
		return t.Hd
	}
	return nil
}

// GetPip returns the value of the Pip struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface. If the receiver or the field Pip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetPip() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip {
	if t != nil && t.Pip != nil {
		return t.Pip
	}
	return nil
}

// GetSd returns the value of the Sd struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface. If the receiver or the field Sd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetSd() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd {
	if t != nil && t.Sd != nil {
		return t.Sd
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExtendedUnicast retrieves the value of the leaf ExtendedUnicast from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedUnicast is set, it can
// safely use t.GetExtendedUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedUnicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetExtendedUnicast() bool {
	if t == nil || t.ExtendedUnicast == nil {
		return false
	}
	return *t.ExtendedUnicast
}

// GetFccSessionTimeout retrieves the value of the leaf FccSessionTimeout from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccSessionTimeout is set, it can
// safely use t.GetFccSessionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccSessionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetFccSessionTimeout() uint32 {
	if t == nil || t.FccSessionTimeout == nil {
		return 300
	}
	return *t.FccSessionTimeout
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMaxIgmpLatency retrieves the value of the leaf MaxIgmpLatency from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIgmpLatency is set, it can
// safely use t.GetMaxIgmpLatency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIgmpLatency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetMaxIgmpLatency() uint32 {
	if t == nil || t.MaxIgmpLatency == nil {
		return 100
	}
	return *t.MaxIgmpLatency
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetMaxSessions() uint32 {
	if t == nil || t.MaxSessions == nil {
		return 256
	}
	return *t.MaxSessions
}

// GetRetSessionTimeout retrieves the value of the leaf RetSessionTimeout from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetSessionTimeout is set, it can
// safely use t.GetRetSessionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetSessionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetRetSessionTimeout() uint32 {
	if t == nil || t.RetSessionTimeout == nil {
		return 300
	}
	return *t.RetSessionTimeout
}

// GetRtPayloadType retrieves the value of the leaf RtPayloadType from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtPayloadType is set, it can
// safely use t.GetRtPayloadType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtPayloadType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetRtPayloadType() uint32 {
	if t == nil || t.RtPayloadType == nil {
		return 99
	}
	return *t.RtPayloadType
}

// GetRtRate retrieves the value of the leaf RtRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtRate is set, it can
// safely use t.GetRtRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetRtRate() uint32 {
	if t == nil || t.RtRate == nil {
		return 5
	}
	return *t.RtRate
}

// GetSubscriberBwLimit retrieves the value of the leaf SubscriberBwLimit from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberBwLimit is set, it can
// safely use t.GetSubscriberBwLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberBwLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) GetSubscriberBwLimit() uint32 {
	if t == nil || t.SubscriberBwLimit == nil {
		return 4294967295
	}
	return *t.SubscriberBwLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExtendedUnicast == nil {
		var v bool = false
		t.ExtendedUnicast = &v
	}
	if t.FccSessionTimeout == nil {
		var v uint32 = 300
		t.FccSessionTimeout = &v
	}
	if t.MaxIgmpLatency == nil {
		var v uint32 = 100
		t.MaxIgmpLatency = &v
	}
	if t.MaxSessions == nil {
		var v uint32 = 256
		t.MaxSessions = &v
	}
	if t.RetSessionTimeout == nil {
		var v uint32 = 300
		t.RetSessionTimeout = &v
	}
	if t.RtPayloadType == nil {
		var v uint32 = 99
		t.RtPayloadType = &v
	}
	if t.RtRate == nil {
		var v uint32 = 5
		t.RtRate = &v
	}
	if t.SubscriberBwLimit == nil {
		var v uint32 = 4294967295
		t.SubscriberBwLimit = &v
	}
	t.Hd.PopulateDefaults()
	t.Pip.PopulateDefaults()
	t.Sd.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface/hd YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	DentThreshold      *uint32                                                                                              `path:"dent-threshold" module:"nokia-conf"`
	FccBurst           *uint32                                                                                              `path:"fcc-burst" module:"nokia-conf"`
	FccServer          *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer `path:"fcc-server" module:"nokia-conf"`
	LocalRtServer      *bool                                                                                                `path:"local-rt-server" module:"nokia-conf"`
	McHandover         *uint32                                                                                              `path:"mc-handover" module:"nokia-conf"`
	RtRate             *uint32                                                                                              `path:"rt-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) IsYANGGoStruct() {
}

// GetOrCreateFccServer retrieves the value of the FccServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetOrCreateFccServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer {
	if t.FccServer != nil {
		return t.FccServer
	}
	t.FccServer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer{}
	return t.FccServer
}

// GetFccServer returns the value of the FccServer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd. If the receiver or the field FccServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetFccServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer {
	if t != nil && t.FccServer != nil {
		return t.FccServer
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDentThreshold retrieves the value of the leaf DentThreshold from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DentThreshold is set, it can
// safely use t.GetDentThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DentThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetDentThreshold() uint32 {
	if t == nil || t.DentThreshold == nil {
		return 16
	}
	return *t.DentThreshold
}

// GetFccBurst retrieves the value of the leaf FccBurst from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccBurst is set, it can
// safely use t.GetFccBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetFccBurst() uint32 {
	if t == nil || t.FccBurst == nil {
		return 25
	}
	return *t.FccBurst
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetLocalRtServer() bool {
	if t == nil || t.LocalRtServer == nil {
		return false
	}
	return *t.LocalRtServer
}

// GetMcHandover retrieves the value of the leaf McHandover from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McHandover is set, it can
// safely use t.GetMcHandover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McHandover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetMcHandover() uint32 {
	if t == nil || t.McHandover == nil {
		return 25
	}
	return *t.McHandover
}

// GetRtRate retrieves the value of the leaf RtRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtRate is set, it can
// safely use t.GetRtRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) GetRtRate() uint32 {
	if t == nil || t.RtRate == nil {
		return 5
	}
	return *t.RtRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DentThreshold == nil {
		var v uint32 = 16
		t.DentThreshold = &v
	}
	if t.FccBurst == nil {
		var v uint32 = 25
		t.FccBurst = &v
	}
	if t.LocalRtServer == nil {
		var v bool = false
		t.LocalRtServer = &v
	}
	if t.McHandover == nil {
		var v uint32 = 25
		t.McHandover = &v
	}
	if t.RtRate == nil {
		var v uint32 = 5
		t.RtRate = &v
	}
	t.FccServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface/hd/fcc-server YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer struct {
	Mode E_NokiaTypesMcastMgmt_Mode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) GetMode() E_NokiaTypesMcastMgmt_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Hd_FccServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface/pip YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip struct {
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DentThreshold      *uint32                                                                                               `path:"dent-threshold" module:"nokia-conf"`
	FccBurst           *uint32                                                                                               `path:"fcc-burst" module:"nokia-conf"`
	FccServer          *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer `path:"fcc-server" module:"nokia-conf"`
	LocalRtServer      *bool                                                                                                 `path:"local-rt-server" module:"nokia-conf"`
	McHandover         *uint32                                                                                               `path:"mc-handover" module:"nokia-conf"`
	RtRate             *uint32                                                                                               `path:"rt-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) IsYANGGoStruct() {
}

// GetOrCreateFccServer retrieves the value of the FccServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetOrCreateFccServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer {
	if t.FccServer != nil {
		return t.FccServer
	}
	t.FccServer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer{}
	return t.FccServer
}

// GetFccServer returns the value of the FccServer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip. If the receiver or the field FccServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetFccServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer {
	if t != nil && t.FccServer != nil {
		return t.FccServer
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDentThreshold retrieves the value of the leaf DentThreshold from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DentThreshold is set, it can
// safely use t.GetDentThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DentThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetDentThreshold() uint32 {
	if t == nil || t.DentThreshold == nil {
		return 16
	}
	return *t.DentThreshold
}

// GetFccBurst retrieves the value of the leaf FccBurst from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccBurst is set, it can
// safely use t.GetFccBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetFccBurst() uint32 {
	if t == nil || t.FccBurst == nil {
		return 25
	}
	return *t.FccBurst
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetLocalRtServer() bool {
	if t == nil || t.LocalRtServer == nil {
		return false
	}
	return *t.LocalRtServer
}

// GetMcHandover retrieves the value of the leaf McHandover from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McHandover is set, it can
// safely use t.GetMcHandover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McHandover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetMcHandover() uint32 {
	if t == nil || t.McHandover == nil {
		return 25
	}
	return *t.McHandover
}

// GetRtRate retrieves the value of the leaf RtRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtRate is set, it can
// safely use t.GetRtRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) GetRtRate() uint32 {
	if t == nil || t.RtRate == nil {
		return 5
	}
	return *t.RtRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DentThreshold == nil {
		var v uint32 = 16
		t.DentThreshold = &v
	}
	if t.FccBurst == nil {
		var v uint32 = 25
		t.FccBurst = &v
	}
	if t.LocalRtServer == nil {
		var v bool = false
		t.LocalRtServer = &v
	}
	if t.McHandover == nil {
		var v uint32 = 25
		t.McHandover = &v
	}
	if t.RtRate == nil {
		var v uint32 = 5
		t.RtRate = &v
	}
	t.FccServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface/pip/fcc-server YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer struct {
	Mode E_NokiaTypesMcastMgmt_Mode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) GetMode() E_NokiaTypesMcastMgmt_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Pip_FccServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface/sd YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	DentThreshold      *uint32                                                                                              `path:"dent-threshold" module:"nokia-conf"`
	FccBurst           *uint32                                                                                              `path:"fcc-burst" module:"nokia-conf"`
	FccServer          *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer `path:"fcc-server" module:"nokia-conf"`
	LocalRtServer      *bool                                                                                                `path:"local-rt-server" module:"nokia-conf"`
	McHandover         *uint32                                                                                              `path:"mc-handover" module:"nokia-conf"`
	RtRate             *uint32                                                                                              `path:"rt-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) IsYANGGoStruct() {
}

// GetOrCreateFccServer retrieves the value of the FccServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetOrCreateFccServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer {
	if t.FccServer != nil {
		return t.FccServer
	}
	t.FccServer = &NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer{}
	return t.FccServer
}

// GetFccServer returns the value of the FccServer struct pointer
// from NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd. If the receiver or the field FccServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetFccServer() *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer {
	if t != nil && t.FccServer != nil {
		return t.FccServer
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDentThreshold retrieves the value of the leaf DentThreshold from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DentThreshold is set, it can
// safely use t.GetDentThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DentThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetDentThreshold() uint32 {
	if t == nil || t.DentThreshold == nil {
		return 16
	}
	return *t.DentThreshold
}

// GetFccBurst retrieves the value of the leaf FccBurst from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccBurst is set, it can
// safely use t.GetFccBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetFccBurst() uint32 {
	if t == nil || t.FccBurst == nil {
		return 25
	}
	return *t.FccBurst
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetLocalRtServer() bool {
	if t == nil || t.LocalRtServer == nil {
		return false
	}
	return *t.LocalRtServer
}

// GetMcHandover retrieves the value of the leaf McHandover from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McHandover is set, it can
// safely use t.GetMcHandover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McHandover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetMcHandover() uint32 {
	if t == nil || t.McHandover == nil {
		return 25
	}
	return *t.McHandover
}

// GetRtRate retrieves the value of the leaf RtRate from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtRate is set, it can
// safely use t.GetRtRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) GetRtRate() uint32 {
	if t == nil || t.RtRate == nil {
		return 5
	}
	return *t.RtRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DentThreshold == nil {
		var v uint32 = 16
		t.DentThreshold = &v
	}
	if t.FccBurst == nil {
		var v uint32 = 25
		t.FccBurst = &v
	}
	if t.LocalRtServer == nil {
		var v bool = false
		t.LocalRtServer = &v
	}
	if t.McHandover == nil {
		var v uint32 = 25
		t.McHandover = &v
	}
	if t.RtRate == nil {
		var v uint32 = 5
		t.RtRate = &v
	}
	t.FccServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer represents the /nokia-conf/configure/multicast-management/multicast-info-policy/video-policy/video-interface/sd/fcc-server YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer struct {
	Mode E_NokiaTypesMcastMgmt_Mode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) GetMode() E_NokiaTypesMcastMgmt_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer.
func (*NokiaConf_Configure_MulticastManagement_MulticastInfoPolicy_VideoPolicy_VideoInterface_Sd_FccServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MulticastManagement_MulticastReportingDestination represents the /nokia-conf/configure/multicast-management/multicast-reporting-destination YANG schema element.
type NokiaConf_Configure_MulticastManagement_MulticastReportingDestination struct {
	Address                  *string                     `path:"address" module:"nokia-conf"`
	AdminState               E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups              []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description              *string                     `path:"description" module:"nokia-conf"`
	MaximumTransmissionDelay *uint32                     `path:"maximum-transmission-delay" module:"nokia-conf"`
	Name                     *string                     `path:"name" module:"nokia-conf"`
	UdpPort                  *int32                      `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MulticastManagement_MulticastReportingDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetAddress() string {
	if t == nil || t.Address == nil {
		return "0.0.0.0"
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaximumTransmissionDelay retrieves the value of the leaf MaximumTransmissionDelay from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumTransmissionDelay is set, it can
// safely use t.GetMaximumTransmissionDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumTransmissionDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetMaximumTransmissionDelay() uint32 {
	if t == nil || t.MaximumTransmissionDelay == nil {
		return 1
	}
	return *t.MaximumTransmissionDelay
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 1037
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Address == nil {
		var v string = "0.0.0.0"
		t.Address = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaximumTransmissionDelay == nil {
		var v uint32 = 1
		t.MaximumTransmissionDelay = &v
	}
	if t.UdpPort == nil {
		var v int32 = 1037
		t.UdpPort = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MulticastManagement_MulticastReportingDestination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MulticastManagement_MulticastReportingDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MulticastManagement_MulticastReportingDestination.
func (*NokiaConf_Configure_MulticastManagement_MulticastReportingDestination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle represents the /nokia-conf/configure/multilink-bundle YANG schema element.
type NokiaConf_Configure_MultilinkBundle struct {
	AdminState              E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BundleId                *string                                                     `path:"bundle-id" module:"nokia-conf"`
	Description             *string                                                     `path:"description" module:"nokia-conf"`
	FragmentThreshold       NokiaConf_Configure_MultilinkBundle_FragmentThreshold_Union `path:"fragment-threshold" module:"nokia-conf"`
	InterleaveFragment      *bool                                                       `path:"interleave-fragment" module:"nokia-conf"`
	Member                  map[string]*NokiaConf_Configure_MultilinkBundle_Member      `path:"member" module:"nokia-conf"`
	MinimumLinks            *uint32                                                     `path:"minimum-links" module:"nokia-conf"`
	Mlppp                   *NokiaConf_Configure_MultilinkBundle_Mlppp                  `path:"mlppp" module:"nokia-conf"`
	Mrru                    *uint32                                                     `path:"mrru" module:"nokia-conf"`
	ProtectBundle           *string                                                     `path:"protect-bundle" module:"nokia-conf"`
	RedDifferential         *NokiaConf_Configure_MultilinkBundle_RedDifferential        `path:"red-differential" module:"nokia-conf"`
	ShortSequence           *bool                                                       `path:"short-sequence" module:"nokia-conf"`
	WorkingBundle           *string                                                     `path:"working-bundle" module:"nokia-conf"`
	YellowDifferentialDelay *uint32                                                     `path:"yellow-differential-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// NokiaConf_Configure_MultilinkBundle struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_MultilinkBundle) NewMember(ChannelId string) (*NokiaConf_Configure_MultilinkBundle_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_MultilinkBundle_Member)
	}

	key := ChannelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &NokiaConf_Configure_MultilinkBundle_Member{
		ChannelId: &ChannelId,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the NokiaConf_Configure_MultilinkBundle struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_MultilinkBundle) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.ChannelId = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_MultilinkBundle. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_MultilinkBundle) GetOrCreateMember(ChannelId string) *NokiaConf_Configure_MultilinkBundle_Member {

	key := ChannelId

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(ChannelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of NokiaConf_Configure_MultilinkBundle. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_MultilinkBundle) GetMember(ChannelId string) *NokiaConf_Configure_MultilinkBundle_Member {

	if t == nil {
		return nil
	}

	key := ChannelId

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver NokiaConf_Configure_MultilinkBundle. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_MultilinkBundle) DeleteMember(ChannelId string) {
	key := ChannelId

	delete(t.Member, key)
}

// AppendMember appends the supplied NokiaConf_Configure_MultilinkBundle_Member struct to the
// list Member of NokiaConf_Configure_MultilinkBundle. If the key value(s) specified in
// the supplied NokiaConf_Configure_MultilinkBundle_Member already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_MultilinkBundle) AppendMember(v *NokiaConf_Configure_MultilinkBundle_Member) error {
	if v.ChannelId == nil {
		return fmt.Errorf("invalid nil key received for ChannelId")
	}

	key := *v.ChannelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_MultilinkBundle_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MultilinkBundle) GetOrCreateMlppp() *NokiaConf_Configure_MultilinkBundle_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_MultilinkBundle_Mlppp{}
	return t.Mlppp
}

// GetOrCreateRedDifferential retrieves the value of the RedDifferential field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MultilinkBundle) GetOrCreateRedDifferential() *NokiaConf_Configure_MultilinkBundle_RedDifferential {
	if t.RedDifferential != nil {
		return t.RedDifferential
	}
	t.RedDifferential = &NokiaConf_Configure_MultilinkBundle_RedDifferential{}
	return t.RedDifferential
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_MultilinkBundle. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MultilinkBundle) GetMlppp() *NokiaConf_Configure_MultilinkBundle_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetRedDifferential returns the value of the RedDifferential struct pointer
// from NokiaConf_Configure_MultilinkBundle. If the receiver or the field RedDifferential is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MultilinkBundle) GetRedDifferential() *NokiaConf_Configure_MultilinkBundle_RedDifferential {
	if t != nil && t.RedDifferential != nil {
		return t.RedDifferential
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBundleId retrieves the value of the leaf BundleId from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BundleId is set, it can
// safely use t.GetBundleId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BundleId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetBundleId() string {
	if t == nil || t.BundleId == nil {
		return ""
	}
	return *t.BundleId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFragmentThreshold retrieves the value of the leaf FragmentThreshold from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FragmentThreshold is set, it can
// safely use t.GetFragmentThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FragmentThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetFragmentThreshold() NokiaConf_Configure_MultilinkBundle_FragmentThreshold_Union {
	if t == nil || t.FragmentThreshold == nil {
		return UnionUint32(128)
	}
	return t.FragmentThreshold
}

// GetInterleaveFragment retrieves the value of the leaf InterleaveFragment from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterleaveFragment is set, it can
// safely use t.GetInterleaveFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterleaveFragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetInterleaveFragment() bool {
	if t == nil || t.InterleaveFragment == nil {
		return false
	}
	return *t.InterleaveFragment
}

// GetMinimumLinks retrieves the value of the leaf MinimumLinks from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumLinks is set, it can
// safely use t.GetMinimumLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetMinimumLinks() uint32 {
	if t == nil || t.MinimumLinks == nil {
		return 1
	}
	return *t.MinimumLinks
}

// GetMrru retrieves the value of the leaf Mrru from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mrru is set, it can
// safely use t.GetMrru() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mrru == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetMrru() uint32 {
	if t == nil || t.Mrru == nil {
		return 0
	}
	return *t.Mrru
}

// GetProtectBundle retrieves the value of the leaf ProtectBundle from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectBundle is set, it can
// safely use t.GetProtectBundle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectBundle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetProtectBundle() string {
	if t == nil || t.ProtectBundle == nil {
		return ""
	}
	return *t.ProtectBundle
}

// GetShortSequence retrieves the value of the leaf ShortSequence from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequence is set, it can
// safely use t.GetShortSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetShortSequence() bool {
	if t == nil || t.ShortSequence == nil {
		return false
	}
	return *t.ShortSequence
}

// GetWorkingBundle retrieves the value of the leaf WorkingBundle from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WorkingBundle is set, it can
// safely use t.GetWorkingBundle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WorkingBundle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetWorkingBundle() string {
	if t == nil || t.WorkingBundle == nil {
		return ""
	}
	return *t.WorkingBundle
}

// GetYellowDifferentialDelay retrieves the value of the leaf YellowDifferentialDelay from the NokiaConf_Configure_MultilinkBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if YellowDifferentialDelay is set, it can
// safely use t.GetYellowDifferentialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.YellowDifferentialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle) GetYellowDifferentialDelay() uint32 {
	if t == nil || t.YellowDifferentialDelay == nil {
		return 0
	}
	return *t.YellowDifferentialDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FragmentThreshold == nil {
		t.FragmentThreshold = UnionUint32(128)
	}
	if t.InterleaveFragment == nil {
		var v bool = false
		t.InterleaveFragment = &v
	}
	if t.MinimumLinks == nil {
		var v uint32 = 1
		t.MinimumLinks = &v
	}
	if t.ShortSequence == nil {
		var v bool = false
		t.ShortSequence = &v
	}
	t.Mlppp.PopulateDefaults()
	t.RedDifferential.PopulateDefaults()
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MultilinkBundle struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MultilinkBundle) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BundleId == nil {
		return nil, fmt.Errorf("nil value for key BundleId")
	}

	return map[string]interface{}{
		"bundle-id": *t.BundleId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle.
func (*NokiaConf_Configure_MultilinkBundle) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle_Member represents the /nokia-conf/configure/multilink-bundle/member YANG schema element.
type NokiaConf_Configure_MultilinkBundle_Member struct {
	ChannelId *string `path:"channel-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle_Member) IsYANGGoStruct() {}

// GetChannelId retrieves the value of the leaf ChannelId from the NokiaConf_Configure_MultilinkBundle_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChannelId is set, it can
// safely use t.GetChannelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChannelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Member) GetChannelId() string {
	if t == nil || t.ChannelId == nil {
		return ""
	}
	return *t.ChannelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_MultilinkBundle_Member struct, which is a YANG list entry.
func (t *NokiaConf_Configure_MultilinkBundle_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ChannelId == nil {
		return nil, fmt.Errorf("nil value for key ChannelId")
	}

	return map[string]interface{}{
		"channel-id": *t.ChannelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Member) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle_Member.
func (*NokiaConf_Configure_MultilinkBundle_Member) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle_Mlppp represents the /nokia-conf/configure/multilink-bundle/mlppp YANG schema element.
type NokiaConf_Configure_MultilinkBundle_Mlppp struct {
	ApplyGroups            []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress                `path:"egress" module:"nokia-conf"`
	EndpointDiscriminator  *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator `path:"endpoint-discriminator" module:"nokia-conf"`
	Ingress                *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress               `path:"ingress" module:"nokia-conf"`
	MagicNumber            *bool                                                            `path:"magic-number" module:"nokia-conf"`
	Multiclass             *uint32                                                          `path:"multiclass" module:"nokia-conf"`
	StatelessApsSwitchover *bool                                                            `path:"stateless-aps-switchover" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetOrCreateEgress() *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_MultilinkBundle_Mlppp_Egress{}
	return t.Egress
}

// GetOrCreateEndpointDiscriminator retrieves the value of the EndpointDiscriminator field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetOrCreateEndpointDiscriminator() *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator {
	if t.EndpointDiscriminator != nil {
		return t.EndpointDiscriminator
	}
	t.EndpointDiscriminator = &NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator{}
	return t.EndpointDiscriminator
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetOrCreateIngress() *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_MultilinkBundle_Mlppp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetEgress() *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpointDiscriminator returns the value of the EndpointDiscriminator struct pointer
// from NokiaConf_Configure_MultilinkBundle_Mlppp. If the receiver or the field EndpointDiscriminator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetEndpointDiscriminator() *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator {
	if t != nil && t.EndpointDiscriminator != nil {
		return t.EndpointDiscriminator
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_MultilinkBundle_Mlppp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetIngress() *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_MultilinkBundle_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_MultilinkBundle_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMagicNumber retrieves the value of the leaf MagicNumber from the NokiaConf_Configure_MultilinkBundle_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MagicNumber is set, it can
// safely use t.GetMagicNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MagicNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetMagicNumber() bool {
	if t == nil || t.MagicNumber == nil {
		return false
	}
	return *t.MagicNumber
}

// GetMulticlass retrieves the value of the leaf Multiclass from the NokiaConf_Configure_MultilinkBundle_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiclass is set, it can
// safely use t.GetMulticlass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiclass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetMulticlass() uint32 {
	if t == nil || t.Multiclass == nil {
		return 0
	}
	return *t.Multiclass
}

// GetStatelessApsSwitchover retrieves the value of the leaf StatelessApsSwitchover from the NokiaConf_Configure_MultilinkBundle_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatelessApsSwitchover is set, it can
// safely use t.GetStatelessApsSwitchover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatelessApsSwitchover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) GetStatelessApsSwitchover() bool {
	if t == nil || t.StatelessApsSwitchover == nil {
		return false
	}
	return *t.StatelessApsSwitchover
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MagicNumber == nil {
		var v bool = false
		t.MagicNumber = &v
	}
	if t.StatelessApsSwitchover == nil {
		var v bool = false
		t.StatelessApsSwitchover = &v
	}
	t.Egress.PopulateDefaults()
	t.EndpointDiscriminator.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle_Mlppp.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle_Mlppp_Egress represents the /nokia-conf/configure/multilink-bundle/mlppp/egress YANG schema element.
type NokiaConf_Configure_MultilinkBundle_Mlppp_Egress struct {
	QosProfile *uint32 `path:"qos-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle_Mlppp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) IsYANGGoStruct() {}

// GetQosProfile retrieves the value of the leaf QosProfile from the NokiaConf_Configure_MultilinkBundle_Mlppp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosProfile is set, it can
// safely use t.GetQosProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) GetQosProfile() uint32 {
	if t == nil || t.QosProfile == nil {
		return 0
	}
	return *t.QosProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle_Mlppp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle_Mlppp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle_Mlppp_Egress.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator represents the /nokia-conf/configure/multilink-bundle/mlppp/endpoint-discriminator YANG schema element.
type NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator struct {
	Class           E_NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator_Class `path:"class" module:"nokia-conf"`
	DiscriminatorId *string                                                                 `path:"discriminator-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) GetClass() E_NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator_Class {
	if t == nil || t.Class == 0 {
		return 0
	}
	return t.Class
}

// GetDiscriminatorId retrieves the value of the leaf DiscriminatorId from the NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscriminatorId is set, it can
// safely use t.GetDiscriminatorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscriminatorId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) GetDiscriminatorId() string {
	if t == nil || t.DiscriminatorId == nil {
		return ""
	}
	return *t.DiscriminatorId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp_EndpointDiscriminator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress represents the /nokia-conf/configure/multilink-bundle/mlppp/ingress YANG schema element.
type NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress struct {
	QosProfile *uint32 `path:"qos-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) IsYANGGoStruct() {}

// GetQosProfile retrieves the value of the leaf QosProfile from the NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosProfile is set, it can
// safely use t.GetQosProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) GetQosProfile() uint32 {
	if t == nil || t.QosProfile == nil {
		return 0
	}
	return *t.QosProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress.
func (*NokiaConf_Configure_MultilinkBundle_Mlppp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_MultilinkBundle_RedDifferential represents the /nokia-conf/configure/multilink-bundle/red-differential YANG schema element.
type NokiaConf_Configure_MultilinkBundle_RedDifferential struct {
	Action E_NokiaConf_Configure_MultilinkBundle_RedDifferential_Action `path:"action" module:"nokia-conf"`
	Delay  *uint32                                                      `path:"delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_MultilinkBundle_RedDifferential implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_MultilinkBundle_RedDifferential) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_MultilinkBundle_RedDifferential
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_RedDifferential) GetAction() E_NokiaConf_Configure_MultilinkBundle_RedDifferential_Action {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetDelay retrieves the value of the leaf Delay from the NokiaConf_Configure_MultilinkBundle_RedDifferential
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_MultilinkBundle_RedDifferential) GetDelay() uint32 {
	if t == nil || t.Delay == nil {
		return 0
	}
	return *t.Delay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_MultilinkBundle_RedDifferential
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_MultilinkBundle_RedDifferential) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_RedDifferential) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_MultilinkBundle_RedDifferential"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_MultilinkBundle_RedDifferential) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_MultilinkBundle_RedDifferential) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_MultilinkBundle_RedDifferential.
func (*NokiaConf_Configure_MultilinkBundle_RedDifferential) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm represents the /nokia-conf/configure/oam-pm YANG schema element.
type NokiaConf_Configure_OamPm struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	BinGroup           map[uint32]*NokiaConf_Configure_OamPm_BinGroup `path:"bin-group" module:"nokia-conf"`
	Session            map[string]*NokiaConf_Configure_OamPm_Session  `path:"session" module:"nokia-conf"`
	Streaming          *NokiaConf_Configure_OamPm_Streaming           `path:"streaming" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm) IsYANGGoStruct() {}

// NewBinGroup creates a new entry in the BinGroup list of the
// NokiaConf_Configure_OamPm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm) NewBinGroup(BinGroupId uint32) (*NokiaConf_Configure_OamPm_BinGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinGroup == nil {
		t.BinGroup = make(map[uint32]*NokiaConf_Configure_OamPm_BinGroup)
	}

	key := BinGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BinGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BinGroup", key)
	}

	t.BinGroup[key] = &NokiaConf_Configure_OamPm_BinGroup{
		BinGroupId: &BinGroupId,
	}

	return t.BinGroup[key], nil
}

// RenameBinGroup renames an entry in the list BinGroup within
// the NokiaConf_Configure_OamPm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm) RenameBinGroup(oldK, newK uint32) error {
	if _, ok := t.BinGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in BinGroup", newK)
	}

	e, ok := t.BinGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BinGroup", oldK)
	}
	e.BinGroupId = &newK

	t.BinGroup[newK] = e
	delete(t.BinGroup, oldK)
	return nil
}

// GetOrCreateBinGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm) GetOrCreateBinGroup(BinGroupId uint32) *NokiaConf_Configure_OamPm_BinGroup {

	key := BinGroupId

	if v, ok := t.BinGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBinGroup(BinGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBinGroup got unexpected error: %v", err))
	}
	return v
}

// GetBinGroup retrieves the value with the specified key from
// the BinGroup map field of NokiaConf_Configure_OamPm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm) GetBinGroup(BinGroupId uint32) *NokiaConf_Configure_OamPm_BinGroup {

	if t == nil {
		return nil
	}

	key := BinGroupId

	if lm, ok := t.BinGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteBinGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm) DeleteBinGroup(BinGroupId uint32) {
	key := BinGroupId

	delete(t.BinGroup, key)
}

// AppendBinGroup appends the supplied NokiaConf_Configure_OamPm_BinGroup struct to the
// list BinGroup of NokiaConf_Configure_OamPm. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_BinGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm) AppendBinGroup(v *NokiaConf_Configure_OamPm_BinGroup) error {
	if v.BinGroupId == nil {
		return fmt.Errorf("invalid nil key received for BinGroupId")
	}

	key := *v.BinGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinGroup == nil {
		t.BinGroup = make(map[uint32]*NokiaConf_Configure_OamPm_BinGroup)
	}

	if _, ok := t.BinGroup[key]; ok {
		return fmt.Errorf("duplicate key for list BinGroup %v", key)
	}

	t.BinGroup[key] = v
	return nil
}

// NewSession creates a new entry in the Session list of the
// NokiaConf_Configure_OamPm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm) NewSession(SessionName string) (*NokiaConf_Configure_OamPm_Session, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[string]*NokiaConf_Configure_OamPm_Session)
	}

	key := SessionName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Session[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Session", key)
	}

	t.Session[key] = &NokiaConf_Configure_OamPm_Session{
		SessionName: &SessionName,
	}

	return t.Session[key], nil
}

// RenameSession renames an entry in the list Session within
// the NokiaConf_Configure_OamPm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm) RenameSession(oldK, newK string) error {
	if _, ok := t.Session[newK]; ok {
		return fmt.Errorf("key %v already exists in Session", newK)
	}

	e, ok := t.Session[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Session", oldK)
	}
	e.SessionName = &newK

	t.Session[newK] = e
	delete(t.Session, oldK)
	return nil
}

// GetOrCreateSession retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm) GetOrCreateSession(SessionName string) *NokiaConf_Configure_OamPm_Session {

	key := SessionName

	if v, ok := t.Session[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSession(SessionName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSession got unexpected error: %v", err))
	}
	return v
}

// GetSession retrieves the value with the specified key from
// the Session map field of NokiaConf_Configure_OamPm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm) GetSession(SessionName string) *NokiaConf_Configure_OamPm_Session {

	if t == nil {
		return nil
	}

	key := SessionName

	if lm, ok := t.Session[key]; ok {
		return lm
	}
	return nil
}

// DeleteSession deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm) DeleteSession(SessionName string) {
	key := SessionName

	delete(t.Session, key)
}

// AppendSession appends the supplied NokiaConf_Configure_OamPm_Session struct to the
// list Session of NokiaConf_Configure_OamPm. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm) AppendSession(v *NokiaConf_Configure_OamPm_Session) error {
	if v.SessionName == nil {
		return fmt.Errorf("invalid nil key received for SessionName")
	}

	key := *v.SessionName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Session == nil {
		t.Session = make(map[string]*NokiaConf_Configure_OamPm_Session)
	}

	if _, ok := t.Session[key]; ok {
		return fmt.Errorf("duplicate key for list Session %v", key)
	}

	t.Session[key] = v
	return nil
}

// GetOrCreateStreaming retrieves the value of the Streaming field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm) GetOrCreateStreaming() *NokiaConf_Configure_OamPm_Streaming {
	if t.Streaming != nil {
		return t.Streaming
	}
	t.Streaming = &NokiaConf_Configure_OamPm_Streaming{}
	return t.Streaming
}

// GetStreaming returns the value of the Streaming struct pointer
// from NokiaConf_Configure_OamPm. If the receiver or the field Streaming is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm) GetStreaming() *NokiaConf_Configure_OamPm_Streaming {
	if t != nil && t.Streaming != nil {
		return t.Streaming
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Streaming.PopulateDefaults()
	for _, e := range t.BinGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Session {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm.
func (*NokiaConf_Configure_OamPm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_BinGroup represents the /nokia-conf/configure/oam-pm/bin-group YANG schema element.
type NokiaConf_Configure_OamPm_BinGroup struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	BinGroupId         *uint32                                                                                                `path:"bin-group-id" module:"nokia-conf"`
	BinType            map[E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric]*NokiaConf_Configure_OamPm_BinGroup_BinType `path:"bin-type" module:"nokia-conf"`
	Description        *string                                                                                                `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_BinGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_BinGroup) IsYANGGoStruct() {}

// NewBinType creates a new entry in the BinType list of the
// NokiaConf_Configure_OamPm_BinGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_BinGroup) NewBinType(BinMetric E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric) (*NokiaConf_Configure_OamPm_BinGroup_BinType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinType == nil {
		t.BinType = make(map[E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric]*NokiaConf_Configure_OamPm_BinGroup_BinType)
	}

	key := BinMetric

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BinType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BinType", key)
	}

	t.BinType[key] = &NokiaConf_Configure_OamPm_BinGroup_BinType{
		BinMetric: BinMetric,
	}

	return t.BinType[key], nil
}

// RenameBinType renames an entry in the list BinType within
// the NokiaConf_Configure_OamPm_BinGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_BinGroup) RenameBinType(oldK, newK E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric) error {
	if _, ok := t.BinType[newK]; ok {
		return fmt.Errorf("key %v already exists in BinType", newK)
	}

	e, ok := t.BinType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BinType", oldK)
	}
	e.BinMetric = newK

	t.BinType[newK] = e
	delete(t.BinType, oldK)
	return nil
}

// GetOrCreateBinType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetOrCreateBinType(BinMetric E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric) *NokiaConf_Configure_OamPm_BinGroup_BinType {

	key := BinMetric

	if v, ok := t.BinType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBinType(BinMetric)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBinType got unexpected error: %v", err))
	}
	return v
}

// GetBinType retrieves the value with the specified key from
// the BinType map field of NokiaConf_Configure_OamPm_BinGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetBinType(BinMetric E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric) *NokiaConf_Configure_OamPm_BinGroup_BinType {

	if t == nil {
		return nil
	}

	key := BinMetric

	if lm, ok := t.BinType[key]; ok {
		return lm
	}
	return nil
}

// DeleteBinType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_BinGroup) DeleteBinType(BinMetric E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric) {
	key := BinMetric

	delete(t.BinType, key)
}

// AppendBinType appends the supplied NokiaConf_Configure_OamPm_BinGroup_BinType struct to the
// list BinType of NokiaConf_Configure_OamPm_BinGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_BinGroup_BinType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_BinGroup) AppendBinType(v *NokiaConf_Configure_OamPm_BinGroup_BinType) error {
	key := v.BinMetric

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BinType == nil {
		t.BinType = make(map[E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric]*NokiaConf_Configure_OamPm_BinGroup_BinType)
	}

	if _, ok := t.BinType[key]; ok {
		return fmt.Errorf("duplicate key for list BinType %v", key)
	}

	t.BinType[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBinGroupId retrieves the value of the leaf BinGroupId from the NokiaConf_Configure_OamPm_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BinGroupId is set, it can
// safely use t.GetBinGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BinGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetBinGroupId() uint32 {
	if t == nil || t.BinGroupId == nil {
		return 0
	}
	return *t.BinGroupId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_OamPm_BinGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_BinGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_BinGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BinType {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_BinGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_BinGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BinGroupId == nil {
		return nil, fmt.Errorf("nil value for key BinGroupId")
	}

	return map[string]interface{}{
		"bin-group-id": *t.BinGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_BinGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_BinGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_BinGroup.
func (*NokiaConf_Configure_OamPm_BinGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_BinGroup_BinType represents the /nokia-conf/configure/oam-pm/bin-group/bin-type YANG schema element.
type NokiaConf_Configure_OamPm_BinGroup_BinType struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Bin                map[uint32]*NokiaConf_Configure_OamPm_BinGroup_BinType_Bin                               `path:"bin" module:"nokia-conf"`
	BinMetric          E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric                                   `path:"bin-metric" module:"nokia-conf"`
	DelayEvent         map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent     `path:"delay-event" module:"nokia-conf"`
	ExcludeFromAvg     map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg `path:"exclude-from-avg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_BinGroup_BinType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType) IsYANGGoStruct() {}

// NewBin creates a new entry in the Bin list of the
// NokiaConf_Configure_OamPm_BinGroup_BinType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) NewBin(BinNumber uint32) (*NokiaConf_Configure_OamPm_BinGroup_BinType_Bin, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bin == nil {
		t.Bin = make(map[uint32]*NokiaConf_Configure_OamPm_BinGroup_BinType_Bin)
	}

	key := BinNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bin[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bin", key)
	}

	t.Bin[key] = &NokiaConf_Configure_OamPm_BinGroup_BinType_Bin{
		BinNumber: &BinNumber,
	}

	return t.Bin[key], nil
}

// RenameBin renames an entry in the list Bin within
// the NokiaConf_Configure_OamPm_BinGroup_BinType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) RenameBin(oldK, newK uint32) error {
	if _, ok := t.Bin[newK]; ok {
		return fmt.Errorf("key %v already exists in Bin", newK)
	}

	e, ok := t.Bin[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Bin", oldK)
	}
	e.BinNumber = &newK

	t.Bin[newK] = e
	delete(t.Bin, oldK)
	return nil
}

// GetOrCreateBin retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup_BinType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetOrCreateBin(BinNumber uint32) *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin {

	key := BinNumber

	if v, ok := t.Bin[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBin(BinNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBin got unexpected error: %v", err))
	}
	return v
}

// GetBin retrieves the value with the specified key from
// the Bin map field of NokiaConf_Configure_OamPm_BinGroup_BinType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetBin(BinNumber uint32) *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin {

	if t == nil {
		return nil
	}

	key := BinNumber

	if lm, ok := t.Bin[key]; ok {
		return lm
	}
	return nil
}

// DeleteBin deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup_BinType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) DeleteBin(BinNumber uint32) {
	key := BinNumber

	delete(t.Bin, key)
}

// AppendBin appends the supplied NokiaConf_Configure_OamPm_BinGroup_BinType_Bin struct to the
// list Bin of NokiaConf_Configure_OamPm_BinGroup_BinType. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_BinGroup_BinType_Bin already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) AppendBin(v *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) error {
	if v.BinNumber == nil {
		return fmt.Errorf("invalid nil key received for BinNumber")
	}

	key := *v.BinNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bin == nil {
		t.Bin = make(map[uint32]*NokiaConf_Configure_OamPm_BinGroup_BinType_Bin)
	}

	if _, ok := t.Bin[key]; ok {
		return fmt.Errorf("duplicate key for list Bin %v", key)
	}

	t.Bin[key] = v
	return nil
}

// NewDelayEvent creates a new entry in the DelayEvent list of the
// NokiaConf_Configure_OamPm_BinGroup_BinType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) NewDelayEvent(Direction E_NokiaTypesOam_Direction) (*NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DelayEvent == nil {
		t.DelayEvent = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DelayEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DelayEvent", key)
	}

	t.DelayEvent[key] = &NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent{
		Direction: Direction,
	}

	return t.DelayEvent[key], nil
}

// RenameDelayEvent renames an entry in the list DelayEvent within
// the NokiaConf_Configure_OamPm_BinGroup_BinType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) RenameDelayEvent(oldK, newK E_NokiaTypesOam_Direction) error {
	if _, ok := t.DelayEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in DelayEvent", newK)
	}

	e, ok := t.DelayEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DelayEvent", oldK)
	}
	e.Direction = newK

	t.DelayEvent[newK] = e
	delete(t.DelayEvent, oldK)
	return nil
}

// GetOrCreateDelayEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup_BinType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetOrCreateDelayEvent(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent {

	key := Direction

	if v, ok := t.DelayEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDelayEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDelayEvent got unexpected error: %v", err))
	}
	return v
}

// GetDelayEvent retrieves the value with the specified key from
// the DelayEvent map field of NokiaConf_Configure_OamPm_BinGroup_BinType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetDelayEvent(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.DelayEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteDelayEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup_BinType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) DeleteDelayEvent(Direction E_NokiaTypesOam_Direction) {
	key := Direction

	delete(t.DelayEvent, key)
}

// AppendDelayEvent appends the supplied NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent struct to the
// list DelayEvent of NokiaConf_Configure_OamPm_BinGroup_BinType. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) AppendDelayEvent(v *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DelayEvent == nil {
		t.DelayEvent = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent)
	}

	if _, ok := t.DelayEvent[key]; ok {
		return fmt.Errorf("duplicate key for list DelayEvent %v", key)
	}

	t.DelayEvent[key] = v
	return nil
}

// NewExcludeFromAvg creates a new entry in the ExcludeFromAvg list of the
// NokiaConf_Configure_OamPm_BinGroup_BinType struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) NewExcludeFromAvg(Direction E_NokiaTypesOam_Direction) (*NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeFromAvg == nil {
		t.ExcludeFromAvg = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeFromAvg[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeFromAvg", key)
	}

	t.ExcludeFromAvg[key] = &NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg{
		Direction: Direction,
	}

	return t.ExcludeFromAvg[key], nil
}

// RenameExcludeFromAvg renames an entry in the list ExcludeFromAvg within
// the NokiaConf_Configure_OamPm_BinGroup_BinType struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) RenameExcludeFromAvg(oldK, newK E_NokiaTypesOam_Direction) error {
	if _, ok := t.ExcludeFromAvg[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeFromAvg", newK)
	}

	e, ok := t.ExcludeFromAvg[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeFromAvg", oldK)
	}
	e.Direction = newK

	t.ExcludeFromAvg[newK] = e
	delete(t.ExcludeFromAvg, oldK)
	return nil
}

// GetOrCreateExcludeFromAvg retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup_BinType. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetOrCreateExcludeFromAvg(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg {

	key := Direction

	if v, ok := t.ExcludeFromAvg[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeFromAvg(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeFromAvg got unexpected error: %v", err))
	}
	return v
}

// GetExcludeFromAvg retrieves the value with the specified key from
// the ExcludeFromAvg map field of NokiaConf_Configure_OamPm_BinGroup_BinType. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetExcludeFromAvg(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.ExcludeFromAvg[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeFromAvg deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_BinGroup_BinType. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) DeleteExcludeFromAvg(Direction E_NokiaTypesOam_Direction) {
	key := Direction

	delete(t.ExcludeFromAvg, key)
}

// AppendExcludeFromAvg appends the supplied NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg struct to the
// list ExcludeFromAvg of NokiaConf_Configure_OamPm_BinGroup_BinType. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) AppendExcludeFromAvg(v *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeFromAvg == nil {
		t.ExcludeFromAvg = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg)
	}

	if _, ok := t.ExcludeFromAvg[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeFromAvg %v", key)
	}

	t.ExcludeFromAvg[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_BinGroup_BinType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_BinGroup_BinType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBinMetric retrieves the value of the leaf BinMetric from the NokiaConf_Configure_OamPm_BinGroup_BinType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BinMetric is set, it can
// safely use t.GetBinMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BinMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) GetBinMetric() E_NokiaConf_Configure_OamPm_BinGroup_BinType_BinMetric {
	if t == nil || t.BinMetric == 0 {
		return 0
	}
	return t.BinMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_BinGroup_BinType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Bin {
		e.PopulateDefaults()
	}
	for _, e := range t.DelayEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.ExcludeFromAvg {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_BinGroup_BinType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bin-metric": t.BinMetric,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_BinGroup_BinType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_BinGroup_BinType.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_BinGroup_BinType_Bin represents the /nokia-conf/configure/oam-pm/bin-group/bin-type/bin YANG schema element.
type NokiaConf_Configure_OamPm_BinGroup_BinType_Bin struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	BinNumber          *uint32  `path:"bin-number" module:"nokia-conf"`
	LowerBound         *int64   `path:"lower-bound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_BinGroup_BinType_Bin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_BinGroup_BinType_Bin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_BinGroup_BinType_Bin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBinNumber retrieves the value of the leaf BinNumber from the NokiaConf_Configure_OamPm_BinGroup_BinType_Bin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BinNumber is set, it can
// safely use t.GetBinNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BinNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) GetBinNumber() uint32 {
	if t == nil || t.BinNumber == nil {
		return 0
	}
	return *t.BinNumber
}

// GetLowerBound retrieves the value of the leaf LowerBound from the NokiaConf_Configure_OamPm_BinGroup_BinType_Bin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowerBound is set, it can
// safely use t.GetLowerBound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowerBound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) GetLowerBound() int64 {
	if t == nil || t.LowerBound == nil {
		return 0
	}
	return *t.LowerBound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_BinGroup_BinType_Bin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_BinGroup_BinType_Bin struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BinNumber == nil {
		return nil, fmt.Errorf("nil value for key BinNumber")
	}

	return map[string]interface{}{
		"bin-number": *t.BinNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_BinGroup_BinType_Bin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_BinGroup_BinType_Bin.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType_Bin) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent represents the /nokia-conf/configure/oam-pm/bin-group/bin-type/delay-event YANG schema element.
type NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent struct {
	ApplyGroups        []string                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                    `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaTypesOam_Direction `path:"direction" module:"nokia-conf"`
	ExcludeLowestBin   *int32                    `path:"exclude-lowest-bin" module:"nokia-conf"`
	LowestBin          *uint32                   `path:"lowest-bin" module:"nokia-conf"`
	RaiseThreshold     *int32                    `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetDirection() E_NokiaTypesOam_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetExcludeLowestBin retrieves the value of the leaf ExcludeLowestBin from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeLowestBin is set, it can
// safely use t.GetExcludeLowestBin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeLowestBin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetExcludeLowestBin() int32 {
	if t == nil || t.ExcludeLowestBin == nil {
		return 0
	}
	return *t.ExcludeLowestBin
}

// GetLowestBin retrieves the value of the leaf LowestBin from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowestBin is set, it can
// safely use t.GetLowestBin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowestBin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetLowestBin() uint32 {
	if t == nil || t.LowestBin == nil {
		return 0
	}
	return *t.LowestBin
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType_DelayEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg represents the /nokia-conf/configure/oam-pm/bin-group/bin-type/exclude-from-avg YANG schema element.
type NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg struct {
	ApplyGroups        []string                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Bins               *string                   `path:"bins" module:"nokia-conf"`
	Direction          E_NokiaTypesOam_Direction `path:"direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBins retrieves the value of the leaf Bins from the NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bins is set, it can
// safely use t.GetBins() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bins == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) GetBins() string {
	if t == nil || t.Bins == nil {
		return ""
	}
	return *t.Bins
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) GetDirection() E_NokiaTypesOam_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg.
func (*NokiaConf_Configure_OamPm_BinGroup_BinType_ExcludeFromAvg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session represents the /nokia-conf/configure/oam-pm/session YANG schema element.
type NokiaConf_Configure_OamPm_Session struct {
	ApplyGroups         []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	BinGroup            *uint32                                                                                                `path:"bin-group" module:"nokia-conf"`
	Description         *string                                                                                                `path:"description" module:"nokia-conf"`
	Ethernet            *NokiaConf_Configure_OamPm_Session_Ethernet                                                            `path:"ethernet" module:"nokia-conf" yangPresence:"true"`
	Ip                  *NokiaConf_Configure_OamPm_Session_Ip                                                                  `path:"ip" module:"nokia-conf" yangPresence:"true"`
	MeasurementInterval map[E_NokiaTypesOam_MeasurementIntervalDuration]*NokiaConf_Configure_OamPm_Session_MeasurementInterval `path:"measurement-interval" module:"nokia-conf"`
	Mpls                *NokiaConf_Configure_OamPm_Session_Mpls                                                                `path:"mpls" module:"nokia-conf" yangPresence:"true"`
	SessionName         *string                                                                                                `path:"session-name" module:"nokia-conf"`
	SessionType         E_NokiaConf_Configure_OamPm_Session_SessionType                                                        `path:"session-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session) IsYANGGoStruct() {}

// NewMeasurementInterval creates a new entry in the MeasurementInterval list of the
// NokiaConf_Configure_OamPm_Session struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session) NewMeasurementInterval(Duration E_NokiaTypesOam_MeasurementIntervalDuration) (*NokiaConf_Configure_OamPm_Session_MeasurementInterval, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementInterval == nil {
		t.MeasurementInterval = make(map[E_NokiaTypesOam_MeasurementIntervalDuration]*NokiaConf_Configure_OamPm_Session_MeasurementInterval)
	}

	key := Duration

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeasurementInterval[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeasurementInterval", key)
	}

	t.MeasurementInterval[key] = &NokiaConf_Configure_OamPm_Session_MeasurementInterval{
		Duration: Duration,
	}

	return t.MeasurementInterval[key], nil
}

// RenameMeasurementInterval renames an entry in the list MeasurementInterval within
// the NokiaConf_Configure_OamPm_Session struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session) RenameMeasurementInterval(oldK, newK E_NokiaTypesOam_MeasurementIntervalDuration) error {
	if _, ok := t.MeasurementInterval[newK]; ok {
		return fmt.Errorf("key %v already exists in MeasurementInterval", newK)
	}

	e, ok := t.MeasurementInterval[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeasurementInterval", oldK)
	}
	e.Duration = newK

	t.MeasurementInterval[newK] = e
	delete(t.MeasurementInterval, oldK)
	return nil
}

// GetOrCreateMeasurementInterval retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session) GetOrCreateMeasurementInterval(Duration E_NokiaTypesOam_MeasurementIntervalDuration) *NokiaConf_Configure_OamPm_Session_MeasurementInterval {

	key := Duration

	if v, ok := t.MeasurementInterval[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeasurementInterval(Duration)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeasurementInterval got unexpected error: %v", err))
	}
	return v
}

// GetMeasurementInterval retrieves the value with the specified key from
// the MeasurementInterval map field of NokiaConf_Configure_OamPm_Session. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session) GetMeasurementInterval(Duration E_NokiaTypesOam_MeasurementIntervalDuration) *NokiaConf_Configure_OamPm_Session_MeasurementInterval {

	if t == nil {
		return nil
	}

	key := Duration

	if lm, ok := t.MeasurementInterval[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeasurementInterval deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session) DeleteMeasurementInterval(Duration E_NokiaTypesOam_MeasurementIntervalDuration) {
	key := Duration

	delete(t.MeasurementInterval, key)
}

// AppendMeasurementInterval appends the supplied NokiaConf_Configure_OamPm_Session_MeasurementInterval struct to the
// list MeasurementInterval of NokiaConf_Configure_OamPm_Session. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_MeasurementInterval already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session) AppendMeasurementInterval(v *NokiaConf_Configure_OamPm_Session_MeasurementInterval) error {
	key := v.Duration

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementInterval == nil {
		t.MeasurementInterval = make(map[E_NokiaTypesOam_MeasurementIntervalDuration]*NokiaConf_Configure_OamPm_Session_MeasurementInterval)
	}

	if _, ok := t.MeasurementInterval[key]; ok {
		return fmt.Errorf("duplicate key for list MeasurementInterval %v", key)
	}

	t.MeasurementInterval[key] = v
	return nil
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session) GetOrCreateEthernet() *NokiaConf_Configure_OamPm_Session_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_OamPm_Session_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session) GetOrCreateIp() *NokiaConf_Configure_OamPm_Session_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &NokiaConf_Configure_OamPm_Session_Ip{}
	return t.Ip
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session) GetOrCreateMpls() *NokiaConf_Configure_OamPm_Session_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_OamPm_Session_Mpls{}
	return t.Mpls
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_OamPm_Session. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session) GetEthernet() *NokiaConf_Configure_OamPm_Session_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIp returns the value of the Ip struct pointer
// from NokiaConf_Configure_OamPm_Session. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session) GetIp() *NokiaConf_Configure_OamPm_Session_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_OamPm_Session. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session) GetMpls() *NokiaConf_Configure_OamPm_Session_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBinGroup retrieves the value of the leaf BinGroup from the NokiaConf_Configure_OamPm_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BinGroup is set, it can
// safely use t.GetBinGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BinGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session) GetBinGroup() uint32 {
	if t == nil || t.BinGroup == nil {
		return 0
	}
	return *t.BinGroup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_OamPm_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSessionName retrieves the value of the leaf SessionName from the NokiaConf_Configure_OamPm_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionName is set, it can
// safely use t.GetSessionName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session) GetSessionName() string {
	if t == nil || t.SessionName == nil {
		return ""
	}
	return *t.SessionName
}

// GetSessionType retrieves the value of the leaf SessionType from the NokiaConf_Configure_OamPm_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionType is set, it can
// safely use t.GetSessionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session) GetSessionType() E_NokiaConf_Configure_OamPm_Session_SessionType {
	if t == nil || t.SessionType == 0 {
		return NokiaConf_Configure_OamPm_Session_SessionType_proactive
	}
	return t.SessionType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SessionType == 0 {
		t.SessionType = NokiaConf_Configure_OamPm_Session_SessionType_proactive
	}
	t.Ethernet.PopulateDefaults()
	t.Ip.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	for _, e := range t.MeasurementInterval {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SessionName == nil {
		return nil, fmt.Errorf("nil value for key SessionName")
	}

	return map[string]interface{}{
		"session-name": *t.SessionName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session.
func (*NokiaConf_Configure_OamPm_Session) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet represents the /nokia-conf/configure/oam-pm/session/ethernet YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet struct {
	DestMac   *string                                            `path:"dest-mac" module:"nokia-conf"`
	Dmm       *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm    `path:"dmm" module:"nokia-conf" yangPresence:"true"`
	Lmm       *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm    `path:"lmm" module:"nokia-conf" yangPresence:"true"`
	Priority  *uint32                                            `path:"priority" module:"nokia-conf"`
	RemoteMep *uint32                                            `path:"remote-mep" module:"nokia-conf"`
	Slm       *NokiaConf_Configure_OamPm_Session_Ethernet_Slm    `path:"slm" module:"nokia-conf" yangPresence:"true"`
	Source    *NokiaConf_Configure_OamPm_Session_Ethernet_Source `path:"source" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet) IsYANGGoStruct() {}

// GetOrCreateDmm retrieves the value of the Dmm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetOrCreateDmm() *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm {
	if t.Dmm != nil {
		return t.Dmm
	}
	t.Dmm = &NokiaConf_Configure_OamPm_Session_Ethernet_Dmm{}
	return t.Dmm
}

// GetOrCreateLmm retrieves the value of the Lmm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetOrCreateLmm() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm {
	if t.Lmm != nil {
		return t.Lmm
	}
	t.Lmm = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm{}
	return t.Lmm
}

// GetOrCreateSlm retrieves the value of the Slm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetOrCreateSlm() *NokiaConf_Configure_OamPm_Session_Ethernet_Slm {
	if t.Slm != nil {
		return t.Slm
	}
	t.Slm = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm{}
	return t.Slm
}

// GetOrCreateSource retrieves the value of the Source field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetOrCreateSource() *NokiaConf_Configure_OamPm_Session_Ethernet_Source {
	if t.Source != nil {
		return t.Source
	}
	t.Source = &NokiaConf_Configure_OamPm_Session_Ethernet_Source{}
	return t.Source
}

// GetDmm returns the value of the Dmm struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet. If the receiver or the field Dmm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetDmm() *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm {
	if t != nil && t.Dmm != nil {
		return t.Dmm
	}
	return nil
}

// GetLmm returns the value of the Lmm struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet. If the receiver or the field Lmm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetLmm() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm {
	if t != nil && t.Lmm != nil {
		return t.Lmm
	}
	return nil
}

// GetSlm returns the value of the Slm struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet. If the receiver or the field Slm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetSlm() *NokiaConf_Configure_OamPm_Session_Ethernet_Slm {
	if t != nil && t.Slm != nil {
		return t.Slm
	}
	return nil
}

// GetSource returns the value of the Source struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet. If the receiver or the field Source is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetSource() *NokiaConf_Configure_OamPm_Session_Ethernet_Source {
	if t != nil && t.Source != nil {
		return t.Source
	}
	return nil
}

// GetDestMac retrieves the value of the leaf DestMac from the NokiaConf_Configure_OamPm_Session_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestMac is set, it can
// safely use t.GetDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetDestMac() string {
	if t == nil || t.DestMac == nil {
		return ""
	}
	return *t.DestMac
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_OamPm_Session_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRemoteMep retrieves the value of the leaf RemoteMep from the NokiaConf_Configure_OamPm_Session_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteMep is set, it can
// safely use t.GetRemoteMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) GetRemoteMep() uint32 {
	if t == nil || t.RemoteMep == nil {
		return 0
	}
	return *t.RemoteMep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == nil {
		var v uint32 = 0
		t.Priority = &v
	}
	t.Dmm.PopulateDefaults()
	t.Lmm.PopulateDefaults()
	t.Slm.PopulateDefaults()
	t.Source.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet.
func (*NokiaConf_Configure_OamPm_Session_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Dmm represents the /nokia-conf/configure/oam-pm/session/ethernet/dmm YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Dmm struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DataTlvSize        *uint32                     `path:"data-tlv-size" module:"nokia-conf"`
	DelayTemplate      *string                     `path:"delay-template" module:"nokia-conf"`
	Interval           *uint32                     `path:"interval" module:"nokia-conf"`
	TestDuration       *uint32                     `path:"test-duration" module:"nokia-conf"`
	TestId             *uint32                     `path:"test-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Dmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDataTlvSize retrieves the value of the leaf DataTlvSize from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataTlvSize is set, it can
// safely use t.GetDataTlvSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataTlvSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetDataTlvSize() uint32 {
	if t == nil || t.DataTlvSize == nil {
		return 0
	}
	return *t.DataTlvSize
}

// GetDelayTemplate retrieves the value of the leaf DelayTemplate from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayTemplate is set, it can
// safely use t.GetDelayTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetDelayTemplate() string {
	if t == nil || t.DelayTemplate == nil {
		return ""
	}
	return *t.DelayTemplate
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetTestDuration retrieves the value of the leaf TestDuration from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetTestDuration() uint32 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTestId retrieves the value of the leaf TestId from the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestId is set, it can
// safely use t.GetTestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) GetTestId() uint32 {
	if t == nil || t.TestId == nil {
		return 0
	}
	return *t.TestId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Dmm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DataTlvSize == nil {
		var v uint32 = 0
		t.DataTlvSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Dmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Dmm.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Dmm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm struct {
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Availability       *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability `path:"availability" module:"nokia-conf"`
	FcCollection       *bool                                                        `path:"fc-collection" module:"nokia-conf"`
	Interval           *uint32                                                      `path:"interval" module:"nokia-conf"`
	LossEvents         *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents   `path:"loss-events" module:"nokia-conf"`
	TestDuration       *uint32                                                      `path:"test-duration" module:"nokia-conf"`
	TestId             *uint32                                                      `path:"test-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) IsYANGGoStruct() {}

// GetOrCreateAvailability retrieves the value of the Availability field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetOrCreateAvailability() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability {
	if t.Availability != nil {
		return t.Availability
	}
	t.Availability = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability{}
	return t.Availability
}

// GetOrCreateLossEvents retrieves the value of the LossEvents field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetOrCreateLossEvents() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents {
	if t.LossEvents != nil {
		return t.LossEvents
	}
	t.LossEvents = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents{}
	return t.LossEvents
}

// GetAvailability returns the value of the Availability struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet_Lmm. If the receiver or the field Availability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetAvailability() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability {
	if t != nil && t.Availability != nil {
		return t.Availability
	}
	return nil
}

// GetLossEvents returns the value of the LossEvents struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet_Lmm. If the receiver or the field LossEvents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetLossEvents() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents {
	if t != nil && t.LossEvents != nil {
		return t.LossEvents
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFcCollection retrieves the value of the leaf FcCollection from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcCollection is set, it can
// safely use t.GetFcCollection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcCollection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetFcCollection() bool {
	if t == nil || t.FcCollection == nil {
		return false
	}
	return *t.FcCollection
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetTestDuration retrieves the value of the leaf TestDuration from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetTestDuration() uint32 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTestId retrieves the value of the leaf TestId from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestId is set, it can
// safely use t.GetTestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) GetTestId() uint32 {
	if t == nil || t.TestId == nil {
		return 0
	}
	return *t.TestId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FcCollection == nil {
		var v bool = false
		t.FcCollection = &v
	}
	t.Availability.PopulateDefaults()
	t.LossEvents.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/availability YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability struct {
	AdminState    E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	FlrThreshold  *uint32                                                             `path:"flr-threshold" module:"nokia-conf"`
	HliForceCount *bool                                                               `path:"hli-force-count" module:"nokia-conf"`
	Timing        *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing `path:"timing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) IsYANGGoStruct() {}

// GetOrCreateTiming retrieves the value of the Timing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) GetOrCreateTiming() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing {
	if t.Timing != nil {
		return t.Timing
	}
	t.Timing = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing{}
	return t.Timing
}

// GetTiming returns the value of the Timing struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability. If the receiver or the field Timing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) GetTiming() *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing {
	if t != nil && t.Timing != nil {
		return t.Timing
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetFlrThreshold retrieves the value of the leaf FlrThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlrThreshold is set, it can
// safely use t.GetFlrThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlrThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) GetFlrThreshold() uint32 {
	if t == nil || t.FlrThreshold == nil {
		return 50
	}
	return *t.FlrThreshold
}

// GetHliForceCount retrieves the value of the leaf HliForceCount from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HliForceCount is set, it can
// safely use t.GetHliForceCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HliForceCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) GetHliForceCount() bool {
	if t == nil || t.HliForceCount == nil {
		return false
	}
	return *t.HliForceCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlrThreshold == nil {
		var v uint32 = 50
		t.FlrThreshold = &v
	}
	if t.HliForceCount == nil {
		var v bool = false
		t.HliForceCount = &v
	}
	t.Timing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/availability/timing YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing struct {
	ChliThreshold   *uint32 `path:"chli-threshold" module:"nokia-conf"`
	ConsecDeltaT    *uint32 `path:"consec-delta-t" module:"nokia-conf"`
	FramesPerDeltaT *uint32 `path:"frames-per-delta-t" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) IsYANGGoStruct() {}

// GetChliThreshold retrieves the value of the leaf ChliThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChliThreshold is set, it can
// safely use t.GetChliThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChliThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) GetChliThreshold() uint32 {
	if t == nil || t.ChliThreshold == nil {
		return 5
	}
	return *t.ChliThreshold
}

// GetConsecDeltaT retrieves the value of the leaf ConsecDeltaT from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsecDeltaT is set, it can
// safely use t.GetConsecDeltaT() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsecDeltaT == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) GetConsecDeltaT() uint32 {
	if t == nil || t.ConsecDeltaT == nil {
		return 10
	}
	return *t.ConsecDeltaT
}

// GetFramesPerDeltaT retrieves the value of the leaf FramesPerDeltaT from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramesPerDeltaT is set, it can
// safely use t.GetFramesPerDeltaT() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramesPerDeltaT == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) GetFramesPerDeltaT() uint32 {
	if t == nil || t.FramesPerDeltaT == nil {
		return 0
	}
	return *t.FramesPerDeltaT
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChliThreshold == nil {
		var v uint32 = 5
		t.ChliThreshold = &v
	}
	if t.ConsecDeltaT == nil {
		var v uint32 = 10
		t.ConsecDeltaT = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_Availability_Timing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct {
	AvgFlrEvent              map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent                           `path:"avg-flr-event" module:"nokia-conf"`
	ChliEvent                map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent                               `path:"chli-event" module:"nokia-conf"`
	HliEvent                 map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent                                 `path:"hli-event" module:"nokia-conf"`
	UnavailabilityEvent      map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent           `path:"unavailability-event" module:"nokia-conf"`
	UndetAvailabilityEvent   map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent     `path:"undet-availability-event" module:"nokia-conf"`
	UndetUnavailabilityEvent map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent `path:"undet-unavailability-event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) IsYANGGoStruct() {}

// NewAvgFlrEvent creates a new entry in the AvgFlrEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) NewAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvgFlrEvent == nil {
		t.AvgFlrEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AvgFlrEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AvgFlrEvent", key)
	}

	t.AvgFlrEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent{
		Direction: Direction,
	}

	return t.AvgFlrEvent[key], nil
}

// RenameAvgFlrEvent renames an entry in the list AvgFlrEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) RenameAvgFlrEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction) error {
	if _, ok := t.AvgFlrEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in AvgFlrEvent", newK)
	}

	e, ok := t.AvgFlrEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AvgFlrEvent", oldK)
	}
	e.Direction = newK

	t.AvgFlrEvent[newK] = e
	delete(t.AvgFlrEvent, oldK)
	return nil
}

// GetOrCreateAvgFlrEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetOrCreateAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent {

	key := Direction

	if v, ok := t.AvgFlrEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAvgFlrEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAvgFlrEvent got unexpected error: %v", err))
	}
	return v
}

// GetAvgFlrEvent retrieves the value with the specified key from
// the AvgFlrEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.AvgFlrEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteAvgFlrEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) DeleteAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction) {
	key := Direction

	delete(t.AvgFlrEvent, key)
}

// AppendAvgFlrEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent struct to the
// list AvgFlrEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) AppendAvgFlrEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvgFlrEvent == nil {
		t.AvgFlrEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent)
	}

	if _, ok := t.AvgFlrEvent[key]; ok {
		return fmt.Errorf("duplicate key for list AvgFlrEvent %v", key)
	}

	t.AvgFlrEvent[key] = v
	return nil
}

// NewChliEvent creates a new entry in the ChliEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) NewChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChliEvent == nil {
		t.ChliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChliEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChliEvent", key)
	}

	t.ChliEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent{
		Direction: Direction,
	}

	return t.ChliEvent[key], nil
}

// RenameChliEvent renames an entry in the list ChliEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) RenameChliEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction) error {
	if _, ok := t.ChliEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in ChliEvent", newK)
	}

	e, ok := t.ChliEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChliEvent", oldK)
	}
	e.Direction = newK

	t.ChliEvent[newK] = e
	delete(t.ChliEvent, oldK)
	return nil
}

// GetOrCreateChliEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetOrCreateChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent {

	key := Direction

	if v, ok := t.ChliEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChliEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChliEvent got unexpected error: %v", err))
	}
	return v
}

// GetChliEvent retrieves the value with the specified key from
// the ChliEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.ChliEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteChliEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) DeleteChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction) {
	key := Direction

	delete(t.ChliEvent, key)
}

// AppendChliEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent struct to the
// list ChliEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) AppendChliEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChliEvent == nil {
		t.ChliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent)
	}

	if _, ok := t.ChliEvent[key]; ok {
		return fmt.Errorf("duplicate key for list ChliEvent %v", key)
	}

	t.ChliEvent[key] = v
	return nil
}

// NewHliEvent creates a new entry in the HliEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) NewHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HliEvent == nil {
		t.HliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HliEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HliEvent", key)
	}

	t.HliEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent{
		Direction: Direction,
	}

	return t.HliEvent[key], nil
}

// RenameHliEvent renames an entry in the list HliEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) RenameHliEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction) error {
	if _, ok := t.HliEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in HliEvent", newK)
	}

	e, ok := t.HliEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HliEvent", oldK)
	}
	e.Direction = newK

	t.HliEvent[newK] = e
	delete(t.HliEvent, oldK)
	return nil
}

// GetOrCreateHliEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetOrCreateHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent {

	key := Direction

	if v, ok := t.HliEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHliEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHliEvent got unexpected error: %v", err))
	}
	return v
}

// GetHliEvent retrieves the value with the specified key from
// the HliEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.HliEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteHliEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) DeleteHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction) {
	key := Direction

	delete(t.HliEvent, key)
}

// AppendHliEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent struct to the
// list HliEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) AppendHliEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HliEvent == nil {
		t.HliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent)
	}

	if _, ok := t.HliEvent[key]; ok {
		return fmt.Errorf("duplicate key for list HliEvent %v", key)
	}

	t.HliEvent[key] = v
	return nil
}

// NewUnavailabilityEvent creates a new entry in the UnavailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) NewUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnavailabilityEvent == nil {
		t.UnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnavailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnavailabilityEvent", key)
	}

	t.UnavailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent{
		Direction: Direction,
	}

	return t.UnavailabilityEvent[key], nil
}

// RenameUnavailabilityEvent renames an entry in the list UnavailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) RenameUnavailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction) error {
	if _, ok := t.UnavailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UnavailabilityEvent", newK)
	}

	e, ok := t.UnavailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnavailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UnavailabilityEvent[newK] = e
	delete(t.UnavailabilityEvent, oldK)
	return nil
}

// GetOrCreateUnavailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetOrCreateUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent {

	key := Direction

	if v, ok := t.UnavailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnavailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnavailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUnavailabilityEvent retrieves the value with the specified key from
// the UnavailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UnavailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnavailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) DeleteUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction) {
	key := Direction

	delete(t.UnavailabilityEvent, key)
}

// AppendUnavailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent struct to the
// list UnavailabilityEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) AppendUnavailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnavailabilityEvent == nil {
		t.UnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent)
	}

	if _, ok := t.UnavailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UnavailabilityEvent %v", key)
	}

	t.UnavailabilityEvent[key] = v
	return nil
}

// NewUndetAvailabilityEvent creates a new entry in the UndetAvailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) NewUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetAvailabilityEvent == nil {
		t.UndetAvailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UndetAvailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UndetAvailabilityEvent", key)
	}

	t.UndetAvailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent{
		Direction: Direction,
	}

	return t.UndetAvailabilityEvent[key], nil
}

// RenameUndetAvailabilityEvent renames an entry in the list UndetAvailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) RenameUndetAvailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction) error {
	if _, ok := t.UndetAvailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UndetAvailabilityEvent", newK)
	}

	e, ok := t.UndetAvailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UndetAvailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UndetAvailabilityEvent[newK] = e
	delete(t.UndetAvailabilityEvent, oldK)
	return nil
}

// GetOrCreateUndetAvailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetOrCreateUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent {

	key := Direction

	if v, ok := t.UndetAvailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUndetAvailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUndetAvailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUndetAvailabilityEvent retrieves the value with the specified key from
// the UndetAvailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UndetAvailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUndetAvailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) DeleteUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction) {
	key := Direction

	delete(t.UndetAvailabilityEvent, key)
}

// AppendUndetAvailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent struct to the
// list UndetAvailabilityEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) AppendUndetAvailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetAvailabilityEvent == nil {
		t.UndetAvailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent)
	}

	if _, ok := t.UndetAvailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UndetAvailabilityEvent %v", key)
	}

	t.UndetAvailabilityEvent[key] = v
	return nil
}

// NewUndetUnavailabilityEvent creates a new entry in the UndetUnavailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) NewUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetUnavailabilityEvent == nil {
		t.UndetUnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UndetUnavailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UndetUnavailabilityEvent", key)
	}

	t.UndetUnavailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent{
		Direction: Direction,
	}

	return t.UndetUnavailabilityEvent[key], nil
}

// RenameUndetUnavailabilityEvent renames an entry in the list UndetUnavailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) RenameUndetUnavailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction) error {
	if _, ok := t.UndetUnavailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UndetUnavailabilityEvent", newK)
	}

	e, ok := t.UndetUnavailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UndetUnavailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UndetUnavailabilityEvent[newK] = e
	delete(t.UndetUnavailabilityEvent, oldK)
	return nil
}

// GetOrCreateUndetUnavailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetOrCreateUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent {

	key := Direction

	if v, ok := t.UndetUnavailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUndetUnavailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUndetUnavailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUndetUnavailabilityEvent retrieves the value with the specified key from
// the UndetUnavailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) GetUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UndetUnavailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUndetUnavailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) DeleteUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction) {
	key := Direction

	delete(t.UndetUnavailabilityEvent, key)
}

// AppendUndetUnavailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent struct to the
// list UndetUnavailabilityEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) AppendUndetUnavailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetUnavailabilityEvent == nil {
		t.UndetUnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent)
	}

	if _, ok := t.UndetUnavailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UndetUnavailabilityEvent %v", key)
	}

	t.UndetUnavailabilityEvent[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AvgFlrEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.ChliEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.HliEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UnavailabilityEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UndetAvailabilityEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UndetUnavailabilityEvent {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events/avg-flr-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent struct {
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *float64                                                                          `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *float64                                                                          `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) GetClearThreshold() float64 {
	if t == nil || t.ClearThreshold == nil {
		return 0.0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) GetRaiseThreshold() float64 {
	if t == nil || t.RaiseThreshold == nil {
		return 0.0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_AvgFlrEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events/chli-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                          `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                          `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_ChliEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events/hli-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                         `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                         `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_HliEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events/unavailability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                    `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                    `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UnavailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events/undet-availability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                       `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                       `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetAvailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/lmm/loss-events/undet-unavailability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                         `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                         `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Lmm_LossEvents_UndetUnavailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm represents the /nokia-conf/configure/oam-pm/session/ethernet/slm YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	DataTlvSize        *uint32                                                    `path:"data-tlv-size" module:"nokia-conf"`
	FlrThreshold       *uint32                                                    `path:"flr-threshold" module:"nokia-conf"`
	HliForceCount      *bool                                                      `path:"hli-force-count" module:"nokia-conf"`
	Interval           *uint32                                                    `path:"interval" module:"nokia-conf"`
	LossEvents         *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents `path:"loss-events" module:"nokia-conf"`
	TestDuration       *uint32                                                    `path:"test-duration" module:"nokia-conf"`
	TestId             *uint32                                                    `path:"test-id" module:"nokia-conf"`
	Timing             *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing     `path:"timing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm) IsYANGGoStruct() {}

// GetOrCreateLossEvents retrieves the value of the LossEvents field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetOrCreateLossEvents() *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents {
	if t.LossEvents != nil {
		return t.LossEvents
	}
	t.LossEvents = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents{}
	return t.LossEvents
}

// GetOrCreateTiming retrieves the value of the Timing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetOrCreateTiming() *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing {
	if t.Timing != nil {
		return t.Timing
	}
	t.Timing = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing{}
	return t.Timing
}

// GetLossEvents returns the value of the LossEvents struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet_Slm. If the receiver or the field LossEvents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetLossEvents() *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents {
	if t != nil && t.LossEvents != nil {
		return t.LossEvents
	}
	return nil
}

// GetTiming returns the value of the Timing struct pointer
// from NokiaConf_Configure_OamPm_Session_Ethernet_Slm. If the receiver or the field Timing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetTiming() *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing {
	if t != nil && t.Timing != nil {
		return t.Timing
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDataTlvSize retrieves the value of the leaf DataTlvSize from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataTlvSize is set, it can
// safely use t.GetDataTlvSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataTlvSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetDataTlvSize() uint32 {
	if t == nil || t.DataTlvSize == nil {
		return 0
	}
	return *t.DataTlvSize
}

// GetFlrThreshold retrieves the value of the leaf FlrThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlrThreshold is set, it can
// safely use t.GetFlrThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlrThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetFlrThreshold() uint32 {
	if t == nil || t.FlrThreshold == nil {
		return 50
	}
	return *t.FlrThreshold
}

// GetHliForceCount retrieves the value of the leaf HliForceCount from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HliForceCount is set, it can
// safely use t.GetHliForceCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HliForceCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetHliForceCount() bool {
	if t == nil || t.HliForceCount == nil {
		return false
	}
	return *t.HliForceCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetTestDuration retrieves the value of the leaf TestDuration from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetTestDuration() uint32 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTestId retrieves the value of the leaf TestId from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestId is set, it can
// safely use t.GetTestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) GetTestId() uint32 {
	if t == nil || t.TestId == nil {
		return 0
	}
	return *t.TestId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DataTlvSize == nil {
		var v uint32 = 0
		t.DataTlvSize = &v
	}
	if t.FlrThreshold == nil {
		var v uint32 = 50
		t.FlrThreshold = &v
	}
	if t.HliForceCount == nil {
		var v bool = false
		t.HliForceCount = &v
	}
	t.LossEvents.PopulateDefaults()
	t.Timing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct {
	AvgFlrEvent              map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent                           `path:"avg-flr-event" module:"nokia-conf"`
	ChliEvent                map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent                               `path:"chli-event" module:"nokia-conf"`
	HliEvent                 map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent                                 `path:"hli-event" module:"nokia-conf"`
	UnavailabilityEvent      map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent           `path:"unavailability-event" module:"nokia-conf"`
	UndetAvailabilityEvent   map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent     `path:"undet-availability-event" module:"nokia-conf"`
	UndetUnavailabilityEvent map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent `path:"undet-unavailability-event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) IsYANGGoStruct() {}

// NewAvgFlrEvent creates a new entry in the AvgFlrEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) NewAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvgFlrEvent == nil {
		t.AvgFlrEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AvgFlrEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AvgFlrEvent", key)
	}

	t.AvgFlrEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent{
		Direction: Direction,
	}

	return t.AvgFlrEvent[key], nil
}

// RenameAvgFlrEvent renames an entry in the list AvgFlrEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) RenameAvgFlrEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction) error {
	if _, ok := t.AvgFlrEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in AvgFlrEvent", newK)
	}

	e, ok := t.AvgFlrEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AvgFlrEvent", oldK)
	}
	e.Direction = newK

	t.AvgFlrEvent[newK] = e
	delete(t.AvgFlrEvent, oldK)
	return nil
}

// GetOrCreateAvgFlrEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetOrCreateAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent {

	key := Direction

	if v, ok := t.AvgFlrEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAvgFlrEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAvgFlrEvent got unexpected error: %v", err))
	}
	return v
}

// GetAvgFlrEvent retrieves the value with the specified key from
// the AvgFlrEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.AvgFlrEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteAvgFlrEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) DeleteAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction) {
	key := Direction

	delete(t.AvgFlrEvent, key)
}

// AppendAvgFlrEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent struct to the
// list AvgFlrEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) AppendAvgFlrEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvgFlrEvent == nil {
		t.AvgFlrEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent)
	}

	if _, ok := t.AvgFlrEvent[key]; ok {
		return fmt.Errorf("duplicate key for list AvgFlrEvent %v", key)
	}

	t.AvgFlrEvent[key] = v
	return nil
}

// NewChliEvent creates a new entry in the ChliEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) NewChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChliEvent == nil {
		t.ChliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChliEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChliEvent", key)
	}

	t.ChliEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent{
		Direction: Direction,
	}

	return t.ChliEvent[key], nil
}

// RenameChliEvent renames an entry in the list ChliEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) RenameChliEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction) error {
	if _, ok := t.ChliEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in ChliEvent", newK)
	}

	e, ok := t.ChliEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChliEvent", oldK)
	}
	e.Direction = newK

	t.ChliEvent[newK] = e
	delete(t.ChliEvent, oldK)
	return nil
}

// GetOrCreateChliEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetOrCreateChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent {

	key := Direction

	if v, ok := t.ChliEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChliEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChliEvent got unexpected error: %v", err))
	}
	return v
}

// GetChliEvent retrieves the value with the specified key from
// the ChliEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.ChliEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteChliEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) DeleteChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction) {
	key := Direction

	delete(t.ChliEvent, key)
}

// AppendChliEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent struct to the
// list ChliEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) AppendChliEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChliEvent == nil {
		t.ChliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent)
	}

	if _, ok := t.ChliEvent[key]; ok {
		return fmt.Errorf("duplicate key for list ChliEvent %v", key)
	}

	t.ChliEvent[key] = v
	return nil
}

// NewHliEvent creates a new entry in the HliEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) NewHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HliEvent == nil {
		t.HliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HliEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HliEvent", key)
	}

	t.HliEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent{
		Direction: Direction,
	}

	return t.HliEvent[key], nil
}

// RenameHliEvent renames an entry in the list HliEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) RenameHliEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction) error {
	if _, ok := t.HliEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in HliEvent", newK)
	}

	e, ok := t.HliEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HliEvent", oldK)
	}
	e.Direction = newK

	t.HliEvent[newK] = e
	delete(t.HliEvent, oldK)
	return nil
}

// GetOrCreateHliEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetOrCreateHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent {

	key := Direction

	if v, ok := t.HliEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHliEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHliEvent got unexpected error: %v", err))
	}
	return v
}

// GetHliEvent retrieves the value with the specified key from
// the HliEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.HliEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteHliEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) DeleteHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction) {
	key := Direction

	delete(t.HliEvent, key)
}

// AppendHliEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent struct to the
// list HliEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) AppendHliEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HliEvent == nil {
		t.HliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent)
	}

	if _, ok := t.HliEvent[key]; ok {
		return fmt.Errorf("duplicate key for list HliEvent %v", key)
	}

	t.HliEvent[key] = v
	return nil
}

// NewUnavailabilityEvent creates a new entry in the UnavailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) NewUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnavailabilityEvent == nil {
		t.UnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnavailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnavailabilityEvent", key)
	}

	t.UnavailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent{
		Direction: Direction,
	}

	return t.UnavailabilityEvent[key], nil
}

// RenameUnavailabilityEvent renames an entry in the list UnavailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) RenameUnavailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction) error {
	if _, ok := t.UnavailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UnavailabilityEvent", newK)
	}

	e, ok := t.UnavailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnavailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UnavailabilityEvent[newK] = e
	delete(t.UnavailabilityEvent, oldK)
	return nil
}

// GetOrCreateUnavailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetOrCreateUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent {

	key := Direction

	if v, ok := t.UnavailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnavailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnavailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUnavailabilityEvent retrieves the value with the specified key from
// the UnavailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UnavailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnavailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) DeleteUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction) {
	key := Direction

	delete(t.UnavailabilityEvent, key)
}

// AppendUnavailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent struct to the
// list UnavailabilityEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) AppendUnavailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnavailabilityEvent == nil {
		t.UnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent)
	}

	if _, ok := t.UnavailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UnavailabilityEvent %v", key)
	}

	t.UnavailabilityEvent[key] = v
	return nil
}

// NewUndetAvailabilityEvent creates a new entry in the UndetAvailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) NewUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetAvailabilityEvent == nil {
		t.UndetAvailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UndetAvailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UndetAvailabilityEvent", key)
	}

	t.UndetAvailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent{
		Direction: Direction,
	}

	return t.UndetAvailabilityEvent[key], nil
}

// RenameUndetAvailabilityEvent renames an entry in the list UndetAvailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) RenameUndetAvailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction) error {
	if _, ok := t.UndetAvailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UndetAvailabilityEvent", newK)
	}

	e, ok := t.UndetAvailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UndetAvailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UndetAvailabilityEvent[newK] = e
	delete(t.UndetAvailabilityEvent, oldK)
	return nil
}

// GetOrCreateUndetAvailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetOrCreateUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent {

	key := Direction

	if v, ok := t.UndetAvailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUndetAvailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUndetAvailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUndetAvailabilityEvent retrieves the value with the specified key from
// the UndetAvailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UndetAvailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUndetAvailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) DeleteUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction) {
	key := Direction

	delete(t.UndetAvailabilityEvent, key)
}

// AppendUndetAvailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent struct to the
// list UndetAvailabilityEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) AppendUndetAvailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetAvailabilityEvent == nil {
		t.UndetAvailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent)
	}

	if _, ok := t.UndetAvailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UndetAvailabilityEvent %v", key)
	}

	t.UndetAvailabilityEvent[key] = v
	return nil
}

// NewUndetUnavailabilityEvent creates a new entry in the UndetUnavailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) NewUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetUnavailabilityEvent == nil {
		t.UndetUnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UndetUnavailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UndetUnavailabilityEvent", key)
	}

	t.UndetUnavailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent{
		Direction: Direction,
	}

	return t.UndetUnavailabilityEvent[key], nil
}

// RenameUndetUnavailabilityEvent renames an entry in the list UndetUnavailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) RenameUndetUnavailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction) error {
	if _, ok := t.UndetUnavailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UndetUnavailabilityEvent", newK)
	}

	e, ok := t.UndetUnavailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UndetUnavailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UndetUnavailabilityEvent[newK] = e
	delete(t.UndetUnavailabilityEvent, oldK)
	return nil
}

// GetOrCreateUndetUnavailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetOrCreateUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent {

	key := Direction

	if v, ok := t.UndetUnavailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUndetUnavailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUndetUnavailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUndetUnavailabilityEvent retrieves the value with the specified key from
// the UndetUnavailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) GetUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UndetUnavailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUndetUnavailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) DeleteUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction) {
	key := Direction

	delete(t.UndetUnavailabilityEvent, key)
}

// AppendUndetUnavailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent struct to the
// list UndetUnavailabilityEvent of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) AppendUndetUnavailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetUnavailabilityEvent == nil {
		t.UndetUnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent)
	}

	if _, ok := t.UndetUnavailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UndetUnavailabilityEvent %v", key)
	}

	t.UndetUnavailabilityEvent[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AvgFlrEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.ChliEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.HliEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UnavailabilityEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UndetAvailabilityEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UndetUnavailabilityEvent {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events/avg-flr-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent struct {
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *float64                                                                          `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *float64                                                                          `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) GetClearThreshold() float64 {
	if t == nil || t.ClearThreshold == nil {
		return 0.0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) GetRaiseThreshold() float64 {
	if t == nil || t.RaiseThreshold == nil {
		return 0.0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_AvgFlrEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events/chli-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                          `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                          `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_ChliEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events/hli-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                         `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                         `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_HliEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events/unavailability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                    `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                    `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UnavailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events/undet-availability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                       `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                       `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetAvailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/loss-events/undet-unavailability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                         `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                         `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_LossEvents_UndetUnavailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing represents the /nokia-conf/configure/oam-pm/session/ethernet/slm/timing YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing struct {
	ChliThreshold   *uint32 `path:"chli-threshold" module:"nokia-conf"`
	ConsecDeltaT    *uint32 `path:"consec-delta-t" module:"nokia-conf"`
	FramesPerDeltaT *uint32 `path:"frames-per-delta-t" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) IsYANGGoStruct() {}

// GetChliThreshold retrieves the value of the leaf ChliThreshold from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChliThreshold is set, it can
// safely use t.GetChliThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChliThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) GetChliThreshold() uint32 {
	if t == nil || t.ChliThreshold == nil {
		return 5
	}
	return *t.ChliThreshold
}

// GetConsecDeltaT retrieves the value of the leaf ConsecDeltaT from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsecDeltaT is set, it can
// safely use t.GetConsecDeltaT() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsecDeltaT == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) GetConsecDeltaT() uint32 {
	if t == nil || t.ConsecDeltaT == nil {
		return 10
	}
	return *t.ConsecDeltaT
}

// GetFramesPerDeltaT retrieves the value of the leaf FramesPerDeltaT from the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramesPerDeltaT is set, it can
// safely use t.GetFramesPerDeltaT() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramesPerDeltaT == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) GetFramesPerDeltaT() uint32 {
	if t == nil || t.FramesPerDeltaT == nil {
		return 0
	}
	return *t.FramesPerDeltaT
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChliThreshold == nil {
		var v uint32 = 5
		t.ChliThreshold = &v
	}
	if t.ConsecDeltaT == nil {
		var v uint32 = 10
		t.ConsecDeltaT = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Slm_Timing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ethernet_Source represents the /nokia-conf/configure/oam-pm/session/ethernet/source YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ethernet_Source struct {
	MaAdminName *string `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName *string `path:"md-admin-name" module:"nokia-conf"`
	Mep         *uint32 `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ethernet_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Source) IsYANGGoStruct() {}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_OamPm_Session_Ethernet_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_OamPm_Session_Ethernet_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMep retrieves the value of the leaf Mep from the NokiaConf_Configure_OamPm_Session_Ethernet_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mep is set, it can
// safely use t.GetMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) GetMep() uint32 {
	if t == nil || t.Mep == nil {
		return 0
	}
	return *t.Mep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ethernet_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ethernet_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ethernet_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ethernet_Source.
func (*NokiaConf_Configure_OamPm_Session_Ethernet_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip represents the /nokia-conf/configure/oam-pm/session/ip YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip struct {
	AllowEgressRemarkDscp *bool                                              `path:"allow-egress-remark-dscp" module:"nokia-conf"`
	Destination           *string                                            `path:"destination" module:"nokia-conf"`
	DestinationUdpPort    *int32                                             `path:"destination-udp-port" module:"nokia-conf"`
	DoNotFragment         *bool                                              `path:"do-not-fragment" module:"nokia-conf"`
	Dscp                  NokiaConf_Configure_OamPm_Session_Ip_Dscp_Union    `path:"dscp" module:"nokia-conf"`
	Fc                    E_NokiaTypesOam_ForwardingClass                    `path:"fc" module:"nokia-conf"`
	Forwarding            *NokiaConf_Configure_OamPm_Session_Ip_Forwarding   `path:"forwarding" module:"nokia-conf" yangPresence:"true"`
	Pattern               NokiaConf_Configure_OamPm_Session_Ip_Pattern_Union `path:"pattern" module:"nokia-conf"`
	Profile               E_NokiaConf_Configure_OamPm_Session_Ip_Profile     `path:"profile" module:"nokia-conf"`
	RouterInstance        *string                                            `path:"router-instance" module:"nokia-conf"`
	Source                *string                                            `path:"source" module:"nokia-conf"`
	SourceUdpPort         *int32                                             `path:"source-udp-port" module:"nokia-conf"`
	Ttl                   *uint32                                            `path:"ttl" module:"nokia-conf"`
	TwampLight            *NokiaConf_Configure_OamPm_Session_Ip_TwampLight   `path:"twamp-light" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip) IsYANGGoStruct() {}

// GetOrCreateForwarding retrieves the value of the Forwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetOrCreateForwarding() *NokiaConf_Configure_OamPm_Session_Ip_Forwarding {
	if t.Forwarding != nil {
		return t.Forwarding
	}
	t.Forwarding = &NokiaConf_Configure_OamPm_Session_Ip_Forwarding{}
	return t.Forwarding
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetOrCreateTwampLight() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight{}
	return t.TwampLight
}

// GetForwarding returns the value of the Forwarding struct pointer
// from NokiaConf_Configure_OamPm_Session_Ip. If the receiver or the field Forwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetForwarding() *NokiaConf_Configure_OamPm_Session_Ip_Forwarding {
	if t != nil && t.Forwarding != nil {
		return t.Forwarding
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_OamPm_Session_Ip. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetTwampLight() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetAllowEgressRemarkDscp retrieves the value of the leaf AllowEgressRemarkDscp from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowEgressRemarkDscp is set, it can
// safely use t.GetAllowEgressRemarkDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowEgressRemarkDscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetAllowEgressRemarkDscp() bool {
	if t == nil || t.AllowEgressRemarkDscp == nil {
		return false
	}
	return *t.AllowEgressRemarkDscp
}

// GetDestination retrieves the value of the leaf Destination from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// GetDestinationUdpPort retrieves the value of the leaf DestinationUdpPort from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationUdpPort is set, it can
// safely use t.GetDestinationUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationUdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetDestinationUdpPort() int32 {
	if t == nil || t.DestinationUdpPort == nil {
		return 0
	}
	return *t.DestinationUdpPort
}

// GetDoNotFragment retrieves the value of the leaf DoNotFragment from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DoNotFragment is set, it can
// safely use t.GetDoNotFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DoNotFragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetDoNotFragment() bool {
	if t == nil || t.DoNotFragment == nil {
		return false
	}
	return *t.DoNotFragment
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetDscp() NokiaConf_Configure_OamPm_Session_Ip_Dscp_Union {
	if t == nil || t.Dscp == nil {
		return NokiaTypesOam_DscpResolve_resolve
	}
	return t.Dscp
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetFc() E_NokiaTypesOam_ForwardingClass {
	if t == nil || t.Fc == 0 {
		return NokiaTypesOam_ForwardingClass_be
	}
	return t.Fc
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetPattern() NokiaConf_Configure_OamPm_Session_Ip_Pattern_Union {
	if t == nil || t.Pattern == nil {
		return UnionUint32(0)
	}
	return t.Pattern
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetProfile() E_NokiaConf_Configure_OamPm_Session_Ip_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaConf_Configure_OamPm_Session_Ip_Profile_out
	}
	return t.Profile
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// GetSourceUdpPort retrieves the value of the leaf SourceUdpPort from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceUdpPort is set, it can
// safely use t.GetSourceUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceUdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetSourceUdpPort() int32 {
	if t == nil || t.SourceUdpPort == nil {
		return 0
	}
	return *t.SourceUdpPort
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_OamPm_Session_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 255
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowEgressRemarkDscp == nil {
		var v bool = false
		t.AllowEgressRemarkDscp = &v
	}
	if t.DoNotFragment == nil {
		var v bool = false
		t.DoNotFragment = &v
	}
	if t.Dscp == nil {
		t.Dscp = NokiaTypesOam_DscpResolve_resolve
	}
	if t.Fc == 0 {
		t.Fc = NokiaTypesOam_ForwardingClass_be
	}
	if t.Pattern == nil {
		t.Pattern = UnionUint32(0)
	}
	if t.Profile == 0 {
		t.Profile = NokiaConf_Configure_OamPm_Session_Ip_Profile_out
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.Ttl == nil {
		var v uint32 = 255
		t.Ttl = &v
	}
	t.Forwarding.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip.
func (*NokiaConf_Configure_OamPm_Session_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_Forwarding represents the /nokia-conf/configure/oam-pm/session/ip/forwarding YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_Forwarding struct {
	BypassRouting YANGEmpty `path:"bypass-routing" module:"nokia-conf"`
	Interface     *string   `path:"interface" module:"nokia-conf"`
	NextHop       *string   `path:"next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_Forwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_Forwarding) IsYANGGoStruct() {}

// GetBypassRouting retrieves the value of the leaf BypassRouting from the NokiaConf_Configure_OamPm_Session_Ip_Forwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassRouting is set, it can
// safely use t.GetBypassRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) GetBypassRouting() YANGEmpty {
	if t == nil || t.BypassRouting == false {
		return false
	}
	return t.BypassRouting
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_OamPm_Session_Ip_Forwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_OamPm_Session_Ip_Forwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_Forwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_Forwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_Forwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_Forwarding.
func (*NokiaConf_Configure_OamPm_Session_Ip_Forwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight struct {
	AdminState               E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                         `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	ApplyGroups              []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	DelayTemplate            *string                                                       `path:"delay-template" module:"nokia-conf"`
	Interval                 *uint32                                                       `path:"interval" module:"nokia-conf"`
	Loss                     *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss         `path:"loss" module:"nokia-conf"`
	LossEvents               *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents   `path:"loss-events" module:"nokia-conf"`
	PadSize                  *uint32                                                       `path:"pad-size" module:"nokia-conf"`
	RecordStats              E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_RecordStats `path:"record-stats" module:"nokia-conf"`
	TestDuration             *uint32                                                       `path:"test-duration" module:"nokia-conf"`
	TestId                   *uint32                                                       `path:"test-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight) IsYANGGoStruct() {}

// GetOrCreateLoss retrieves the value of the Loss field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetOrCreateLoss() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss {
	if t.Loss != nil {
		return t.Loss
	}
	t.Loss = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss{}
	return t.Loss
}

// GetOrCreateLossEvents retrieves the value of the LossEvents field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetOrCreateLossEvents() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents {
	if t.LossEvents != nil {
		return t.LossEvents
	}
	t.LossEvents = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents{}
	return t.LossEvents
}

// GetLoss returns the value of the Loss struct pointer
// from NokiaConf_Configure_OamPm_Session_Ip_TwampLight. If the receiver or the field Loss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetLoss() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss {
	if t != nil && t.Loss != nil {
		return t.Loss
	}
	return nil
}

// GetLossEvents returns the value of the LossEvents struct pointer
// from NokiaConf_Configure_OamPm_Session_Ip_TwampLight. If the receiver or the field LossEvents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetLossEvents() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents {
	if t != nil && t.LossEvents != nil {
		return t.LossEvents
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDelayTemplate retrieves the value of the leaf DelayTemplate from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayTemplate is set, it can
// safely use t.GetDelayTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetDelayTemplate() string {
	if t == nil || t.DelayTemplate == nil {
		return ""
	}
	return *t.DelayTemplate
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetPadSize retrieves the value of the leaf PadSize from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadSize is set, it can
// safely use t.GetPadSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetPadSize() uint32 {
	if t == nil || t.PadSize == nil {
		return 0
	}
	return *t.PadSize
}

// GetRecordStats retrieves the value of the leaf RecordStats from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordStats is set, it can
// safely use t.GetRecordStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetRecordStats() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_RecordStats {
	if t == nil || t.RecordStats == 0 {
		return NokiaConf_Configure_OamPm_Session_Ip_TwampLight_RecordStats_delay
	}
	return t.RecordStats
}

// GetTestDuration retrieves the value of the leaf TestDuration from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetTestDuration() uint32 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTestId retrieves the value of the leaf TestId from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestId is set, it can
// safely use t.GetTestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) GetTestId() uint32 {
	if t == nil || t.TestId == nil {
		return 0
	}
	return *t.TestId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	if t.PadSize == nil {
		var v uint32 = 0
		t.PadSize = &v
	}
	if t.RecordStats == 0 {
		t.RecordStats = NokiaConf_Configure_OamPm_Session_Ip_TwampLight_RecordStats_delay
	}
	t.Loss.PopulateDefaults()
	t.LossEvents.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss struct {
	FlrThreshold  *uint32                                                      `path:"flr-threshold" module:"nokia-conf"`
	HliForceCount *bool                                                        `path:"hli-force-count" module:"nokia-conf"`
	Timing        *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing `path:"timing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) IsYANGGoStruct() {}

// GetOrCreateTiming retrieves the value of the Timing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) GetOrCreateTiming() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing {
	if t.Timing != nil {
		return t.Timing
	}
	t.Timing = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing{}
	return t.Timing
}

// GetTiming returns the value of the Timing struct pointer
// from NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss. If the receiver or the field Timing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) GetTiming() *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing {
	if t != nil && t.Timing != nil {
		return t.Timing
	}
	return nil
}

// GetFlrThreshold retrieves the value of the leaf FlrThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlrThreshold is set, it can
// safely use t.GetFlrThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlrThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) GetFlrThreshold() uint32 {
	if t == nil || t.FlrThreshold == nil {
		return 50
	}
	return *t.FlrThreshold
}

// GetHliForceCount retrieves the value of the leaf HliForceCount from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HliForceCount is set, it can
// safely use t.GetHliForceCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HliForceCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) GetHliForceCount() bool {
	if t == nil || t.HliForceCount == nil {
		return false
	}
	return *t.HliForceCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlrThreshold == nil {
		var v uint32 = 50
		t.FlrThreshold = &v
	}
	if t.HliForceCount == nil {
		var v bool = false
		t.HliForceCount = &v
	}
	t.Timing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct {
	AvgFlrEvent              map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent                           `path:"avg-flr-event" module:"nokia-conf"`
	ChliEvent                map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent                               `path:"chli-event" module:"nokia-conf"`
	HliEvent                 map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent                                 `path:"hli-event" module:"nokia-conf"`
	UnavailabilityEvent      map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent           `path:"unavailability-event" module:"nokia-conf"`
	UndetAvailabilityEvent   map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent     `path:"undet-availability-event" module:"nokia-conf"`
	UndetUnavailabilityEvent map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent `path:"undet-unavailability-event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) IsYANGGoStruct() {}

// NewAvgFlrEvent creates a new entry in the AvgFlrEvent list of the
// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) NewAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvgFlrEvent == nil {
		t.AvgFlrEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AvgFlrEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AvgFlrEvent", key)
	}

	t.AvgFlrEvent[key] = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent{
		Direction: Direction,
	}

	return t.AvgFlrEvent[key], nil
}

// RenameAvgFlrEvent renames an entry in the list AvgFlrEvent within
// the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) RenameAvgFlrEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction) error {
	if _, ok := t.AvgFlrEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in AvgFlrEvent", newK)
	}

	e, ok := t.AvgFlrEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AvgFlrEvent", oldK)
	}
	e.Direction = newK

	t.AvgFlrEvent[newK] = e
	delete(t.AvgFlrEvent, oldK)
	return nil
}

// GetOrCreateAvgFlrEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetOrCreateAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent {

	key := Direction

	if v, ok := t.AvgFlrEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAvgFlrEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAvgFlrEvent got unexpected error: %v", err))
	}
	return v
}

// GetAvgFlrEvent retrieves the value with the specified key from
// the AvgFlrEvent map field of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.AvgFlrEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteAvgFlrEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) DeleteAvgFlrEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction) {
	key := Direction

	delete(t.AvgFlrEvent, key)
}

// AppendAvgFlrEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent struct to the
// list AvgFlrEvent of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) AppendAvgFlrEvent(v *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AvgFlrEvent == nil {
		t.AvgFlrEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent)
	}

	if _, ok := t.AvgFlrEvent[key]; ok {
		return fmt.Errorf("duplicate key for list AvgFlrEvent %v", key)
	}

	t.AvgFlrEvent[key] = v
	return nil
}

// NewChliEvent creates a new entry in the ChliEvent list of the
// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) NewChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChliEvent == nil {
		t.ChliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChliEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChliEvent", key)
	}

	t.ChliEvent[key] = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent{
		Direction: Direction,
	}

	return t.ChliEvent[key], nil
}

// RenameChliEvent renames an entry in the list ChliEvent within
// the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) RenameChliEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction) error {
	if _, ok := t.ChliEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in ChliEvent", newK)
	}

	e, ok := t.ChliEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChliEvent", oldK)
	}
	e.Direction = newK

	t.ChliEvent[newK] = e
	delete(t.ChliEvent, oldK)
	return nil
}

// GetOrCreateChliEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetOrCreateChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent {

	key := Direction

	if v, ok := t.ChliEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChliEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChliEvent got unexpected error: %v", err))
	}
	return v
}

// GetChliEvent retrieves the value with the specified key from
// the ChliEvent map field of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.ChliEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteChliEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) DeleteChliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction) {
	key := Direction

	delete(t.ChliEvent, key)
}

// AppendChliEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent struct to the
// list ChliEvent of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) AppendChliEvent(v *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChliEvent == nil {
		t.ChliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent)
	}

	if _, ok := t.ChliEvent[key]; ok {
		return fmt.Errorf("duplicate key for list ChliEvent %v", key)
	}

	t.ChliEvent[key] = v
	return nil
}

// NewHliEvent creates a new entry in the HliEvent list of the
// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) NewHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HliEvent == nil {
		t.HliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HliEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HliEvent", key)
	}

	t.HliEvent[key] = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent{
		Direction: Direction,
	}

	return t.HliEvent[key], nil
}

// RenameHliEvent renames an entry in the list HliEvent within
// the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) RenameHliEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction) error {
	if _, ok := t.HliEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in HliEvent", newK)
	}

	e, ok := t.HliEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HliEvent", oldK)
	}
	e.Direction = newK

	t.HliEvent[newK] = e
	delete(t.HliEvent, oldK)
	return nil
}

// GetOrCreateHliEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetOrCreateHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent {

	key := Direction

	if v, ok := t.HliEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHliEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHliEvent got unexpected error: %v", err))
	}
	return v
}

// GetHliEvent retrieves the value with the specified key from
// the HliEvent map field of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.HliEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteHliEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) DeleteHliEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction) {
	key := Direction

	delete(t.HliEvent, key)
}

// AppendHliEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent struct to the
// list HliEvent of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) AppendHliEvent(v *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HliEvent == nil {
		t.HliEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent)
	}

	if _, ok := t.HliEvent[key]; ok {
		return fmt.Errorf("duplicate key for list HliEvent %v", key)
	}

	t.HliEvent[key] = v
	return nil
}

// NewUnavailabilityEvent creates a new entry in the UnavailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) NewUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnavailabilityEvent == nil {
		t.UnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnavailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnavailabilityEvent", key)
	}

	t.UnavailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent{
		Direction: Direction,
	}

	return t.UnavailabilityEvent[key], nil
}

// RenameUnavailabilityEvent renames an entry in the list UnavailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) RenameUnavailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction) error {
	if _, ok := t.UnavailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UnavailabilityEvent", newK)
	}

	e, ok := t.UnavailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnavailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UnavailabilityEvent[newK] = e
	delete(t.UnavailabilityEvent, oldK)
	return nil
}

// GetOrCreateUnavailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetOrCreateUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent {

	key := Direction

	if v, ok := t.UnavailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnavailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnavailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUnavailabilityEvent retrieves the value with the specified key from
// the UnavailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UnavailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnavailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) DeleteUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction) {
	key := Direction

	delete(t.UnavailabilityEvent, key)
}

// AppendUnavailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent struct to the
// list UnavailabilityEvent of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) AppendUnavailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnavailabilityEvent == nil {
		t.UnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent)
	}

	if _, ok := t.UnavailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UnavailabilityEvent %v", key)
	}

	t.UnavailabilityEvent[key] = v
	return nil
}

// NewUndetAvailabilityEvent creates a new entry in the UndetAvailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) NewUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetAvailabilityEvent == nil {
		t.UndetAvailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UndetAvailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UndetAvailabilityEvent", key)
	}

	t.UndetAvailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent{
		Direction: Direction,
	}

	return t.UndetAvailabilityEvent[key], nil
}

// RenameUndetAvailabilityEvent renames an entry in the list UndetAvailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) RenameUndetAvailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction) error {
	if _, ok := t.UndetAvailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UndetAvailabilityEvent", newK)
	}

	e, ok := t.UndetAvailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UndetAvailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UndetAvailabilityEvent[newK] = e
	delete(t.UndetAvailabilityEvent, oldK)
	return nil
}

// GetOrCreateUndetAvailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetOrCreateUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent {

	key := Direction

	if v, ok := t.UndetAvailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUndetAvailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUndetAvailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUndetAvailabilityEvent retrieves the value with the specified key from
// the UndetAvailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UndetAvailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUndetAvailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) DeleteUndetAvailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction) {
	key := Direction

	delete(t.UndetAvailabilityEvent, key)
}

// AppendUndetAvailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent struct to the
// list UndetAvailabilityEvent of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) AppendUndetAvailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetAvailabilityEvent == nil {
		t.UndetAvailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent)
	}

	if _, ok := t.UndetAvailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UndetAvailabilityEvent %v", key)
	}

	t.UndetAvailabilityEvent[key] = v
	return nil
}

// NewUndetUnavailabilityEvent creates a new entry in the UndetUnavailabilityEvent list of the
// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) NewUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction) (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetUnavailabilityEvent == nil {
		t.UndetUnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UndetUnavailabilityEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UndetUnavailabilityEvent", key)
	}

	t.UndetUnavailabilityEvent[key] = &NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent{
		Direction: Direction,
	}

	return t.UndetUnavailabilityEvent[key], nil
}

// RenameUndetUnavailabilityEvent renames an entry in the list UndetUnavailabilityEvent within
// the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) RenameUndetUnavailabilityEvent(oldK, newK E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction) error {
	if _, ok := t.UndetUnavailabilityEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in UndetUnavailabilityEvent", newK)
	}

	e, ok := t.UndetUnavailabilityEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UndetUnavailabilityEvent", oldK)
	}
	e.Direction = newK

	t.UndetUnavailabilityEvent[newK] = e
	delete(t.UndetUnavailabilityEvent, oldK)
	return nil
}

// GetOrCreateUndetUnavailabilityEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetOrCreateUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent {

	key := Direction

	if v, ok := t.UndetUnavailabilityEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUndetUnavailabilityEvent(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUndetUnavailabilityEvent got unexpected error: %v", err))
	}
	return v
}

// GetUndetUnavailabilityEvent retrieves the value with the specified key from
// the UndetUnavailabilityEvent map field of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) GetUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction) *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.UndetUnavailabilityEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteUndetUnavailabilityEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) DeleteUndetUnavailabilityEvent(Direction E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction) {
	key := Direction

	delete(t.UndetUnavailabilityEvent, key)
}

// AppendUndetUnavailabilityEvent appends the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent struct to the
// list UndetUnavailabilityEvent of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) AppendUndetUnavailabilityEvent(v *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UndetUnavailabilityEvent == nil {
		t.UndetUnavailabilityEvent = make(map[E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction]*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent)
	}

	if _, ok := t.UndetUnavailabilityEvent[key]; ok {
		return fmt.Errorf("duplicate key for list UndetUnavailabilityEvent %v", key)
	}

	t.UndetUnavailabilityEvent[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AvgFlrEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.ChliEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.HliEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UnavailabilityEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UndetAvailabilityEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.UndetUnavailabilityEvent {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events/avg-flr-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *float64                                                                           `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *float64                                                                           `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) GetClearThreshold() float64 {
	if t == nil || t.ClearThreshold == nil {
		return 0.0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) GetRaiseThreshold() float64 {
	if t == nil || t.RaiseThreshold == nil {
		return 0.0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_AvgFlrEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events/chli-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent struct {
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                           `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                           `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_ChliEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events/hli-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                          `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                          `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_HliEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events/unavailability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                     `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                     `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UnavailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events/undet-availability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                        `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                        `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetAvailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss-events/undet-unavailability-event YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearThreshold     *int32                                                                                          `path:"clear-threshold" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction `path:"direction" module:"nokia-conf"`
	RaiseThreshold     *int32                                                                                          `path:"raise-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearThreshold retrieves the value of the leaf ClearThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearThreshold is set, it can
// safely use t.GetClearThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) GetClearThreshold() int32 {
	if t == nil || t.ClearThreshold == nil {
		return 0
	}
	return *t.ClearThreshold
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) GetDirection() E_NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetRaiseThreshold retrieves the value of the leaf RaiseThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RaiseThreshold is set, it can
// safely use t.GetRaiseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RaiseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) GetRaiseThreshold() int32 {
	if t == nil || t.RaiseThreshold == nil {
		return 0
	}
	return *t.RaiseThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_LossEvents_UndetUnavailabilityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing represents the /nokia-conf/configure/oam-pm/session/ip/twamp-light/loss/timing YANG schema element.
type NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing struct {
	ChliThreshold   *uint32 `path:"chli-threshold" module:"nokia-conf"`
	ConsecDeltaT    *uint32 `path:"consec-delta-t" module:"nokia-conf"`
	FramesPerDeltaT *uint32 `path:"frames-per-delta-t" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) IsYANGGoStruct() {}

// GetChliThreshold retrieves the value of the leaf ChliThreshold from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChliThreshold is set, it can
// safely use t.GetChliThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChliThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) GetChliThreshold() uint32 {
	if t == nil || t.ChliThreshold == nil {
		return 5
	}
	return *t.ChliThreshold
}

// GetConsecDeltaT retrieves the value of the leaf ConsecDeltaT from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsecDeltaT is set, it can
// safely use t.GetConsecDeltaT() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsecDeltaT == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) GetConsecDeltaT() uint32 {
	if t == nil || t.ConsecDeltaT == nil {
		return 10
	}
	return *t.ConsecDeltaT
}

// GetFramesPerDeltaT retrieves the value of the leaf FramesPerDeltaT from the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramesPerDeltaT is set, it can
// safely use t.GetFramesPerDeltaT() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramesPerDeltaT == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) GetFramesPerDeltaT() uint32 {
	if t == nil || t.FramesPerDeltaT == nil {
		return 0
	}
	return *t.FramesPerDeltaT
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ChliThreshold == nil {
		var v uint32 = 5
		t.ChliThreshold = &v
	}
	if t.ConsecDeltaT == nil {
		var v uint32 = 10
		t.ConsecDeltaT = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing.
func (*NokiaConf_Configure_OamPm_Session_Ip_TwampLight_Loss_Timing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_MeasurementInterval represents the /nokia-conf/configure/oam-pm/session/measurement-interval YANG schema element.
type NokiaConf_Configure_OamPm_Session_MeasurementInterval struct {
	AccountingPolicy     *uint32                                                                     `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups          []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	BoundaryType         E_NokiaConf_Configure_OamPm_Session_MeasurementInterval_BoundaryType        `path:"boundary-type" module:"nokia-conf"`
	ClockOffset          *uint32                                                                     `path:"clock-offset" module:"nokia-conf"`
	Duration             E_NokiaTypesOam_MeasurementIntervalDuration                                 `path:"duration" module:"nokia-conf"`
	IntervalsStored      *uint32                                                                     `path:"intervals-stored" module:"nokia-conf"`
	ThresholdCrossAlerts *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts `path:"threshold-cross-alerts" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_MeasurementInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_MeasurementInterval) IsYANGGoStruct() {}

// GetOrCreateThresholdCrossAlerts retrieves the value of the ThresholdCrossAlerts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetOrCreateThresholdCrossAlerts() *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts {
	if t.ThresholdCrossAlerts != nil {
		return t.ThresholdCrossAlerts
	}
	t.ThresholdCrossAlerts = &NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts{}
	return t.ThresholdCrossAlerts
}

// GetThresholdCrossAlerts returns the value of the ThresholdCrossAlerts struct pointer
// from NokiaConf_Configure_OamPm_Session_MeasurementInterval. If the receiver or the field ThresholdCrossAlerts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetThresholdCrossAlerts() *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts {
	if t != nil && t.ThresholdCrossAlerts != nil {
		return t.ThresholdCrossAlerts
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBoundaryType retrieves the value of the leaf BoundaryType from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BoundaryType is set, it can
// safely use t.GetBoundaryType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BoundaryType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetBoundaryType() E_NokiaConf_Configure_OamPm_Session_MeasurementInterval_BoundaryType {
	if t == nil || t.BoundaryType == 0 {
		return NokiaConf_Configure_OamPm_Session_MeasurementInterval_BoundaryType_clock_aligned
	}
	return t.BoundaryType
}

// GetClockOffset retrieves the value of the leaf ClockOffset from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockOffset is set, it can
// safely use t.GetClockOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetClockOffset() uint32 {
	if t == nil || t.ClockOffset == nil {
		return 0
	}
	return *t.ClockOffset
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetDuration() E_NokiaTypesOam_MeasurementIntervalDuration {
	if t == nil || t.Duration == 0 {
		return 0
	}
	return t.Duration
}

// GetIntervalsStored retrieves the value of the leaf IntervalsStored from the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntervalsStored is set, it can
// safely use t.GetIntervalsStored() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntervalsStored == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) GetIntervalsStored() uint32 {
	if t == nil || t.IntervalsStored == nil {
		return 0
	}
	return *t.IntervalsStored
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_MeasurementInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BoundaryType == 0 {
		t.BoundaryType = NokiaConf_Configure_OamPm_Session_MeasurementInterval_BoundaryType_clock_aligned
	}
	if t.ClockOffset == nil {
		var v uint32 = 0
		t.ClockOffset = &v
	}
	t.ThresholdCrossAlerts.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Session_MeasurementInterval struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"duration": t.Duration,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_MeasurementInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_MeasurementInterval.
func (*NokiaConf_Configure_OamPm_Session_MeasurementInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts represents the /nokia-conf/configure/oam-pm/session/measurement-interval/threshold-cross-alerts YANG schema element.
type NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	DelayEvents *bool                       `path:"delay-events" module:"nokia-conf"`
	LossEvents  *bool                       `path:"loss-events" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDelayEvents retrieves the value of the leaf DelayEvents from the NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayEvents is set, it can
// safely use t.GetDelayEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) GetDelayEvents() bool {
	if t == nil || t.DelayEvents == nil {
		return false
	}
	return *t.DelayEvents
}

// GetLossEvents retrieves the value of the leaf LossEvents from the NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossEvents is set, it can
// safely use t.GetLossEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) GetLossEvents() bool {
	if t == nil || t.LossEvents == nil {
		return false
	}
	return *t.LossEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DelayEvents == nil {
		var v bool = false
		t.DelayEvents = &v
	}
	if t.LossEvents == nil {
		var v bool = false
		t.LossEvents = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts.
func (*NokiaConf_Configure_OamPm_Session_MeasurementInterval_ThresholdCrossAlerts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Mpls represents the /nokia-conf/configure/oam-pm/session/mpls YANG schema element.
type NokiaConf_Configure_OamPm_Session_Mpls struct {
	Dm      *NokiaConf_Configure_OamPm_Session_Mpls_Dm           `path:"dm" module:"nokia-conf" yangPresence:"true"`
	Dscp    E_NokiaTypesQos_DscpName                             `path:"dscp" module:"nokia-conf"`
	Fc      E_NokiaTypesOam_ForwardingClass                      `path:"fc" module:"nokia-conf"`
	Lsp     *NokiaConf_Configure_OamPm_Session_Mpls_Lsp          `path:"lsp" module:"nokia-conf"`
	Pattern NokiaConf_Configure_OamPm_Session_Mpls_Pattern_Union `path:"pattern" module:"nokia-conf"`
	Profile E_NokiaConf_Configure_OamPm_Session_Mpls_Profile     `path:"profile" module:"nokia-conf"`
	Ttl     *uint32                                              `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Mpls) IsYANGGoStruct() {}

// GetOrCreateDm retrieves the value of the Dm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetOrCreateDm() *NokiaConf_Configure_OamPm_Session_Mpls_Dm {
	if t.Dm != nil {
		return t.Dm
	}
	t.Dm = &NokiaConf_Configure_OamPm_Session_Mpls_Dm{}
	return t.Dm
}

// GetOrCreateLsp retrieves the value of the Lsp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetOrCreateLsp() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp {
	if t.Lsp != nil {
		return t.Lsp
	}
	t.Lsp = &NokiaConf_Configure_OamPm_Session_Mpls_Lsp{}
	return t.Lsp
}

// GetDm returns the value of the Dm struct pointer
// from NokiaConf_Configure_OamPm_Session_Mpls. If the receiver or the field Dm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetDm() *NokiaConf_Configure_OamPm_Session_Mpls_Dm {
	if t != nil && t.Dm != nil {
		return t.Dm
	}
	return nil
}

// GetLsp returns the value of the Lsp struct pointer
// from NokiaConf_Configure_OamPm_Session_Mpls. If the receiver or the field Lsp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetLsp() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp {
	if t != nil && t.Lsp != nil {
		return t.Lsp
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_OamPm_Session_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return NokiaTypesQos_DscpName_be
	}
	return t.Dscp
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_OamPm_Session_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetFc() E_NokiaTypesOam_ForwardingClass {
	if t == nil || t.Fc == 0 {
		return NokiaTypesOam_ForwardingClass_be
	}
	return t.Fc
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_OamPm_Session_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetPattern() NokiaConf_Configure_OamPm_Session_Mpls_Pattern_Union {
	if t == nil || t.Pattern == nil {
		return UnionUint32(0)
	}
	return t.Pattern
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_OamPm_Session_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetProfile() E_NokiaConf_Configure_OamPm_Session_Mpls_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaConf_Configure_OamPm_Session_Mpls_Profile_out
	}
	return t.Profile
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_OamPm_Session_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 255
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dscp == 0 {
		t.Dscp = NokiaTypesQos_DscpName_be
	}
	if t.Fc == 0 {
		t.Fc = NokiaTypesOam_ForwardingClass_be
	}
	if t.Pattern == nil {
		t.Pattern = UnionUint32(0)
	}
	if t.Profile == 0 {
		t.Profile = NokiaConf_Configure_OamPm_Session_Mpls_Profile_out
	}
	if t.Ttl == nil {
		var v uint32 = 255
		t.Ttl = &v
	}
	t.Dm.PopulateDefaults()
	t.Lsp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Mpls.
func (*NokiaConf_Configure_OamPm_Session_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Mpls_Dm represents the /nokia-conf/configure/oam-pm/session/mpls/dm YANG schema element.
type NokiaConf_Configure_OamPm_Session_Mpls_Dm struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DelayTemplate      *string                     `path:"delay-template" module:"nokia-conf"`
	Interval           *uint32                     `path:"interval" module:"nokia-conf"`
	PadTlvSize         *uint32                     `path:"pad-tlv-size" module:"nokia-conf"`
	ReflectPad         *bool                       `path:"reflect-pad" module:"nokia-conf"`
	TestDuration       *uint32                     `path:"test-duration" module:"nokia-conf"`
	TestId             *uint32                     `path:"test-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Mpls_Dm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Dm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDelayTemplate retrieves the value of the leaf DelayTemplate from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayTemplate is set, it can
// safely use t.GetDelayTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetDelayTemplate() string {
	if t == nil || t.DelayTemplate == nil {
		return ""
	}
	return *t.DelayTemplate
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1000
	}
	return *t.Interval
}

// GetPadTlvSize retrieves the value of the leaf PadTlvSize from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadTlvSize is set, it can
// safely use t.GetPadTlvSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadTlvSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetPadTlvSize() uint32 {
	if t == nil || t.PadTlvSize == nil {
		return 0
	}
	return *t.PadTlvSize
}

// GetReflectPad retrieves the value of the leaf ReflectPad from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReflectPad is set, it can
// safely use t.GetReflectPad() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReflectPad == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetReflectPad() bool {
	if t == nil || t.ReflectPad == nil {
		return false
	}
	return *t.ReflectPad
}

// GetTestDuration retrieves the value of the leaf TestDuration from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestDuration is set, it can
// safely use t.GetTestDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestDuration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetTestDuration() uint32 {
	if t == nil || t.TestDuration == nil {
		return 0
	}
	return *t.TestDuration
}

// GetTestId retrieves the value of the leaf TestId from the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestId is set, it can
// safely use t.GetTestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) GetTestId() uint32 {
	if t == nil || t.TestId == nil {
		return 0
	}
	return *t.TestId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Mpls_Dm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interval == nil {
		var v uint32 = 1000
		t.Interval = &v
	}
	if t.PadTlvSize == nil {
		var v uint32 = 0
		t.PadTlvSize = &v
	}
	if t.ReflectPad == nil {
		var v bool = false
		t.ReflectPad = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Mpls_Dm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Dm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Mpls_Dm.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Dm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Mpls_Lsp represents the /nokia-conf/configure/oam-pm/session/mpls/lsp YANG schema element.
type NokiaConf_Configure_OamPm_Session_Mpls_Lsp struct {
	MplsTpStatic *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic `path:"mpls-tp-static" module:"nokia-conf" yangPresence:"true"`
	Rsvp         *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp         `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
	RsvpAuto     *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto     `path:"rsvp-auto" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Mpls_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp) IsYANGGoStruct() {}

// GetOrCreateMplsTpStatic retrieves the value of the MplsTpStatic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) GetOrCreateMplsTpStatic() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic {
	if t.MplsTpStatic != nil {
		return t.MplsTpStatic
	}
	t.MplsTpStatic = &NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic{}
	return t.MplsTpStatic
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) GetOrCreateRsvp() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp{}
	return t.Rsvp
}

// GetOrCreateRsvpAuto retrieves the value of the RsvpAuto field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) GetOrCreateRsvpAuto() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto {
	if t.RsvpAuto != nil {
		return t.RsvpAuto
	}
	t.RsvpAuto = &NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto{}
	return t.RsvpAuto
}

// GetMplsTpStatic returns the value of the MplsTpStatic struct pointer
// from NokiaConf_Configure_OamPm_Session_Mpls_Lsp. If the receiver or the field MplsTpStatic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) GetMplsTpStatic() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic {
	if t != nil && t.MplsTpStatic != nil {
		return t.MplsTpStatic
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_OamPm_Session_Mpls_Lsp. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) GetRsvp() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetRsvpAuto returns the value of the RsvpAuto struct pointer
// from NokiaConf_Configure_OamPm_Session_Mpls_Lsp. If the receiver or the field RsvpAuto is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) GetRsvpAuto() *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto {
	if t != nil && t.RsvpAuto != nil {
		return t.RsvpAuto
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Mpls_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MplsTpStatic.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
	t.RsvpAuto.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Mpls_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Mpls_Lsp.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic represents the /nokia-conf/configure/oam-pm/session/mpls/lsp/mpls-tp-static YANG schema element.
type NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic struct {
	Lsp *string `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) IsYANGGoStruct() {}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp_MplsTpStatic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp represents the /nokia-conf/configure/oam-pm/session/mpls/lsp/rsvp YANG schema element.
type NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp struct {
	Lsp             *string `path:"lsp" module:"nokia-conf"`
	UdpReturnObject *string `path:"udp-return-object" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) IsYANGGoStruct() {}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// GetUdpReturnObject retrieves the value of the leaf UdpReturnObject from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpReturnObject is set, it can
// safely use t.GetUdpReturnObject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpReturnObject == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) GetUdpReturnObject() string {
	if t == nil || t.UdpReturnObject == nil {
		return ""
	}
	return *t.UdpReturnObject
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto represents the /nokia-conf/configure/oam-pm/session/mpls/lsp/rsvp-auto YANG schema element.
type NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto struct {
	From            *string `path:"from" module:"nokia-conf"`
	LspTemplate     *string `path:"lsp-template" module:"nokia-conf"`
	To              *string `path:"to" module:"nokia-conf"`
	UdpReturnObject *string `path:"udp-return-object" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) IsYANGGoStruct() {}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// GetUdpReturnObject retrieves the value of the leaf UdpReturnObject from the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpReturnObject is set, it can
// safely use t.GetUdpReturnObject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpReturnObject == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) GetUdpReturnObject() string {
	if t == nil || t.UdpReturnObject == nil {
		return ""
	}
	return *t.UdpReturnObject
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto.
func (*NokiaConf_Configure_OamPm_Session_Mpls_Lsp_RsvpAuto) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Streaming represents the /nokia-conf/configure/oam-pm/streaming YANG schema element.
type NokiaConf_Configure_OamPm_Streaming struct {
	DelayTemplate map[string]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate `path:"delay-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Streaming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Streaming) IsYANGGoStruct() {}

// NewDelayTemplate creates a new entry in the DelayTemplate list of the
// NokiaConf_Configure_OamPm_Streaming struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Streaming) NewDelayTemplate(DelayTemplateName string) (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DelayTemplate == nil {
		t.DelayTemplate = make(map[string]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate)
	}

	key := DelayTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DelayTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DelayTemplate", key)
	}

	t.DelayTemplate[key] = &NokiaConf_Configure_OamPm_Streaming_DelayTemplate{
		DelayTemplateName: &DelayTemplateName,
	}

	return t.DelayTemplate[key], nil
}

// RenameDelayTemplate renames an entry in the list DelayTemplate within
// the NokiaConf_Configure_OamPm_Streaming struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Streaming) RenameDelayTemplate(oldK, newK string) error {
	if _, ok := t.DelayTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in DelayTemplate", newK)
	}

	e, ok := t.DelayTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DelayTemplate", oldK)
	}
	e.DelayTemplateName = &newK

	t.DelayTemplate[newK] = e
	delete(t.DelayTemplate, oldK)
	return nil
}

// GetOrCreateDelayTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Streaming. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Streaming) GetOrCreateDelayTemplate(DelayTemplateName string) *NokiaConf_Configure_OamPm_Streaming_DelayTemplate {

	key := DelayTemplateName

	if v, ok := t.DelayTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDelayTemplate(DelayTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDelayTemplate got unexpected error: %v", err))
	}
	return v
}

// GetDelayTemplate retrieves the value with the specified key from
// the DelayTemplate map field of NokiaConf_Configure_OamPm_Streaming. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Streaming) GetDelayTemplate(DelayTemplateName string) *NokiaConf_Configure_OamPm_Streaming_DelayTemplate {

	if t == nil {
		return nil
	}

	key := DelayTemplateName

	if lm, ok := t.DelayTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteDelayTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Streaming. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Streaming) DeleteDelayTemplate(DelayTemplateName string) {
	key := DelayTemplateName

	delete(t.DelayTemplate, key)
}

// AppendDelayTemplate appends the supplied NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct to the
// list DelayTemplate of NokiaConf_Configure_OamPm_Streaming. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Streaming_DelayTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Streaming) AppendDelayTemplate(v *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) error {
	if v.DelayTemplateName == nil {
		return fmt.Errorf("invalid nil key received for DelayTemplateName")
	}

	key := *v.DelayTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DelayTemplate == nil {
		t.DelayTemplate = make(map[string]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate)
	}

	if _, ok := t.DelayTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list DelayTemplate %v", key)
	}

	t.DelayTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Streaming
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Streaming) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DelayTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Streaming"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Streaming) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Streaming.
func (*NokiaConf_Configure_OamPm_Streaming) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Streaming_DelayTemplate represents the /nokia-conf/configure/oam-pm/streaming/delay-template YANG schema element.
type NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct {
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DelayTemplateName  *string                                                                                  `path:"delay-template-name" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	FdAvg              map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg   `path:"fd-avg" module:"nokia-conf"`
	IfdvAvg            map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg `path:"ifdv-avg" module:"nokia-conf"`
	SampleWindow       *uint32                                                                                  `path:"sample-window" module:"nokia-conf"`
	WindowIntegrity    *uint32                                                                                  `path:"window-integrity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Streaming_DelayTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate) IsYANGGoStruct() {}

// NewFdAvg creates a new entry in the FdAvg list of the
// NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) NewFdAvg(Direction E_NokiaTypesOam_Direction) (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FdAvg == nil {
		t.FdAvg = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FdAvg[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FdAvg", key)
	}

	t.FdAvg[key] = &NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg{
		Direction: Direction,
	}

	return t.FdAvg[key], nil
}

// RenameFdAvg renames an entry in the list FdAvg within
// the NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) RenameFdAvg(oldK, newK E_NokiaTypesOam_Direction) error {
	if _, ok := t.FdAvg[newK]; ok {
		return fmt.Errorf("key %v already exists in FdAvg", newK)
	}

	e, ok := t.FdAvg[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FdAvg", oldK)
	}
	e.Direction = newK

	t.FdAvg[newK] = e
	delete(t.FdAvg, oldK)
	return nil
}

// GetOrCreateFdAvg retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetOrCreateFdAvg(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg {

	key := Direction

	if v, ok := t.FdAvg[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFdAvg(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFdAvg got unexpected error: %v", err))
	}
	return v
}

// GetFdAvg retrieves the value with the specified key from
// the FdAvg map field of NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetFdAvg(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.FdAvg[key]; ok {
		return lm
	}
	return nil
}

// DeleteFdAvg deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) DeleteFdAvg(Direction E_NokiaTypesOam_Direction) {
	key := Direction

	delete(t.FdAvg, key)
}

// AppendFdAvg appends the supplied NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg struct to the
// list FdAvg of NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) AppendFdAvg(v *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FdAvg == nil {
		t.FdAvg = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg)
	}

	if _, ok := t.FdAvg[key]; ok {
		return fmt.Errorf("duplicate key for list FdAvg %v", key)
	}

	t.FdAvg[key] = v
	return nil
}

// NewIfdvAvg creates a new entry in the IfdvAvg list of the
// NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) NewIfdvAvg(Direction E_NokiaTypesOam_Direction) (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IfdvAvg == nil {
		t.IfdvAvg = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg)
	}

	key := Direction

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IfdvAvg[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IfdvAvg", key)
	}

	t.IfdvAvg[key] = &NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg{
		Direction: Direction,
	}

	return t.IfdvAvg[key], nil
}

// RenameIfdvAvg renames an entry in the list IfdvAvg within
// the NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) RenameIfdvAvg(oldK, newK E_NokiaTypesOam_Direction) error {
	if _, ok := t.IfdvAvg[newK]; ok {
		return fmt.Errorf("key %v already exists in IfdvAvg", newK)
	}

	e, ok := t.IfdvAvg[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IfdvAvg", oldK)
	}
	e.Direction = newK

	t.IfdvAvg[newK] = e
	delete(t.IfdvAvg, oldK)
	return nil
}

// GetOrCreateIfdvAvg retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetOrCreateIfdvAvg(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg {

	key := Direction

	if v, ok := t.IfdvAvg[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIfdvAvg(Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIfdvAvg got unexpected error: %v", err))
	}
	return v
}

// GetIfdvAvg retrieves the value with the specified key from
// the IfdvAvg map field of NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetIfdvAvg(Direction E_NokiaTypesOam_Direction) *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg {

	if t == nil {
		return nil
	}

	key := Direction

	if lm, ok := t.IfdvAvg[key]; ok {
		return lm
	}
	return nil
}

// DeleteIfdvAvg deletes the value with the specified keys from
// the receiver NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) DeleteIfdvAvg(Direction E_NokiaTypesOam_Direction) {
	key := Direction

	delete(t.IfdvAvg, key)
}

// AppendIfdvAvg appends the supplied NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg struct to the
// list IfdvAvg of NokiaConf_Configure_OamPm_Streaming_DelayTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) AppendIfdvAvg(v *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) error {
	key := v.Direction

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IfdvAvg == nil {
		t.IfdvAvg = make(map[E_NokiaTypesOam_Direction]*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg)
	}

	if _, ok := t.IfdvAvg[key]; ok {
		return fmt.Errorf("duplicate key for list IfdvAvg %v", key)
	}

	t.IfdvAvg[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDelayTemplateName retrieves the value of the leaf DelayTemplateName from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayTemplateName is set, it can
// safely use t.GetDelayTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetDelayTemplateName() string {
	if t == nil || t.DelayTemplateName == nil {
		return ""
	}
	return *t.DelayTemplateName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSampleWindow retrieves the value of the leaf SampleWindow from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleWindow is set, it can
// safely use t.GetSampleWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetSampleWindow() uint32 {
	if t == nil || t.SampleWindow == nil {
		return 60
	}
	return *t.SampleWindow
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 50
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Streaming_DelayTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SampleWindow == nil {
		var v uint32 = 60
		t.SampleWindow = &v
	}
	if t.WindowIntegrity == nil {
		var v uint32 = 50
		t.WindowIntegrity = &v
	}
	for _, e := range t.FdAvg {
		e.PopulateDefaults()
	}
	for _, e := range t.IfdvAvg {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Streaming_DelayTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DelayTemplateName == nil {
		return nil, fmt.Errorf("nil value for key DelayTemplateName")
	}

	return map[string]interface{}{
		"delay-template-name": *t.DelayTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Streaming_DelayTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Streaming_DelayTemplate.
func (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg represents the /nokia-conf/configure/oam-pm/streaming/delay-template/fd-avg YANG schema element.
type NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg struct {
	Direction E_NokiaTypesOam_Direction `path:"direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) GetDirection() E_NokiaTypesOam_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg.
func (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_FdAvg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg represents the /nokia-conf/configure/oam-pm/streaming/delay-template/ifdv-avg YANG schema element.
type NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg struct {
	Direction E_NokiaTypesOam_Direction `path:"direction" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) GetDirection() E_NokiaTypesOam_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg struct, which is a YANG list entry.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction": t.Direction,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg.
func (*NokiaConf_Configure_OamPm_Streaming_DelayTemplate_IfdvAvg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Openflow represents the /nokia-conf/configure/openflow YANG schema element.
type NokiaConf_Configure_Openflow struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	OfController       map[uint32]*NokiaConf_Configure_Openflow_OfController `path:"of-controller" module:"nokia-conf"`
	OfSwitch           map[string]*NokiaConf_Configure_Openflow_OfSwitch     `path:"of-switch" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Openflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Openflow) IsYANGGoStruct() {}

// NewOfController creates a new entry in the OfController list of the
// NokiaConf_Configure_Openflow struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Openflow) NewOfController(ControllerId uint32) (*NokiaConf_Configure_Openflow_OfController, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfController == nil {
		t.OfController = make(map[uint32]*NokiaConf_Configure_Openflow_OfController)
	}

	key := ControllerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OfController[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OfController", key)
	}

	t.OfController[key] = &NokiaConf_Configure_Openflow_OfController{
		ControllerId: &ControllerId,
	}

	return t.OfController[key], nil
}

// RenameOfController renames an entry in the list OfController within
// the NokiaConf_Configure_Openflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Openflow) RenameOfController(oldK, newK uint32) error {
	if _, ok := t.OfController[newK]; ok {
		return fmt.Errorf("key %v already exists in OfController", newK)
	}

	e, ok := t.OfController[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OfController", oldK)
	}
	e.ControllerId = &newK

	t.OfController[newK] = e
	delete(t.OfController, oldK)
	return nil
}

// GetOrCreateOfController retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Openflow) GetOrCreateOfController(ControllerId uint32) *NokiaConf_Configure_Openflow_OfController {

	key := ControllerId

	if v, ok := t.OfController[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOfController(ControllerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOfController got unexpected error: %v", err))
	}
	return v
}

// GetOfController retrieves the value with the specified key from
// the OfController map field of NokiaConf_Configure_Openflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Openflow) GetOfController(ControllerId uint32) *NokiaConf_Configure_Openflow_OfController {

	if t == nil {
		return nil
	}

	key := ControllerId

	if lm, ok := t.OfController[key]; ok {
		return lm
	}
	return nil
}

// DeleteOfController deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Openflow) DeleteOfController(ControllerId uint32) {
	key := ControllerId

	delete(t.OfController, key)
}

// AppendOfController appends the supplied NokiaConf_Configure_Openflow_OfController struct to the
// list OfController of NokiaConf_Configure_Openflow. If the key value(s) specified in
// the supplied NokiaConf_Configure_Openflow_OfController already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Openflow) AppendOfController(v *NokiaConf_Configure_Openflow_OfController) error {
	if v.ControllerId == nil {
		return fmt.Errorf("invalid nil key received for ControllerId")
	}

	key := *v.ControllerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfController == nil {
		t.OfController = make(map[uint32]*NokiaConf_Configure_Openflow_OfController)
	}

	if _, ok := t.OfController[key]; ok {
		return fmt.Errorf("duplicate key for list OfController %v", key)
	}

	t.OfController[key] = v
	return nil
}

// NewOfSwitch creates a new entry in the OfSwitch list of the
// NokiaConf_Configure_Openflow struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Openflow) NewOfSwitch(Name string) (*NokiaConf_Configure_Openflow_OfSwitch, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfSwitch == nil {
		t.OfSwitch = make(map[string]*NokiaConf_Configure_Openflow_OfSwitch)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OfSwitch[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OfSwitch", key)
	}

	t.OfSwitch[key] = &NokiaConf_Configure_Openflow_OfSwitch{
		Name: &Name,
	}

	return t.OfSwitch[key], nil
}

// RenameOfSwitch renames an entry in the list OfSwitch within
// the NokiaConf_Configure_Openflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Openflow) RenameOfSwitch(oldK, newK string) error {
	if _, ok := t.OfSwitch[newK]; ok {
		return fmt.Errorf("key %v already exists in OfSwitch", newK)
	}

	e, ok := t.OfSwitch[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OfSwitch", oldK)
	}
	e.Name = &newK

	t.OfSwitch[newK] = e
	delete(t.OfSwitch, oldK)
	return nil
}

// GetOrCreateOfSwitch retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Openflow) GetOrCreateOfSwitch(Name string) *NokiaConf_Configure_Openflow_OfSwitch {

	key := Name

	if v, ok := t.OfSwitch[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOfSwitch(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOfSwitch got unexpected error: %v", err))
	}
	return v
}

// GetOfSwitch retrieves the value with the specified key from
// the OfSwitch map field of NokiaConf_Configure_Openflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Openflow) GetOfSwitch(Name string) *NokiaConf_Configure_Openflow_OfSwitch {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.OfSwitch[key]; ok {
		return lm
	}
	return nil
}

// DeleteOfSwitch deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Openflow) DeleteOfSwitch(Name string) {
	key := Name

	delete(t.OfSwitch, key)
}

// AppendOfSwitch appends the supplied NokiaConf_Configure_Openflow_OfSwitch struct to the
// list OfSwitch of NokiaConf_Configure_Openflow. If the key value(s) specified in
// the supplied NokiaConf_Configure_Openflow_OfSwitch already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Openflow) AppendOfSwitch(v *NokiaConf_Configure_Openflow_OfSwitch) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OfSwitch == nil {
		t.OfSwitch = make(map[string]*NokiaConf_Configure_Openflow_OfSwitch)
	}

	if _, ok := t.OfSwitch[key]; ok {
		return fmt.Errorf("duplicate key for list OfSwitch %v", key)
	}

	t.OfSwitch[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Openflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Openflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Openflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.OfController {
		e.PopulateDefaults()
	}
	for _, e := range t.OfSwitch {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Openflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Openflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Openflow.
func (*NokiaConf_Configure_Openflow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Openflow_OfController represents the /nokia-conf/configure/openflow/of-controller YANG schema element.
type NokiaConf_Configure_Openflow_OfController struct {
	Address            *string                                             `path:"address" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ControllerId       *uint32                                             `path:"controller-id" module:"nokia-conf"`
	Description        *string                                             `path:"description" module:"nokia-conf"`
	EchoInterval       *uint32                                             `path:"echo-interval" module:"nokia-conf"`
	EchoMultiple       *uint32                                             `path:"echo-multiple" module:"nokia-conf"`
	Ipv6Address        *string                                             `path:"ipv6-address" module:"nokia-conf"`
	Role               E_NokiaConf_Configure_Openflow_OfController_Role    `path:"role" module:"nokia-conf"`
	TlsServerProfile   *string                                             `path:"tls-server-profile" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_Openflow_OfController_Version `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Openflow_OfController implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Openflow_OfController) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetControllerId retrieves the value of the leaf ControllerId from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControllerId is set, it can
// safely use t.GetControllerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControllerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetControllerId() uint32 {
	if t == nil || t.ControllerId == nil {
		return 0
	}
	return *t.ControllerId
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEchoInterval retrieves the value of the leaf EchoInterval from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoInterval is set, it can
// safely use t.GetEchoInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetEchoInterval() uint32 {
	if t == nil || t.EchoInterval == nil {
		return 10
	}
	return *t.EchoInterval
}

// GetEchoMultiple retrieves the value of the leaf EchoMultiple from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoMultiple is set, it can
// safely use t.GetEchoMultiple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoMultiple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetEchoMultiple() uint32 {
	if t == nil || t.EchoMultiple == nil {
		return 3
	}
	return *t.EchoMultiple
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetRole retrieves the value of the leaf Role from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetRole() E_NokiaConf_Configure_Openflow_OfController_Role {
	if t == nil || t.Role == 0 {
		return NokiaConf_Configure_Openflow_OfController_Role_equal
	}
	return t.Role
}

// GetTlsServerProfile retrieves the value of the leaf TlsServerProfile from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsServerProfile is set, it can
// safely use t.GetTlsServerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsServerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetTlsServerProfile() string {
	if t == nil || t.TlsServerProfile == nil {
		return ""
	}
	return *t.TlsServerProfile
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Openflow_OfController
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfController) GetVersion() E_NokiaConf_Configure_Openflow_OfController_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Openflow_OfController_Version_version_1_3_1
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Openflow_OfController
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Openflow_OfController) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EchoInterval == nil {
		var v uint32 = 10
		t.EchoInterval = &v
	}
	if t.EchoMultiple == nil {
		var v uint32 = 3
		t.EchoMultiple = &v
	}
	if t.Role == 0 {
		t.Role = NokiaConf_Configure_Openflow_OfController_Role_equal
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Openflow_OfController_Version_version_1_3_1
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Openflow_OfController struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Openflow_OfController) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ControllerId == nil {
		return nil, fmt.Errorf("nil value for key ControllerId")
	}

	return map[string]interface{}{
		"controller-id": *t.ControllerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfController) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Openflow_OfController"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfController) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Openflow_OfController) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Openflow_OfController.
func (*NokiaConf_Configure_Openflow_OfController) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Openflow_OfSwitch represents the /nokia-conf/configure/openflow/of-switch YANG schema element.
type NokiaConf_Configure_Openflow_OfSwitch struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AuxChannel         *bool                                                                                                      `path:"aux-channel" module:"nokia-conf"`
	Controller         map[NokiaConf_Configure_Openflow_OfSwitch_Controller_Key]*NokiaConf_Configure_Openflow_OfSwitch_Controller `path:"controller" module:"nokia-conf"`
	Description        *string                                                                                                    `path:"description" module:"nokia-conf"`
	EchoInterval       *uint32                                                                                                    `path:"echo-interval" module:"nokia-conf"`
	EchoMultiple       *uint32                                                                                                    `path:"echo-multiple" module:"nokia-conf"`
	Flowtable          map[uint32]*NokiaConf_Configure_Openflow_OfSwitch_Flowtable                                                `path:"flowtable" module:"nokia-conf"`
	LogicalPortStatus  []E_NokiaConf_Configure_Openflow_OfSwitch_LogicalPortStatus                                                `path:"logical-port-status" module:"nokia-conf"`
	Name               *string                                                                                                    `path:"name" module:"nokia-conf"`
	OfsId              *uint32                                                                                                    `path:"ofs-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Openflow_OfSwitch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Openflow_OfSwitch) IsYANGGoStruct() {}

// NokiaConf_Configure_Openflow_OfSwitch_Controller_Key represents the key for list Controller of element /nokia-conf/configure/openflow/of-switch.
type NokiaConf_Configure_Openflow_OfSwitch_Controller_Key struct {
	Address string `path:"address"`
	Port    uint32 `path:"port"`
}

// NewController creates a new entry in the Controller list of the
// NokiaConf_Configure_Openflow_OfSwitch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Openflow_OfSwitch) NewController(Address string, Port uint32) (*NokiaConf_Configure_Openflow_OfSwitch_Controller, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[NokiaConf_Configure_Openflow_OfSwitch_Controller_Key]*NokiaConf_Configure_Openflow_OfSwitch_Controller)
	}

	key := NokiaConf_Configure_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Controller[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Controller", key)
	}

	t.Controller[key] = &NokiaConf_Configure_Openflow_OfSwitch_Controller{
		Address: &Address,
		Port:    &Port,
	}

	return t.Controller[key], nil
}

// RenameController renames an entry in the list Controller within
// the NokiaConf_Configure_Openflow_OfSwitch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) RenameController(oldK, newK NokiaConf_Configure_Openflow_OfSwitch_Controller_Key) error {
	if _, ok := t.Controller[newK]; ok {
		return fmt.Errorf("key %v already exists in Controller", newK)
	}

	e, ok := t.Controller[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Controller", oldK)
	}
	e.Address = &newK.Address
	e.Port = &newK.Port

	t.Controller[newK] = e
	delete(t.Controller, oldK)
	return nil
}

// GetOrCreateController retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow_OfSwitch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetOrCreateController(Address string, Port uint32) *NokiaConf_Configure_Openflow_OfSwitch_Controller {

	key := NokiaConf_Configure_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Controller[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewController(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateController got unexpected error: %v", err))
	}
	return v
}

// GetController retrieves the value with the specified key from
// the Controller map field of NokiaConf_Configure_Openflow_OfSwitch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetController(Address string, Port uint32) *NokiaConf_Configure_Openflow_OfSwitch_Controller {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Controller[key]; ok {
		return lm
	}
	return nil
}

// DeleteController deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow_OfSwitch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Openflow_OfSwitch) DeleteController(Address string, Port uint32) {
	key := NokiaConf_Configure_Openflow_OfSwitch_Controller_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Controller, key)
}

// AppendController appends the supplied NokiaConf_Configure_Openflow_OfSwitch_Controller struct to the
// list Controller of NokiaConf_Configure_Openflow_OfSwitch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Openflow_OfSwitch_Controller already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Openflow_OfSwitch) AppendController(v *NokiaConf_Configure_Openflow_OfSwitch_Controller) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := NokiaConf_Configure_Openflow_OfSwitch_Controller_Key{
		Address: *v.Address,
		Port:    *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Controller == nil {
		t.Controller = make(map[NokiaConf_Configure_Openflow_OfSwitch_Controller_Key]*NokiaConf_Configure_Openflow_OfSwitch_Controller)
	}

	if _, ok := t.Controller[key]; ok {
		return fmt.Errorf("duplicate key for list Controller %v", key)
	}

	t.Controller[key] = v
	return nil
}

// NewFlowtable creates a new entry in the Flowtable list of the
// NokiaConf_Configure_Openflow_OfSwitch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Openflow_OfSwitch) NewFlowtable(TableId uint32) (*NokiaConf_Configure_Openflow_OfSwitch_Flowtable, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowtable == nil {
		t.Flowtable = make(map[uint32]*NokiaConf_Configure_Openflow_OfSwitch_Flowtable)
	}

	key := TableId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Flowtable[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Flowtable", key)
	}

	t.Flowtable[key] = &NokiaConf_Configure_Openflow_OfSwitch_Flowtable{
		TableId: &TableId,
	}

	return t.Flowtable[key], nil
}

// RenameFlowtable renames an entry in the list Flowtable within
// the NokiaConf_Configure_Openflow_OfSwitch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) RenameFlowtable(oldK, newK uint32) error {
	if _, ok := t.Flowtable[newK]; ok {
		return fmt.Errorf("key %v already exists in Flowtable", newK)
	}

	e, ok := t.Flowtable[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Flowtable", oldK)
	}
	e.TableId = &newK

	t.Flowtable[newK] = e
	delete(t.Flowtable, oldK)
	return nil
}

// GetOrCreateFlowtable retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow_OfSwitch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetOrCreateFlowtable(TableId uint32) *NokiaConf_Configure_Openflow_OfSwitch_Flowtable {

	key := TableId

	if v, ok := t.Flowtable[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowtable(TableId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowtable got unexpected error: %v", err))
	}
	return v
}

// GetFlowtable retrieves the value with the specified key from
// the Flowtable map field of NokiaConf_Configure_Openflow_OfSwitch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetFlowtable(TableId uint32) *NokiaConf_Configure_Openflow_OfSwitch_Flowtable {

	if t == nil {
		return nil
	}

	key := TableId

	if lm, ok := t.Flowtable[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowtable deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Openflow_OfSwitch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Openflow_OfSwitch) DeleteFlowtable(TableId uint32) {
	key := TableId

	delete(t.Flowtable, key)
}

// AppendFlowtable appends the supplied NokiaConf_Configure_Openflow_OfSwitch_Flowtable struct to the
// list Flowtable of NokiaConf_Configure_Openflow_OfSwitch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Openflow_OfSwitch_Flowtable already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Openflow_OfSwitch) AppendFlowtable(v *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) error {
	if v.TableId == nil {
		return fmt.Errorf("invalid nil key received for TableId")
	}

	key := *v.TableId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Flowtable == nil {
		t.Flowtable = make(map[uint32]*NokiaConf_Configure_Openflow_OfSwitch_Flowtable)
	}

	if _, ok := t.Flowtable[key]; ok {
		return fmt.Errorf("duplicate key for list Flowtable %v", key)
	}

	t.Flowtable[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuxChannel retrieves the value of the leaf AuxChannel from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuxChannel is set, it can
// safely use t.GetAuxChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuxChannel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetAuxChannel() bool {
	if t == nil || t.AuxChannel == nil {
		return false
	}
	return *t.AuxChannel
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEchoInterval retrieves the value of the leaf EchoInterval from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoInterval is set, it can
// safely use t.GetEchoInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetEchoInterval() uint32 {
	if t == nil || t.EchoInterval == nil {
		return 10
	}
	return *t.EchoInterval
}

// GetEchoMultiple retrieves the value of the leaf EchoMultiple from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoMultiple is set, it can
// safely use t.GetEchoMultiple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoMultiple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetEchoMultiple() uint32 {
	if t == nil || t.EchoMultiple == nil {
		return 3
	}
	return *t.EchoMultiple
}

// GetLogicalPortStatus retrieves the value of the leaf LogicalPortStatus from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogicalPortStatus is set, it can
// safely use t.GetLogicalPortStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogicalPortStatus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetLogicalPortStatus() []E_NokiaConf_Configure_Openflow_OfSwitch_LogicalPortStatus {
	if t == nil || t.LogicalPortStatus == nil {
		return nil
	}
	return t.LogicalPortStatus
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOfsId retrieves the value of the leaf OfsId from the NokiaConf_Configure_Openflow_OfSwitch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfsId is set, it can
// safely use t.GetOfsId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfsId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch) GetOfsId() uint32 {
	if t == nil || t.OfsId == nil {
		return 0
	}
	return *t.OfsId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Openflow_OfSwitch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Openflow_OfSwitch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuxChannel == nil {
		var v bool = false
		t.AuxChannel = &v
	}
	if t.EchoInterval == nil {
		var v uint32 = 10
		t.EchoInterval = &v
	}
	if t.EchoMultiple == nil {
		var v uint32 = 3
		t.EchoMultiple = &v
	}
	for _, e := range t.Controller {
		e.PopulateDefaults()
	}
	for _, e := range t.Flowtable {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Openflow_OfSwitch struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Openflow_OfSwitch) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfSwitch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Openflow_OfSwitch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfSwitch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Openflow_OfSwitch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Openflow_OfSwitch.
func (*NokiaConf_Configure_Openflow_OfSwitch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Openflow_OfSwitch_Controller represents the /nokia-conf/configure/openflow/of-switch/controller YANG schema element.
type NokiaConf_Configure_Openflow_OfSwitch_Controller struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	OfcLoopback        *string  `path:"ofc-loopback" module:"nokia-conf"`
	Port               *uint32  `path:"port" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
	TlsClientProfile   *string  `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Openflow_OfSwitch_Controller implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Openflow_OfSwitch_Controller) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetOfcLoopback retrieves the value of the leaf OfcLoopback from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfcLoopback is set, it can
// safely use t.GetOfcLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfcLoopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetOfcLoopback() string {
	if t == nil || t.OfcLoopback == nil {
		return ""
	}
	return *t.OfcLoopback
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Openflow_OfSwitch_Controller
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Openflow_OfSwitch_Controller
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Openflow_OfSwitch_Controller struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Openflow_OfSwitch_Controller"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Controller) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Openflow_OfSwitch_Controller.
func (*NokiaConf_Configure_Openflow_OfSwitch_Controller) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Openflow_OfSwitch_Flowtable represents the /nokia-conf/configure/openflow/of-switch/flowtable YANG schema element.
type NokiaConf_Configure_Openflow_OfSwitch_Flowtable struct {
	ApplyGroups         []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxSize             *uint32                                                          `path:"max-size" module:"nokia-conf"`
	MismatchAction      E_NokiaConf_Configure_Openflow_OfSwitch_Flowtable_MismatchAction `path:"mismatch-action" module:"nokia-conf"`
	SwitchDefinedCookie *bool                                                            `path:"switch-defined-cookie" module:"nokia-conf"`
	TableId             *uint32                                                          `path:"table-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Openflow_OfSwitch_Flowtable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Openflow_OfSwitch_Flowtable) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxSize retrieves the value of the leaf MaxSize from the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSize is set, it can
// safely use t.GetMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) GetMaxSize() uint32 {
	if t == nil || t.MaxSize == nil {
		return 1000
	}
	return *t.MaxSize
}

// GetMismatchAction retrieves the value of the leaf MismatchAction from the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchAction is set, it can
// safely use t.GetMismatchAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) GetMismatchAction() E_NokiaConf_Configure_Openflow_OfSwitch_Flowtable_MismatchAction {
	if t == nil || t.MismatchAction == 0 {
		return NokiaConf_Configure_Openflow_OfSwitch_Flowtable_MismatchAction_fall_through
	}
	return t.MismatchAction
}

// GetSwitchDefinedCookie retrieves the value of the leaf SwitchDefinedCookie from the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwitchDefinedCookie is set, it can
// safely use t.GetSwitchDefinedCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwitchDefinedCookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) GetSwitchDefinedCookie() bool {
	if t == nil || t.SwitchDefinedCookie == nil {
		return false
	}
	return *t.SwitchDefinedCookie
}

// GetTableId retrieves the value of the leaf TableId from the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableId is set, it can
// safely use t.GetTableId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) GetTableId() uint32 {
	if t == nil || t.TableId == nil {
		return 0
	}
	return *t.TableId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Openflow_OfSwitch_Flowtable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSize == nil {
		var v uint32 = 1000
		t.MaxSize = &v
	}
	if t.MismatchAction == 0 {
		t.MismatchAction = NokiaConf_Configure_Openflow_OfSwitch_Flowtable_MismatchAction_fall_through
	}
	if t.SwitchDefinedCookie == nil {
		var v bool = false
		t.SwitchDefinedCookie = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Openflow_OfSwitch_Flowtable struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TableId == nil {
		return nil, fmt.Errorf("nil value for key TableId")
	}

	return map[string]interface{}{
		"table-id": *t.TableId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Openflow_OfSwitch_Flowtable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Openflow_OfSwitch_Flowtable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Openflow_OfSwitch_Flowtable.
func (*NokiaConf_Configure_Openflow_OfSwitch_Flowtable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions represents the /nokia-conf/configure/policy-options YANG schema element.
type NokiaConf_Configure_PolicyOptions struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AsPath             map[string]*NokiaConf_Configure_PolicyOptions_AsPath          `path:"as-path" module:"nokia-conf"`
	AsPathGroup        map[string]*NokiaConf_Configure_PolicyOptions_AsPathGroup     `path:"as-path-group" module:"nokia-conf"`
	Community          map[string]*NokiaConf_Configure_PolicyOptions_Community       `path:"community" module:"nokia-conf"`
	Damping            map[string]*NokiaConf_Configure_PolicyOptions_Damping         `path:"damping" module:"nokia-conf"`
	GlobalVariables    *NokiaConf_Configure_PolicyOptions_GlobalVariables            `path:"global-variables" module:"nokia-conf"`
	PolicyStatement    map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement `path:"policy-statement" module:"nokia-conf"`
	PrefixList         map[string]*NokiaConf_Configure_PolicyOptions_PrefixList      `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions) IsYANGGoStruct() {}

// NewAsPath creates a new entry in the AsPath list of the
// NokiaConf_Configure_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions) NewAsPath(Name string) (*NokiaConf_Configure_PolicyOptions_AsPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPath == nil {
		t.AsPath = make(map[string]*NokiaConf_Configure_PolicyOptions_AsPath)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPath", key)
	}

	t.AsPath[key] = &NokiaConf_Configure_PolicyOptions_AsPath{
		Name: &Name,
	}

	return t.AsPath[key], nil
}

// RenameAsPath renames an entry in the list AsPath within
// the NokiaConf_Configure_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions) RenameAsPath(oldK, newK string) error {
	if _, ok := t.AsPath[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPath", newK)
	}

	e, ok := t.AsPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPath", oldK)
	}
	e.Name = &newK

	t.AsPath[newK] = e
	delete(t.AsPath, oldK)
	return nil
}

// GetOrCreateAsPath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreateAsPath(Name string) *NokiaConf_Configure_PolicyOptions_AsPath {

	key := Name

	if v, ok := t.AsPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPath(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPath got unexpected error: %v", err))
	}
	return v
}

// GetAsPath retrieves the value with the specified key from
// the AsPath map field of NokiaConf_Configure_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetAsPath(Name string) *NokiaConf_Configure_PolicyOptions_AsPath {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AsPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions) DeleteAsPath(Name string) {
	key := Name

	delete(t.AsPath, key)
}

// AppendAsPath appends the supplied NokiaConf_Configure_PolicyOptions_AsPath struct to the
// list AsPath of NokiaConf_Configure_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_AsPath already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions) AppendAsPath(v *NokiaConf_Configure_PolicyOptions_AsPath) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPath == nil {
		t.AsPath = make(map[string]*NokiaConf_Configure_PolicyOptions_AsPath)
	}

	if _, ok := t.AsPath[key]; ok {
		return fmt.Errorf("duplicate key for list AsPath %v", key)
	}

	t.AsPath[key] = v
	return nil
}

// NewAsPathGroup creates a new entry in the AsPathGroup list of the
// NokiaConf_Configure_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions) NewAsPathGroup(Name string) (*NokiaConf_Configure_PolicyOptions_AsPathGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathGroup == nil {
		t.AsPathGroup = make(map[string]*NokiaConf_Configure_PolicyOptions_AsPathGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathGroup", key)
	}

	t.AsPathGroup[key] = &NokiaConf_Configure_PolicyOptions_AsPathGroup{
		Name: &Name,
	}

	return t.AsPathGroup[key], nil
}

// RenameAsPathGroup renames an entry in the list AsPathGroup within
// the NokiaConf_Configure_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions) RenameAsPathGroup(oldK, newK string) error {
	if _, ok := t.AsPathGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathGroup", newK)
	}

	e, ok := t.AsPathGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathGroup", oldK)
	}
	e.Name = &newK

	t.AsPathGroup[newK] = e
	delete(t.AsPathGroup, oldK)
	return nil
}

// GetOrCreateAsPathGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreateAsPathGroup(Name string) *NokiaConf_Configure_PolicyOptions_AsPathGroup {

	key := Name

	if v, ok := t.AsPathGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathGroup got unexpected error: %v", err))
	}
	return v
}

// GetAsPathGroup retrieves the value with the specified key from
// the AsPathGroup map field of NokiaConf_Configure_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetAsPathGroup(Name string) *NokiaConf_Configure_PolicyOptions_AsPathGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AsPathGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions) DeleteAsPathGroup(Name string) {
	key := Name

	delete(t.AsPathGroup, key)
}

// AppendAsPathGroup appends the supplied NokiaConf_Configure_PolicyOptions_AsPathGroup struct to the
// list AsPathGroup of NokiaConf_Configure_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_AsPathGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions) AppendAsPathGroup(v *NokiaConf_Configure_PolicyOptions_AsPathGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathGroup == nil {
		t.AsPathGroup = make(map[string]*NokiaConf_Configure_PolicyOptions_AsPathGroup)
	}

	if _, ok := t.AsPathGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathGroup %v", key)
	}

	t.AsPathGroup[key] = v
	return nil
}

// NewCommunity creates a new entry in the Community list of the
// NokiaConf_Configure_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions) NewCommunity(Name string) (*NokiaConf_Configure_PolicyOptions_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_PolicyOptions_Community)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &NokiaConf_Configure_PolicyOptions_Community{
		Name: &Name,
	}

	return t.Community[key], nil
}

// RenameCommunity renames an entry in the list Community within
// the NokiaConf_Configure_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions) RenameCommunity(oldK, newK string) error {
	if _, ok := t.Community[newK]; ok {
		return fmt.Errorf("key %v already exists in Community", newK)
	}

	e, ok := t.Community[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Community", oldK)
	}
	e.Name = &newK

	t.Community[newK] = e
	delete(t.Community, oldK)
	return nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreateCommunity(Name string) *NokiaConf_Configure_PolicyOptions_Community {

	key := Name

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of NokiaConf_Configure_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetCommunity(Name string) *NokiaConf_Configure_PolicyOptions_Community {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions) DeleteCommunity(Name string) {
	key := Name

	delete(t.Community, key)
}

// AppendCommunity appends the supplied NokiaConf_Configure_PolicyOptions_Community struct to the
// list Community of NokiaConf_Configure_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_Community already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions) AppendCommunity(v *NokiaConf_Configure_PolicyOptions_Community) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_PolicyOptions_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// NewDamping creates a new entry in the Damping list of the
// NokiaConf_Configure_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions) NewDamping(Name string) (*NokiaConf_Configure_PolicyOptions_Damping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Damping == nil {
		t.Damping = make(map[string]*NokiaConf_Configure_PolicyOptions_Damping)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Damping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Damping", key)
	}

	t.Damping[key] = &NokiaConf_Configure_PolicyOptions_Damping{
		Name: &Name,
	}

	return t.Damping[key], nil
}

// RenameDamping renames an entry in the list Damping within
// the NokiaConf_Configure_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions) RenameDamping(oldK, newK string) error {
	if _, ok := t.Damping[newK]; ok {
		return fmt.Errorf("key %v already exists in Damping", newK)
	}

	e, ok := t.Damping[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Damping", oldK)
	}
	e.Name = &newK

	t.Damping[newK] = e
	delete(t.Damping, oldK)
	return nil
}

// GetOrCreateDamping retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreateDamping(Name string) *NokiaConf_Configure_PolicyOptions_Damping {

	key := Name

	if v, ok := t.Damping[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDamping(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDamping got unexpected error: %v", err))
	}
	return v
}

// GetDamping retrieves the value with the specified key from
// the Damping map field of NokiaConf_Configure_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetDamping(Name string) *NokiaConf_Configure_PolicyOptions_Damping {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Damping[key]; ok {
		return lm
	}
	return nil
}

// DeleteDamping deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions) DeleteDamping(Name string) {
	key := Name

	delete(t.Damping, key)
}

// AppendDamping appends the supplied NokiaConf_Configure_PolicyOptions_Damping struct to the
// list Damping of NokiaConf_Configure_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_Damping already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions) AppendDamping(v *NokiaConf_Configure_PolicyOptions_Damping) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Damping == nil {
		t.Damping = make(map[string]*NokiaConf_Configure_PolicyOptions_Damping)
	}

	if _, ok := t.Damping[key]; ok {
		return fmt.Errorf("duplicate key for list Damping %v", key)
	}

	t.Damping[key] = v
	return nil
}

// NewPolicyStatement creates a new entry in the PolicyStatement list of the
// NokiaConf_Configure_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions) NewPolicyStatement(Name string) (*NokiaConf_Configure_PolicyOptions_PolicyStatement, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyStatement == nil {
		t.PolicyStatement = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyStatement[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyStatement", key)
	}

	t.PolicyStatement[key] = &NokiaConf_Configure_PolicyOptions_PolicyStatement{
		Name: &Name,
	}

	return t.PolicyStatement[key], nil
}

// RenamePolicyStatement renames an entry in the list PolicyStatement within
// the NokiaConf_Configure_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions) RenamePolicyStatement(oldK, newK string) error {
	if _, ok := t.PolicyStatement[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyStatement", newK)
	}

	e, ok := t.PolicyStatement[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyStatement", oldK)
	}
	e.Name = &newK

	t.PolicyStatement[newK] = e
	delete(t.PolicyStatement, oldK)
	return nil
}

// GetOrCreatePolicyStatement retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreatePolicyStatement(Name string) *NokiaConf_Configure_PolicyOptions_PolicyStatement {

	key := Name

	if v, ok := t.PolicyStatement[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyStatement(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyStatement got unexpected error: %v", err))
	}
	return v
}

// GetPolicyStatement retrieves the value with the specified key from
// the PolicyStatement map field of NokiaConf_Configure_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetPolicyStatement(Name string) *NokiaConf_Configure_PolicyOptions_PolicyStatement {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyStatement[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyStatement deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions) DeletePolicyStatement(Name string) {
	key := Name

	delete(t.PolicyStatement, key)
}

// AppendPolicyStatement appends the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement struct to the
// list PolicyStatement of NokiaConf_Configure_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions) AppendPolicyStatement(v *NokiaConf_Configure_PolicyOptions_PolicyStatement) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyStatement == nil {
		t.PolicyStatement = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement)
	}

	if _, ok := t.PolicyStatement[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyStatement %v", key)
	}

	t.PolicyStatement[key] = v
	return nil
}

// NewPrefixList creates a new entry in the PrefixList list of the
// NokiaConf_Configure_PolicyOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions) NewPrefixList(Name string) (*NokiaConf_Configure_PolicyOptions_PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_PolicyOptions_PrefixList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixList", key)
	}

	t.PrefixList[key] = &NokiaConf_Configure_PolicyOptions_PrefixList{
		Name: &Name,
	}

	return t.PrefixList[key], nil
}

// RenamePrefixList renames an entry in the list PrefixList within
// the NokiaConf_Configure_PolicyOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions) RenamePrefixList(oldK, newK string) error {
	if _, ok := t.PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixList", newK)
	}

	e, ok := t.PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixList", oldK)
	}
	e.Name = &newK

	t.PrefixList[newK] = e
	delete(t.PrefixList, oldK)
	return nil
}

// GetOrCreatePrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreatePrefixList(Name string) *NokiaConf_Configure_PolicyOptions_PrefixList {

	key := Name

	if v, ok := t.PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixList got unexpected error: %v", err))
	}
	return v
}

// GetPrefixList retrieves the value with the specified key from
// the PrefixList map field of NokiaConf_Configure_PolicyOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetPrefixList(Name string) *NokiaConf_Configure_PolicyOptions_PrefixList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions) DeletePrefixList(Name string) {
	key := Name

	delete(t.PrefixList, key)
}

// AppendPrefixList appends the supplied NokiaConf_Configure_PolicyOptions_PrefixList struct to the
// list PrefixList of NokiaConf_Configure_PolicyOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions) AppendPrefixList(v *NokiaConf_Configure_PolicyOptions_PrefixList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_PolicyOptions_PrefixList)
	}

	if _, ok := t.PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixList %v", key)
	}

	t.PrefixList[key] = v
	return nil
}

// GetOrCreateGlobalVariables retrieves the value of the GlobalVariables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions) GetOrCreateGlobalVariables() *NokiaConf_Configure_PolicyOptions_GlobalVariables {
	if t.GlobalVariables != nil {
		return t.GlobalVariables
	}
	t.GlobalVariables = &NokiaConf_Configure_PolicyOptions_GlobalVariables{}
	return t.GlobalVariables
}

// GetGlobalVariables returns the value of the GlobalVariables struct pointer
// from NokiaConf_Configure_PolicyOptions. If the receiver or the field GlobalVariables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions) GetGlobalVariables() *NokiaConf_Configure_PolicyOptions_GlobalVariables {
	if t != nil && t.GlobalVariables != nil {
		return t.GlobalVariables
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GlobalVariables.PopulateDefaults()
	for _, e := range t.AsPath {
		e.PopulateDefaults()
	}
	for _, e := range t.AsPathGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
	for _, e := range t.Damping {
		e.PopulateDefaults()
	}
	for _, e := range t.PolicyStatement {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions.
func (*NokiaConf_Configure_PolicyOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_AsPath represents the /nokia-conf/configure/policy-options/as-path YANG schema element.
type NokiaConf_Configure_PolicyOptions_AsPath struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Expression         *string  `path:"expression" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_AsPath) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_PolicyOptions_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_AsPath struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_AsPath.
func (*NokiaConf_Configure_PolicyOptions_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_AsPathGroup represents the /nokia-conf/configure/policy-options/as-path-group YANG schema element.
type NokiaConf_Configure_PolicyOptions_AsPathGroup struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry `path:"entry" module:"nokia-conf"`
	Name               *string                                                         `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_AsPathGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_AsPathGroup) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_PolicyOptions_AsPathGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) NewEntry(Entry uint32) (*NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry)
	}

	key := Entry

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry{
		Entry: &Entry,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_PolicyOptions_AsPathGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Entry = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_AsPathGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) GetOrCreateEntry(Entry uint32) *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry {

	key := Entry

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Entry)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_PolicyOptions_AsPathGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) GetEntry(Entry uint32) *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry {

	if t == nil {
		return nil
	}

	key := Entry

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_AsPathGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) DeleteEntry(Entry uint32) {
	key := Entry

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry struct to the
// list Entry of NokiaConf_Configure_PolicyOptions_AsPathGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) AppendEntry(v *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) error {
	if v.Entry == nil {
		return fmt.Errorf("invalid nil key received for Entry")
	}

	key := *v.Entry

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_AsPathGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_AsPathGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_AsPathGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_AsPathGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_AsPathGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_AsPathGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_AsPathGroup.
func (*NokiaConf_Configure_PolicyOptions_AsPathGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry represents the /nokia-conf/configure/policy-options/as-path-group/entry YANG schema element.
type NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              *uint32  `path:"entry" module:"nokia-conf"`
	Expression         *string  `path:"expression" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntry retrieves the value of the leaf Entry from the NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Entry is set, it can
// safely use t.GetEntry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Entry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) GetEntry() uint32 {
	if t == nil || t.Entry == nil {
		return 0
	}
	return *t.Entry
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Entry == nil {
		return nil, fmt.Errorf("nil value for key Entry")
	}

	return map[string]interface{}{
		"entry": *t.Entry,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry.
func (*NokiaConf_Configure_PolicyOptions_AsPathGroup_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_Community represents the /nokia-conf/configure/policy-options/community YANG schema element.
type NokiaConf_Configure_PolicyOptions_Community struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Expression         *NokiaConf_Configure_PolicyOptions_Community_Expression        `path:"expression" module:"nokia-conf" yangPresence:"true"`
	Member             map[string]*NokiaConf_Configure_PolicyOptions_Community_Member `path:"member" module:"nokia-conf"`
	Name               *string                                                        `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_Community) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// NokiaConf_Configure_PolicyOptions_Community struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_Community) NewMember(Member string) (*NokiaConf_Configure_PolicyOptions_Community_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_PolicyOptions_Community_Member)
	}

	key := Member

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &NokiaConf_Configure_PolicyOptions_Community_Member{
		Member: &Member,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the NokiaConf_Configure_PolicyOptions_Community struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_Community) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.Member = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_Community. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetOrCreateMember(Member string) *NokiaConf_Configure_PolicyOptions_Community_Member {

	key := Member

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(Member)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of NokiaConf_Configure_PolicyOptions_Community. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetMember(Member string) *NokiaConf_Configure_PolicyOptions_Community_Member {

	if t == nil {
		return nil
	}

	key := Member

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_Community. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_Community) DeleteMember(Member string) {
	key := Member

	delete(t.Member, key)
}

// AppendMember appends the supplied NokiaConf_Configure_PolicyOptions_Community_Member struct to the
// list Member of NokiaConf_Configure_PolicyOptions_Community. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_Community_Member already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_Community) AppendMember(v *NokiaConf_Configure_PolicyOptions_Community_Member) error {
	if v.Member == nil {
		return fmt.Errorf("invalid nil key received for Member")
	}

	key := *v.Member

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_PolicyOptions_Community_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetOrCreateExpression retrieves the value of the Expression field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetOrCreateExpression() *NokiaConf_Configure_PolicyOptions_Community_Expression {
	if t.Expression != nil {
		return t.Expression
	}
	t.Expression = &NokiaConf_Configure_PolicyOptions_Community_Expression{}
	return t.Expression
}

// GetExpression returns the value of the Expression struct pointer
// from NokiaConf_Configure_PolicyOptions_Community. If the receiver or the field Expression is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetExpression() *NokiaConf_Configure_PolicyOptions_Community_Expression {
	if t != nil && t.Expression != nil {
		return t.Expression
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Expression.PopulateDefaults()
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_Community struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_Community.
func (*NokiaConf_Configure_PolicyOptions_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_Community_Expression represents the /nokia-conf/configure/policy-options/community/expression YANG schema element.
type NokiaConf_Configure_PolicyOptions_Community_Expression struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Exact              *bool    `path:"exact" module:"nokia-conf"`
	Expr               *string  `path:"expr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_Community_Expression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_Community_Expression) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_Community_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_Community_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExact retrieves the value of the leaf Exact from the NokiaConf_Configure_PolicyOptions_Community_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exact is set, it can
// safely use t.GetExact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) GetExact() bool {
	if t == nil || t.Exact == nil {
		return false
	}
	return *t.Exact
}

// GetExpr retrieves the value of the leaf Expr from the NokiaConf_Configure_PolicyOptions_Community_Expression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expr is set, it can
// safely use t.GetExpr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) GetExpr() string {
	if t == nil || t.Expr == nil {
		return ""
	}
	return *t.Expr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_Community_Expression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exact == nil {
		var v bool = false
		t.Exact = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_Community_Expression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_Community_Expression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_Community_Expression.
func (*NokiaConf_Configure_PolicyOptions_Community_Expression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_Community_Member represents the /nokia-conf/configure/policy-options/community/member YANG schema element.
type NokiaConf_Configure_PolicyOptions_Community_Member struct {
	Member *string `path:"member" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_Community_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_Community_Member) IsYANGGoStruct() {}

// GetMember retrieves the value of the leaf Member from the NokiaConf_Configure_PolicyOptions_Community_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Community_Member) GetMember() string {
	if t == nil || t.Member == nil {
		return ""
	}
	return *t.Member
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_Community_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_Community_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_Community_Member struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_Community_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Member == nil {
		return nil, fmt.Errorf("nil value for key Member")
	}

	return map[string]interface{}{
		"member": *t.Member,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Community_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_Community_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Community_Member) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_Community_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_Community_Member.
func (*NokiaConf_Configure_PolicyOptions_Community_Member) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_Damping represents the /nokia-conf/configure/policy-options/damping YANG schema element.
type NokiaConf_Configure_PolicyOptions_Damping struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HalfLife           *uint32  `path:"half-life" module:"nokia-conf"`
	MaxSuppress        *uint32  `path:"max-suppress" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
	Reuse              *uint32  `path:"reuse" module:"nokia-conf"`
	Suppress           *uint32  `path:"suppress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_Damping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_Damping) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHalfLife retrieves the value of the leaf HalfLife from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLife is set, it can
// safely use t.GetHalfLife() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLife == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetHalfLife() uint32 {
	if t == nil || t.HalfLife == nil {
		return 0
	}
	return *t.HalfLife
}

// GetMaxSuppress retrieves the value of the leaf MaxSuppress from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSuppress is set, it can
// safely use t.GetMaxSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSuppress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetMaxSuppress() uint32 {
	if t == nil || t.MaxSuppress == nil {
		return 0
	}
	return *t.MaxSuppress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReuse retrieves the value of the leaf Reuse from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reuse is set, it can
// safely use t.GetReuse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reuse == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetReuse() uint32 {
	if t == nil || t.Reuse == nil {
		return 0
	}
	return *t.Reuse
}

// GetSuppress retrieves the value of the leaf Suppress from the NokiaConf_Configure_PolicyOptions_Damping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suppress is set, it can
// safely use t.GetSuppress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suppress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_Damping) GetSuppress() uint32 {
	if t == nil || t.Suppress == nil {
		return 0
	}
	return *t.Suppress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_Damping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_Damping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_Damping struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_Damping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Damping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_Damping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_Damping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_Damping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_Damping.
func (*NokiaConf_Configure_PolicyOptions_Damping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_GlobalVariables represents the /nokia-conf/configure/policy-options/global-variables YANG schema element.
type NokiaConf_Configure_PolicyOptions_GlobalVariables struct {
	Name map[string]*NokiaConf_Configure_PolicyOptions_GlobalVariables_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_GlobalVariables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_GlobalVariables) IsYANGGoStruct() {}

// NewName creates a new entry in the Name list of the
// NokiaConf_Configure_PolicyOptions_GlobalVariables struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) NewName(VariableName string) (*NokiaConf_Configure_PolicyOptions_GlobalVariables_Name, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_PolicyOptions_GlobalVariables_Name)
	}

	key := VariableName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &NokiaConf_Configure_PolicyOptions_GlobalVariables_Name{
		VariableName: &VariableName,
	}

	return t.Name[key], nil
}

// RenameName renames an entry in the list Name within
// the NokiaConf_Configure_PolicyOptions_GlobalVariables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) RenameName(oldK, newK string) error {
	if _, ok := t.Name[newK]; ok {
		return fmt.Errorf("key %v already exists in Name", newK)
	}

	e, ok := t.Name[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Name", oldK)
	}
	e.VariableName = &newK

	t.Name[newK] = e
	delete(t.Name, oldK)
	return nil
}

// GetOrCreateName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_GlobalVariables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) GetOrCreateName(VariableName string) *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name {

	key := VariableName

	if v, ok := t.Name[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewName(VariableName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateName got unexpected error: %v", err))
	}
	return v
}

// GetName retrieves the value with the specified key from
// the Name map field of NokiaConf_Configure_PolicyOptions_GlobalVariables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) GetName(VariableName string) *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name {

	if t == nil {
		return nil
	}

	key := VariableName

	if lm, ok := t.Name[key]; ok {
		return lm
	}
	return nil
}

// DeleteName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_GlobalVariables. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) DeleteName(VariableName string) {
	key := VariableName

	delete(t.Name, key)
}

// AppendName appends the supplied NokiaConf_Configure_PolicyOptions_GlobalVariables_Name struct to the
// list Name of NokiaConf_Configure_PolicyOptions_GlobalVariables. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_GlobalVariables_Name already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) AppendName(v *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) error {
	if v.VariableName == nil {
		return fmt.Errorf("invalid nil key received for VariableName")
	}

	key := *v.VariableName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_PolicyOptions_GlobalVariables_Name)
	}

	if _, ok := t.Name[key]; ok {
		return fmt.Errorf("duplicate key for list Name %v", key)
	}

	t.Name[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_GlobalVariables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Name {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_GlobalVariables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_GlobalVariables.
func (*NokiaConf_Configure_PolicyOptions_GlobalVariables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_GlobalVariables_Name represents the /nokia-conf/configure/policy-options/global-variables/name YANG schema element.
type NokiaConf_Configure_PolicyOptions_GlobalVariables_Name struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Decimal            *float64 `path:"decimal" module:"nokia-conf"`
	Number             *uint64  `path:"number" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
	VariableName       *string  `path:"variable-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_GlobalVariables_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDecimal retrieves the value of the leaf Decimal from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Decimal is set, it can
// safely use t.GetDecimal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Decimal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetDecimal() float64 {
	if t == nil || t.Decimal == nil {
		return 0.0
	}
	return *t.Decimal
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetNumber() uint64 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// GetVariableName retrieves the value of the leaf VariableName from the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableName is set, it can
// safely use t.GetVariableName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) GetVariableName() string {
	if t == nil || t.VariableName == nil {
		return ""
	}
	return *t.VariableName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_GlobalVariables_Name struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VariableName == nil {
		return nil, fmt.Errorf("nil value for key VariableName")
	}

	return map[string]interface{}{
		"variable-name": *t.VariableName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_GlobalVariables_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_GlobalVariables_Name.
func (*NokiaConf_Configure_PolicyOptions_GlobalVariables_Name) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement represents the /nokia-conf/configure/policy-options/policy-statement YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction         `path:"default-action" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                                                  `path:"description" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry      `path:"entry" module:"nokia-conf"`
	EntryType          E_NokiaConf_Configure_PolicyOptions_PolicyStatement_EntryType            `path:"entry-type" module:"nokia-conf"`
	Name               *string                                                                  `path:"name" module:"nokia-conf"`
	NamedEntry         map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry `path:"named-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_PolicyOptions_PolicyStatement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) NewEntry(EntryId uint32) (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_PolicyOptions_PolicyStatement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_PolicyOptions_PolicyStatement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetEntry(EntryId uint32) *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry struct to the
// list Entry of NokiaConf_Configure_PolicyOptions_PolicyStatement. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) AppendEntry(v *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// NewNamedEntry creates a new entry in the NamedEntry list of the
// NokiaConf_Configure_PolicyOptions_PolicyStatement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) NewNamedEntry(EntryName string) (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry)
	}

	key := EntryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NamedEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NamedEntry", key)
	}

	t.NamedEntry[key] = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry{
		EntryName: &EntryName,
	}

	return t.NamedEntry[key], nil
}

// RenameNamedEntry renames an entry in the list NamedEntry within
// the NokiaConf_Configure_PolicyOptions_PolicyStatement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) RenameNamedEntry(oldK, newK string) error {
	if _, ok := t.NamedEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in NamedEntry", newK)
	}

	e, ok := t.NamedEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NamedEntry", oldK)
	}
	e.EntryName = &newK

	t.NamedEntry[newK] = e
	delete(t.NamedEntry, oldK)
	return nil
}

// GetOrCreateNamedEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetOrCreateNamedEntry(EntryName string) *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry {

	key := EntryName

	if v, ok := t.NamedEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNamedEntry(EntryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNamedEntry got unexpected error: %v", err))
	}
	return v
}

// GetNamedEntry retrieves the value with the specified key from
// the NamedEntry map field of NokiaConf_Configure_PolicyOptions_PolicyStatement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetNamedEntry(EntryName string) *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry {

	if t == nil {
		return nil
	}

	key := EntryName

	if lm, ok := t.NamedEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteNamedEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) DeleteNamedEntry(EntryName string) {
	key := EntryName

	delete(t.NamedEntry, key)
}

// AppendNamedEntry appends the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry struct to the
// list NamedEntry of NokiaConf_Configure_PolicyOptions_PolicyStatement. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) AppendNamedEntry(v *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) error {
	if v.EntryName == nil {
		return fmt.Errorf("invalid nil key received for EntryName")
	}

	key := *v.EntryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NamedEntry == nil {
		t.NamedEntry = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry)
	}

	if _, ok := t.NamedEntry[key]; ok {
		return fmt.Errorf("duplicate key for list NamedEntry %v", key)
	}

	t.NamedEntry[key] = v
	return nil
}

// GetOrCreateDefaultAction retrieves the value of the DefaultAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetOrCreateDefaultAction() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction {
	if t.DefaultAction != nil {
		return t.DefaultAction
	}
	t.DefaultAction = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction{}
	return t.DefaultAction
}

// GetDefaultAction returns the value of the DefaultAction struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement. If the receiver or the field DefaultAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetDefaultAction() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction {
	if t != nil && t.DefaultAction != nil {
		return t.DefaultAction
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryType retrieves the value of the leaf EntryType from the NokiaConf_Configure_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryType is set, it can
// safely use t.GetEntryType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetEntryType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_EntryType {
	if t == nil || t.EntryType == 0 {
		return NokiaConf_Configure_PolicyOptions_PolicyStatement_EntryType_numbered
	}
	return t.EntryType
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EntryType == 0 {
		t.EntryType = NokiaConf_Configure_PolicyOptions_PolicyStatement_EntryType_numbered
	}
	t.DefaultAction.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
	for _, e := range t.NamedEntry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PolicyStatement struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction represents the /nokia-conf/configure/policy-options/policy-statement/default-action YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction struct {
	ActionType            E_NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_ActionType                `path:"action-type" module:"nokia-conf"`
	AddPathsSendLimit     NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AddPathsSendLimit_Union     `path:"add-paths-send-limit" module:"nokia-conf"`
	AdminTagPolicy        *string                                                                                     `path:"admin-tag-policy" module:"nokia-conf"`
	AdvertiseLabel        E_NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AdvertiseLabel            `path:"advertise-label" module:"nokia-conf"`
	AigpMetric            *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric                 `path:"aigp-metric" module:"nokia-conf"`
	ApplyGroups           []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath                     `path:"as-path" module:"nokia-conf"`
	AsPathPrepend         *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend              `path:"as-path-prepend" module:"nokia-conf"`
	BgpHighPriority       *bool                                                                                       `path:"bgp-high-priority" module:"nokia-conf"`
	BgpLeak               *bool                                                                                       `path:"bgp-leak" module:"nokia-conf"`
	BgpMed                *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed                     `path:"bgp-med" module:"nokia-conf"`
	BgpTunnelMetric       *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	Community             *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community                  `path:"community" module:"nokia-conf"`
	CreateMplsTunnel      *bool                                                                                       `path:"create-mpls-tunnel" module:"nokia-conf"`
	CreateUdpTunnel       *bool                                                                                       `path:"create-udp-tunnel" module:"nokia-conf"`
	Damping               NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Damping_Union               `path:"damping" module:"nokia-conf"`
	DestClass             *uint32                                                                                     `path:"dest-class" module:"nokia-conf"`
	EgressStatistics      *bool                                                                                       `path:"egress-statistics" module:"nokia-conf"`
	FlexAlgo              NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_FlexAlgo_Union              `path:"flex-algo" module:"nokia-conf"`
	IngressStatistics     *bool                                                                                       `path:"ingress-statistics" module:"nokia-conf"`
	InstallBackupPath     *bool                                                                                       `path:"install-backup-path" module:"nokia-conf"`
	LocalPreference       NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_LocalPreference_Union       `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric                     `path:"metric" module:"nokia-conf"`
	MulticastRedirection  *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection       `path:"multicast-redirection" module:"nokia-conf"`
	NatPolicy             *string                                                                                     `path:"nat-policy" module:"nokia-conf"`
	NextHop               NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_NextHop_Union               `path:"next-hop" module:"nokia-conf"`
	Origin                NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Origin_Union                `path:"origin" module:"nokia-conf"`
	OriginValidationState NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_OriginValidationState_Union `path:"origin-validation-state" module:"nokia-conf"`
	Preference            NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Preference_Union            `path:"preference" module:"nokia-conf"`
	ResolveStatic         *bool                                                                                       `path:"resolve-static" module:"nokia-conf"`
	RouteTableInstall     *bool                                                                                       `path:"route-table-install" module:"nokia-conf"`
	SourceClass           *uint32                                                                                     `path:"source-class" module:"nokia-conf"`
	SrLabelIndex          *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex               `path:"sr-label-index" module:"nokia-conf"`
	SrMaintenancePolicy   *string                                                                                     `path:"sr-maintenance-policy" module:"nokia-conf"`
	StickyEcmp            *bool                                                                                       `path:"sticky-ecmp" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Tag_Union                   `path:"tag" module:"nokia-conf"`
	Type                  NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Type_Union                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) IsYANGGoStruct() {}

// GetOrCreateAigpMetric retrieves the value of the AigpMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateAigpMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric {
	if t.AigpMetric != nil {
		return t.AigpMetric
	}
	t.AigpMetric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric{}
	return t.AigpMetric
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath{}
	return t.AsPath
}

// GetOrCreateAsPathPrepend retrieves the value of the AsPathPrepend field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateAsPathPrepend() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend {
	if t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	t.AsPathPrepend = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend{}
	return t.AsPathPrepend
}

// GetOrCreateBgpMed retrieves the value of the BgpMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateBgpMed() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed {
	if t.BgpMed != nil {
		return t.BgpMed
	}
	t.BgpMed = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed{}
	return t.BgpMed
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community{}
	return t.Community
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric{}
	return t.Metric
}

// GetOrCreateMulticastRedirection retrieves the value of the MulticastRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateMulticastRedirection() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection {
	if t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	t.MulticastRedirection = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection{}
	return t.MulticastRedirection
}

// GetOrCreateSrLabelIndex retrieves the value of the SrLabelIndex field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrCreateSrLabelIndex() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex {
	if t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	t.SrLabelIndex = &NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex{}
	return t.SrLabelIndex
}

// GetAigpMetric returns the value of the AigpMetric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field AigpMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetAigpMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric {
	if t != nil && t.AigpMetric != nil {
		return t.AigpMetric
	}
	return nil
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetAsPathPrepend returns the value of the AsPathPrepend struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field AsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetAsPathPrepend() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend {
	if t != nil && t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	return nil
}

// GetBgpMed returns the value of the BgpMed struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field BgpMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetBgpMed() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed {
	if t != nil && t.BgpMed != nil {
		return t.BgpMed
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetBgpTunnelMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetMulticastRedirection returns the value of the MulticastRedirection struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field MulticastRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetMulticastRedirection() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection {
	if t != nil && t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	return nil
}

// GetSrLabelIndex returns the value of the SrLabelIndex struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction. If the receiver or the field SrLabelIndex is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetSrLabelIndex() *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex {
	if t != nil && t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	return nil
}

// GetActionType retrieves the value of the leaf ActionType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionType is set, it can
// safely use t.GetActionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetActionType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_ActionType {
	if t == nil || t.ActionType == 0 {
		return 0
	}
	return t.ActionType
}

// GetAddPathsSendLimit retrieves the value of the leaf AddPathsSendLimit from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddPathsSendLimit is set, it can
// safely use t.GetAddPathsSendLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddPathsSendLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetAddPathsSendLimit() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AddPathsSendLimit_Union {
	if t == nil || t.AddPathsSendLimit == nil {
		return nil
	}
	return t.AddPathsSendLimit
}

// GetAdminTagPolicy retrieves the value of the leaf AdminTagPolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTagPolicy is set, it can
// safely use t.GetAdminTagPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTagPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetAdminTagPolicy() string {
	if t == nil || t.AdminTagPolicy == nil {
		return ""
	}
	return *t.AdminTagPolicy
}

// GetAdvertiseLabel retrieves the value of the leaf AdvertiseLabel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLabel is set, it can
// safely use t.GetAdvertiseLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetAdvertiseLabel() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AdvertiseLabel {
	if t == nil || t.AdvertiseLabel == 0 {
		return 0
	}
	return t.AdvertiseLabel
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpHighPriority retrieves the value of the leaf BgpHighPriority from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpHighPriority is set, it can
// safely use t.GetBgpHighPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpHighPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetBgpHighPriority() bool {
	if t == nil || t.BgpHighPriority == nil {
		return false
	}
	return *t.BgpHighPriority
}

// GetBgpLeak retrieves the value of the leaf BgpLeak from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLeak is set, it can
// safely use t.GetBgpLeak() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLeak == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetBgpLeak() bool {
	if t == nil || t.BgpLeak == nil {
		return false
	}
	return *t.BgpLeak
}

// GetCreateMplsTunnel retrieves the value of the leaf CreateMplsTunnel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateMplsTunnel is set, it can
// safely use t.GetCreateMplsTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateMplsTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetCreateMplsTunnel() bool {
	if t == nil || t.CreateMplsTunnel == nil {
		return false
	}
	return *t.CreateMplsTunnel
}

// GetCreateUdpTunnel retrieves the value of the leaf CreateUdpTunnel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateUdpTunnel is set, it can
// safely use t.GetCreateUdpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateUdpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetCreateUdpTunnel() bool {
	if t == nil || t.CreateUdpTunnel == nil {
		return false
	}
	return *t.CreateUdpTunnel
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetDamping() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Damping_Union {
	if t == nil || t.Damping == nil {
		return nil
	}
	return t.Damping
}

// GetDestClass retrieves the value of the leaf DestClass from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestClass is set, it can
// safely use t.GetDestClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetDestClass() uint32 {
	if t == nil || t.DestClass == nil {
		return 0
	}
	return *t.DestClass
}

// GetEgressStatistics retrieves the value of the leaf EgressStatistics from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressStatistics is set, it can
// safely use t.GetEgressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetEgressStatistics() bool {
	if t == nil || t.EgressStatistics == nil {
		return false
	}
	return *t.EgressStatistics
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetFlexAlgo() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_FlexAlgo_Union {
	if t == nil || t.FlexAlgo == nil {
		return nil
	}
	return t.FlexAlgo
}

// GetIngressStatistics retrieves the value of the leaf IngressStatistics from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStatistics is set, it can
// safely use t.GetIngressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetIngressStatistics() bool {
	if t == nil || t.IngressStatistics == nil {
		return false
	}
	return *t.IngressStatistics
}

// GetInstallBackupPath retrieves the value of the leaf InstallBackupPath from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallBackupPath is set, it can
// safely use t.GetInstallBackupPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallBackupPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetInstallBackupPath() bool {
	if t == nil || t.InstallBackupPath == nil {
		return false
	}
	return *t.InstallBackupPath
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetLocalPreference() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_LocalPreference_Union {
	if t == nil || t.LocalPreference == nil {
		return nil
	}
	return t.LocalPreference
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetNextHop() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOrigin() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetOriginValidationState() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_OriginValidationState_Union {
	if t == nil || t.OriginValidationState == nil {
		return nil
	}
	return t.OriginValidationState
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetPreference() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Preference_Union {
	if t == nil || t.Preference == nil {
		return nil
	}
	return t.Preference
}

// GetResolveStatic retrieves the value of the leaf ResolveStatic from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveStatic is set, it can
// safely use t.GetResolveStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetResolveStatic() bool {
	if t == nil || t.ResolveStatic == nil {
		return false
	}
	return *t.ResolveStatic
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetSrMaintenancePolicy retrieves the value of the leaf SrMaintenancePolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrMaintenancePolicy is set, it can
// safely use t.GetSrMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrMaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetSrMaintenancePolicy() string {
	if t == nil || t.SrMaintenancePolicy == nil {
		return ""
	}
	return *t.SrMaintenancePolicy
}

// GetStickyEcmp retrieves the value of the leaf StickyEcmp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyEcmp is set, it can
// safely use t.GetStickyEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetStickyEcmp() bool {
	if t == nil || t.StickyEcmp == nil {
		return false
	}
	return *t.StickyEcmp
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetTag() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) GetType() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpHighPriority == nil {
		var v bool = false
		t.BgpHighPriority = &v
	}
	if t.BgpLeak == nil {
		var v bool = false
		t.BgpLeak = &v
	}
	if t.CreateMplsTunnel == nil {
		var v bool = false
		t.CreateMplsTunnel = &v
	}
	if t.CreateUdpTunnel == nil {
		var v bool = false
		t.CreateUdpTunnel = &v
	}
	if t.EgressStatistics == nil {
		var v bool = false
		t.EgressStatistics = &v
	}
	if t.IngressStatistics == nil {
		var v bool = false
		t.IngressStatistics = &v
	}
	if t.InstallBackupPath == nil {
		var v bool = false
		t.InstallBackupPath = &v
	}
	if t.ResolveStatic == nil {
		var v bool = false
		t.ResolveStatic = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.StickyEcmp == nil {
		var v bool = false
		t.StickyEcmp = &v
	}
	t.AigpMetric.PopulateDefaults()
	t.AsPath.PopulateDefaults()
	t.AsPathPrepend.PopulateDefaults()
	t.BgpMed.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.MulticastRedirection.PopulateDefaults()
	t.SrLabelIndex.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric represents the /nokia-conf/configure/policy-options/policy-statement/default-action/aigp-metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric struct {
	Add NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Add_Union `path:"add" module:"nokia-conf"`
	Set NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) GetAdd() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AigpMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath represents the /nokia-conf/configure/policy-options/policy-statement/default-action/as-path YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath struct {
	Add     *string `path:"add" module:"nokia-conf"`
	Replace *string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend represents the /nokia-conf/configure/policy-options/policy-statement/default-action/as-path-prepend YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend struct {
	AsPath NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_AsPath_Union `path:"as-path" module:"nokia-conf"`
	Repeat NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) IsYANGGoStruct() {
}

// GetAsPath retrieves the value of the leaf AsPath from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPath is set, it can
// safely use t.GetAsPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) GetAsPath() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_AsPath_Union {
	if t == nil || t.AsPath == nil {
		return nil
	}
	return t.AsPath
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) GetRepeat() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionInt32(1)
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionInt32(1)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_AsPathPrepend) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed represents the /nokia-conf/configure/policy-options/policy-statement/default-action/bgp-med YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed struct {
	Adjust *string                                                                          `path:"adjust" module:"nokia-conf"`
	Set    NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) IsYANGGoStruct() {}

// GetAdjust retrieves the value of the leaf Adjust from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjust is set, it can
// safely use t.GetAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) GetAdjust() string {
	if t == nil || t.Adjust == nil {
		return ""
	}
	return *t.Adjust
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric represents the /nokia-conf/configure/policy-options/policy-statement/default-action/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric struct {
	PreferAigp *bool                                                                                       `path:"prefer-aigp" module:"nokia-conf"`
	Value      NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) IsYANGGoStruct() {
}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community represents the /nokia-conf/configure/policy-options/policy-statement/default-action/community YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community struct {
	Add                []string `path:"add" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Remove             []string `path:"remove" module:"nokia-conf"`
	Replace            []string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) GetAdd() []string {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRemove retrieves the value of the leaf Remove from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) GetRemove() []string {
	if t == nil || t.Remove == nil {
		return nil
	}
	return t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) GetReplace() []string {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric represents the /nokia-conf/configure/policy-options/policy-statement/default-action/metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric struct {
	Add      NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric_Add_Union      `path:"add" module:"nokia-conf"`
	Set      NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric_Set_Union      `path:"set" module:"nokia-conf"`
	Subtract NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric_Subtract_Union `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) GetAdd() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) GetSubtract() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric_Subtract_Union {
	if t == nil || t.Subtract == nil {
		return nil
	}
	return t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection represents the /nokia-conf/configure/policy-options/policy-statement/default-action/multicast-redirection YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection struct {
	FwdService *string `path:"fwd-service" module:"nokia-conf"`
	IpIntName  *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) IsYANGGoStruct() {
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return "Base"
	}
	return *t.FwdService
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FwdService == nil {
		var v string = "Base"
		t.FwdService = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_MulticastRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex represents the /nokia-conf/configure/policy-options/policy-statement/default-action/sr-label-index YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex struct {
	PreferIgp *bool                                                                                    `path:"prefer-igp" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) IsYANGGoStruct() {
}

// GetPreferIgp retrieves the value of the leaf PreferIgp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferIgp is set, it can
// safely use t.GetPreferIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) GetPreferIgp() bool {
	if t == nil || t.PreferIgp == nil {
		return false
	}
	return *t.PreferIgp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferIgp == nil {
		var v bool = false
		t.PreferIgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_DefaultAction_SrLabelIndex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry represents the /nokia-conf/configure/policy-options/policy-statement/entry YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry struct {
	Action                *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action                `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups           []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ConditionalExpression *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression `path:"conditional-expression" module:"nokia-conf" yangPresence:"true"`
	Description           *string                                                                        `path:"description" module:"nokia-conf"`
	EntryId               *uint32                                                                        `path:"entry-id" module:"nokia-conf"`
	From                  *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From                  `path:"from" module:"nokia-conf" yangPresence:"true"`
	To                    *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To                    `path:"to" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetOrCreateAction() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action{}
	return t.Action
}

// GetOrCreateConditionalExpression retrieves the value of the ConditionalExpression field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetOrCreateConditionalExpression() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression {
	if t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	t.ConditionalExpression = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression{}
	return t.ConditionalExpression
}

// GetOrCreateFrom retrieves the value of the From field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetOrCreateFrom() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From {
	if t.From != nil {
		return t.From
	}
	t.From = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From{}
	return t.From
}

// GetOrCreateTo retrieves the value of the To field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetOrCreateTo() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To {
	if t.To != nil {
		return t.To
	}
	t.To = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To{}
	return t.To
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetAction() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetConditionalExpression returns the value of the ConditionalExpression struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry. If the receiver or the field ConditionalExpression is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetConditionalExpression() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression {
	if t != nil && t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	return nil
}

// GetFrom returns the value of the From struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry. If the receiver or the field From is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetFrom() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From {
	if t != nil && t.From != nil {
		return t.From
	}
	return nil
}

// GetTo returns the value of the To struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry. If the receiver or the field To is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetTo() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To {
	if t != nil && t.To != nil {
		return t.To
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.ConditionalExpression.PopulateDefaults()
	t.From.PopulateDefaults()
	t.To.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action represents the /nokia-conf/configure/policy-options/policy-statement/entry/action YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action struct {
	ActionType            E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ActionType                `path:"action-type" module:"nokia-conf"`
	AddPathsSendLimit     NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AddPathsSendLimit_Union     `path:"add-paths-send-limit" module:"nokia-conf"`
	AdminTagPolicy        *string                                                                                    `path:"admin-tag-policy" module:"nokia-conf"`
	AdvertiseLabel        E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AdvertiseLabel            `path:"advertise-label" module:"nokia-conf"`
	AigpMetric            *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric                 `path:"aigp-metric" module:"nokia-conf"`
	ApplyGroups           []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath                     `path:"as-path" module:"nokia-conf"`
	AsPathPrepend         *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend              `path:"as-path-prepend" module:"nokia-conf"`
	BgpHighPriority       *bool                                                                                      `path:"bgp-high-priority" module:"nokia-conf"`
	BgpLeak               *bool                                                                                      `path:"bgp-leak" module:"nokia-conf"`
	BgpMed                *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed                     `path:"bgp-med" module:"nokia-conf"`
	BgpTunnelMetric       *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	Community             *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community                  `path:"community" module:"nokia-conf"`
	CreateMplsTunnel      *bool                                                                                      `path:"create-mpls-tunnel" module:"nokia-conf"`
	CreateUdpTunnel       *bool                                                                                      `path:"create-udp-tunnel" module:"nokia-conf"`
	Damping               NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Damping_Union               `path:"damping" module:"nokia-conf"`
	DestClass             *uint32                                                                                    `path:"dest-class" module:"nokia-conf"`
	EgressStatistics      *bool                                                                                      `path:"egress-statistics" module:"nokia-conf"`
	FlexAlgo              NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_FlexAlgo_Union              `path:"flex-algo" module:"nokia-conf"`
	ForwardingClass       *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass            `path:"forwarding-class" module:"nokia-conf"`
	IngressStatistics     *bool                                                                                      `path:"ingress-statistics" module:"nokia-conf"`
	InstallBackupPath     *bool                                                                                      `path:"install-backup-path" module:"nokia-conf"`
	LocalPreference       NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_LocalPreference_Union       `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric                     `path:"metric" module:"nokia-conf"`
	MulticastRedirection  *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection       `path:"multicast-redirection" module:"nokia-conf"`
	NatPolicy             *string                                                                                    `path:"nat-policy" module:"nokia-conf"`
	NextHop               NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_NextHop_Union               `path:"next-hop" module:"nokia-conf"`
	Origin                NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Origin_Union                `path:"origin" module:"nokia-conf"`
	OriginValidationState NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_OriginValidationState_Union `path:"origin-validation-state" module:"nokia-conf"`
	Preference            NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Preference_Union            `path:"preference" module:"nokia-conf"`
	ResolveStatic         *bool                                                                                      `path:"resolve-static" module:"nokia-conf"`
	RouteTableInstall     *bool                                                                                      `path:"route-table-install" module:"nokia-conf"`
	SourceClass           *uint32                                                                                    `path:"source-class" module:"nokia-conf"`
	SrLabelIndex          *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex               `path:"sr-label-index" module:"nokia-conf"`
	SrMaintenancePolicy   *string                                                                                    `path:"sr-maintenance-policy" module:"nokia-conf"`
	StickyEcmp            *bool                                                                                      `path:"sticky-ecmp" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Tag_Union                   `path:"tag" module:"nokia-conf"`
	Type                  NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Type_Union                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateAigpMetric retrieves the value of the AigpMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateAigpMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric {
	if t.AigpMetric != nil {
		return t.AigpMetric
	}
	t.AigpMetric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric{}
	return t.AigpMetric
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath{}
	return t.AsPath
}

// GetOrCreateAsPathPrepend retrieves the value of the AsPathPrepend field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateAsPathPrepend() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend {
	if t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	t.AsPathPrepend = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend{}
	return t.AsPathPrepend
}

// GetOrCreateBgpMed retrieves the value of the BgpMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateBgpMed() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed {
	if t.BgpMed != nil {
		return t.BgpMed
	}
	t.BgpMed = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed{}
	return t.BgpMed
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community{}
	return t.Community
}

// GetOrCreateForwardingClass retrieves the value of the ForwardingClass field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateForwardingClass() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass {
	if t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	t.ForwardingClass = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass{}
	return t.ForwardingClass
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric{}
	return t.Metric
}

// GetOrCreateMulticastRedirection retrieves the value of the MulticastRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateMulticastRedirection() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection {
	if t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	t.MulticastRedirection = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection{}
	return t.MulticastRedirection
}

// GetOrCreateSrLabelIndex retrieves the value of the SrLabelIndex field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrCreateSrLabelIndex() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex {
	if t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	t.SrLabelIndex = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex{}
	return t.SrLabelIndex
}

// GetAigpMetric returns the value of the AigpMetric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field AigpMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetAigpMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric {
	if t != nil && t.AigpMetric != nil {
		return t.AigpMetric
	}
	return nil
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetAsPathPrepend returns the value of the AsPathPrepend struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field AsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetAsPathPrepend() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend {
	if t != nil && t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	return nil
}

// GetBgpMed returns the value of the BgpMed struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field BgpMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetBgpMed() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed {
	if t != nil && t.BgpMed != nil {
		return t.BgpMed
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetBgpTunnelMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetForwardingClass returns the value of the ForwardingClass struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field ForwardingClass is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetForwardingClass() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass {
	if t != nil && t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetMulticastRedirection returns the value of the MulticastRedirection struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field MulticastRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetMulticastRedirection() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection {
	if t != nil && t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	return nil
}

// GetSrLabelIndex returns the value of the SrLabelIndex struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action. If the receiver or the field SrLabelIndex is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetSrLabelIndex() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex {
	if t != nil && t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	return nil
}

// GetActionType retrieves the value of the leaf ActionType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionType is set, it can
// safely use t.GetActionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetActionType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ActionType {
	if t == nil || t.ActionType == 0 {
		return 0
	}
	return t.ActionType
}

// GetAddPathsSendLimit retrieves the value of the leaf AddPathsSendLimit from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddPathsSendLimit is set, it can
// safely use t.GetAddPathsSendLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddPathsSendLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetAddPathsSendLimit() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AddPathsSendLimit_Union {
	if t == nil || t.AddPathsSendLimit == nil {
		return nil
	}
	return t.AddPathsSendLimit
}

// GetAdminTagPolicy retrieves the value of the leaf AdminTagPolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTagPolicy is set, it can
// safely use t.GetAdminTagPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTagPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetAdminTagPolicy() string {
	if t == nil || t.AdminTagPolicy == nil {
		return ""
	}
	return *t.AdminTagPolicy
}

// GetAdvertiseLabel retrieves the value of the leaf AdvertiseLabel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLabel is set, it can
// safely use t.GetAdvertiseLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetAdvertiseLabel() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AdvertiseLabel {
	if t == nil || t.AdvertiseLabel == 0 {
		return 0
	}
	return t.AdvertiseLabel
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpHighPriority retrieves the value of the leaf BgpHighPriority from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpHighPriority is set, it can
// safely use t.GetBgpHighPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpHighPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetBgpHighPriority() bool {
	if t == nil || t.BgpHighPriority == nil {
		return false
	}
	return *t.BgpHighPriority
}

// GetBgpLeak retrieves the value of the leaf BgpLeak from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLeak is set, it can
// safely use t.GetBgpLeak() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLeak == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetBgpLeak() bool {
	if t == nil || t.BgpLeak == nil {
		return false
	}
	return *t.BgpLeak
}

// GetCreateMplsTunnel retrieves the value of the leaf CreateMplsTunnel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateMplsTunnel is set, it can
// safely use t.GetCreateMplsTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateMplsTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetCreateMplsTunnel() bool {
	if t == nil || t.CreateMplsTunnel == nil {
		return false
	}
	return *t.CreateMplsTunnel
}

// GetCreateUdpTunnel retrieves the value of the leaf CreateUdpTunnel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateUdpTunnel is set, it can
// safely use t.GetCreateUdpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateUdpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetCreateUdpTunnel() bool {
	if t == nil || t.CreateUdpTunnel == nil {
		return false
	}
	return *t.CreateUdpTunnel
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetDamping() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Damping_Union {
	if t == nil || t.Damping == nil {
		return nil
	}
	return t.Damping
}

// GetDestClass retrieves the value of the leaf DestClass from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestClass is set, it can
// safely use t.GetDestClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetDestClass() uint32 {
	if t == nil || t.DestClass == nil {
		return 0
	}
	return *t.DestClass
}

// GetEgressStatistics retrieves the value of the leaf EgressStatistics from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressStatistics is set, it can
// safely use t.GetEgressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetEgressStatistics() bool {
	if t == nil || t.EgressStatistics == nil {
		return false
	}
	return *t.EgressStatistics
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetFlexAlgo() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_FlexAlgo_Union {
	if t == nil || t.FlexAlgo == nil {
		return nil
	}
	return t.FlexAlgo
}

// GetIngressStatistics retrieves the value of the leaf IngressStatistics from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStatistics is set, it can
// safely use t.GetIngressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetIngressStatistics() bool {
	if t == nil || t.IngressStatistics == nil {
		return false
	}
	return *t.IngressStatistics
}

// GetInstallBackupPath retrieves the value of the leaf InstallBackupPath from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallBackupPath is set, it can
// safely use t.GetInstallBackupPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallBackupPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetInstallBackupPath() bool {
	if t == nil || t.InstallBackupPath == nil {
		return false
	}
	return *t.InstallBackupPath
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetLocalPreference() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_LocalPreference_Union {
	if t == nil || t.LocalPreference == nil {
		return nil
	}
	return t.LocalPreference
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetNextHop() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOrigin() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetOriginValidationState() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_OriginValidationState_Union {
	if t == nil || t.OriginValidationState == nil {
		return nil
	}
	return t.OriginValidationState
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetPreference() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Preference_Union {
	if t == nil || t.Preference == nil {
		return nil
	}
	return t.Preference
}

// GetResolveStatic retrieves the value of the leaf ResolveStatic from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveStatic is set, it can
// safely use t.GetResolveStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetResolveStatic() bool {
	if t == nil || t.ResolveStatic == nil {
		return false
	}
	return *t.ResolveStatic
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetSrMaintenancePolicy retrieves the value of the leaf SrMaintenancePolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrMaintenancePolicy is set, it can
// safely use t.GetSrMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrMaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetSrMaintenancePolicy() string {
	if t == nil || t.SrMaintenancePolicy == nil {
		return ""
	}
	return *t.SrMaintenancePolicy
}

// GetStickyEcmp retrieves the value of the leaf StickyEcmp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyEcmp is set, it can
// safely use t.GetStickyEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetStickyEcmp() bool {
	if t == nil || t.StickyEcmp == nil {
		return false
	}
	return *t.StickyEcmp
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetTag() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) GetType() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpHighPriority == nil {
		var v bool = false
		t.BgpHighPriority = &v
	}
	if t.BgpLeak == nil {
		var v bool = false
		t.BgpLeak = &v
	}
	if t.CreateMplsTunnel == nil {
		var v bool = false
		t.CreateMplsTunnel = &v
	}
	if t.CreateUdpTunnel == nil {
		var v bool = false
		t.CreateUdpTunnel = &v
	}
	if t.EgressStatistics == nil {
		var v bool = false
		t.EgressStatistics = &v
	}
	if t.IngressStatistics == nil {
		var v bool = false
		t.IngressStatistics = &v
	}
	if t.InstallBackupPath == nil {
		var v bool = false
		t.InstallBackupPath = &v
	}
	if t.ResolveStatic == nil {
		var v bool = false
		t.ResolveStatic = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.StickyEcmp == nil {
		var v bool = false
		t.StickyEcmp = &v
	}
	t.AigpMetric.PopulateDefaults()
	t.AsPath.PopulateDefaults()
	t.AsPathPrepend.PopulateDefaults()
	t.BgpMed.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.ForwardingClass.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.MulticastRedirection.PopulateDefaults()
	t.SrLabelIndex.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/aigp-metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric struct {
	Add NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Add_Union `path:"add" module:"nokia-conf"`
	Set NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) GetAdd() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AigpMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/as-path YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath struct {
	Add     *string `path:"add" module:"nokia-conf"`
	Replace *string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/as-path-prepend YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend struct {
	AsPath NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_AsPath_Union `path:"as-path" module:"nokia-conf"`
	Repeat NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) IsYANGGoStruct() {
}

// GetAsPath retrieves the value of the leaf AsPath from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPath is set, it can
// safely use t.GetAsPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) GetAsPath() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_AsPath_Union {
	if t == nil || t.AsPath == nil {
		return nil
	}
	return t.AsPath
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) GetRepeat() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionInt32(1)
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionInt32(1)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_AsPathPrepend) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/bgp-med YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed struct {
	Adjust *string                                                                         `path:"adjust" module:"nokia-conf"`
	Set    NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) IsYANGGoStruct() {}

// GetAdjust retrieves the value of the leaf Adjust from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjust is set, it can
// safely use t.GetAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) GetAdjust() string {
	if t == nil || t.Adjust == nil {
		return ""
	}
	return *t.Adjust
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric struct {
	PreferAigp *bool                                                                                      `path:"prefer-aigp" module:"nokia-conf"`
	Value      NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) IsYANGGoStruct() {
}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/community YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community struct {
	Add                []string `path:"add" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Remove             []string `path:"remove" module:"nokia-conf"`
	Replace            []string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) GetAdd() []string {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRemove retrieves the value of the leaf Remove from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) GetRemove() []string {
	if t == nil || t.Remove == nil {
		return nil
	}
	return t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) GetReplace() []string {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/forwarding-class YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass struct {
	Fc       E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Fc       `path:"fc" module:"nokia-conf"`
	Priority E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) GetFc() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Fc {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) GetPriority() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_ForwardingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric struct {
	Add      NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric_Add_Union      `path:"add" module:"nokia-conf"`
	Set      NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric_Set_Union      `path:"set" module:"nokia-conf"`
	Subtract NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric_Subtract_Union `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) GetAdd() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) GetSubtract() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric_Subtract_Union {
	if t == nil || t.Subtract == nil {
		return nil
	}
	return t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/multicast-redirection YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection struct {
	FwdService *string `path:"fwd-service" module:"nokia-conf"`
	IpIntName  *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) IsYANGGoStruct() {
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return "Base"
	}
	return *t.FwdService
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FwdService == nil {
		var v string = "Base"
		t.FwdService = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_MulticastRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex represents the /nokia-conf/configure/policy-options/policy-statement/entry/action/sr-label-index YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex struct {
	PreferIgp *bool                                                                                   `path:"prefer-igp" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) IsYANGGoStruct() {
}

// GetPreferIgp retrieves the value of the leaf PreferIgp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferIgp is set, it can
// safely use t.GetPreferIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) GetPreferIgp() bool {
	if t == nil || t.PreferIgp == nil {
		return false
	}
	return *t.PreferIgp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferIgp == nil {
		var v bool = false
		t.PreferIgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_Action_SrLabelIndex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression represents the /nokia-conf/configure/policy-options/policy-statement/entry/conditional-expression YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteExists        *string  `path:"route-exists" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteExists retrieves the value of the leaf RouteExists from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteExists is set, it can
// safely use t.GetRouteExists() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteExists == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) GetRouteExists() string {
	if t == nil || t.RouteExists == nil {
		return ""
	}
	return *t.RouteExists
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_ConditionalExpression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From represents the /nokia-conf/configure/policy-options/policy-statement/entry/from YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From struct {
	AggregateContributor  *bool                                                                                `path:"aggregate-contributor" module:"nokia-conf"`
	ApplyGroups           []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Area                  *string                                                                              `path:"area" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath                 `path:"as-path" module:"nokia-conf"`
	ClusterId             *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId              `path:"cluster-id" module:"nokia-conf"`
	Color                 *int64                                                                               `path:"color" module:"nokia-conf"`
	Community             *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community              `path:"community" module:"nokia-conf"`
	Distinguisher         *int64                                                                               `path:"distinguisher" module:"nokia-conf"`
	Endpoint              *string                                                                              `path:"endpoint" module:"nokia-conf"`
	EvpnType              E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_EvpnType              `path:"evpn-type" module:"nokia-conf"`
	External              *bool                                                                                `path:"external" module:"nokia-conf"`
	Family                []E_NokiaTypesBgp_IpFamilyIdentifier                                                 `path:"family" module:"nokia-conf"`
	Flowspec              *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec               `path:"flowspec" module:"nokia-conf"`
	GroupAddress          *string                                                                              `path:"group-address" module:"nokia-conf"`
	HostIp                *string                                                                              `path:"host-ip" module:"nokia-conf"`
	Interface             []string                                                                             `path:"interface" module:"nokia-conf"`
	InterfaceSubnets      *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets       `path:"interface-subnets" module:"nokia-conf"`
	Level                 *int32                                                                               `path:"level" module:"nokia-conf"`
	LocalPreference       *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference        `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric                 `path:"metric" module:"nokia-conf"`
	MvpnType              E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_MvpnType              `path:"mvpn-type" module:"nokia-conf"`
	Neighbor              *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor               `path:"neighbor" module:"nokia-conf"`
	NextHop               *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop                `path:"next-hop" module:"nokia-conf"`
	Origin                E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Origin                `path:"origin" module:"nokia-conf"`
	OriginValidationState E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_OriginValidationState `path:"origin-validation-state" module:"nokia-conf"`
	OspfType              *int32                                                                               `path:"ospf-type" module:"nokia-conf"`
	PathType              E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PathType              `path:"path-type" module:"nokia-conf"`
	Policy                *string                                                                              `path:"policy" module:"nokia-conf"`
	PolicyVariables       *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables        `path:"policy-variables" module:"nokia-conf"`
	PrefixList            []string                                                                             `path:"prefix-list" module:"nokia-conf"`
	Protocol              *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol               `path:"protocol" module:"nokia-conf"`
	SourceAddress         *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress          `path:"source-address" module:"nokia-conf"`
	State                 E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_State                 `path:"state" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Tag_Union               `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) IsYANGGoStruct() {}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath{}
	return t.AsPath
}

// GetOrCreateClusterId retrieves the value of the ClusterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateClusterId() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId {
	if t.ClusterId != nil {
		return t.ClusterId
	}
	t.ClusterId = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId{}
	return t.ClusterId
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community{}
	return t.Community
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateFlowspec() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec{}
	return t.Flowspec
}

// GetOrCreateInterfaceSubnets retrieves the value of the InterfaceSubnets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateInterfaceSubnets() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets {
	if t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	t.InterfaceSubnets = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets{}
	return t.InterfaceSubnets
}

// GetOrCreateLocalPreference retrieves the value of the LocalPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateLocalPreference() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference {
	if t.LocalPreference != nil {
		return t.LocalPreference
	}
	t.LocalPreference = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference{}
	return t.LocalPreference
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric{}
	return t.Metric
}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor{}
	return t.Neighbor
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateNextHop() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop{}
	return t.NextHop
}

// GetOrCreatePolicyVariables retrieves the value of the PolicyVariables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreatePolicyVariables() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables {
	if t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	t.PolicyVariables = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables{}
	return t.PolicyVariables
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol{}
	return t.Protocol
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrCreateSourceAddress() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress{}
	return t.SourceAddress
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetClusterId returns the value of the ClusterId struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field ClusterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetClusterId() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId {
	if t != nil && t.ClusterId != nil {
		return t.ClusterId
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetFlowspec() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetInterfaceSubnets returns the value of the InterfaceSubnets struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field InterfaceSubnets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetInterfaceSubnets() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets {
	if t != nil && t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	return nil
}

// GetLocalPreference returns the value of the LocalPreference struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field LocalPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetLocalPreference() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference {
	if t != nil && t.LocalPreference != nil {
		return t.LocalPreference
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetNextHop() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetPolicyVariables returns the value of the PolicyVariables struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field PolicyVariables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetPolicyVariables() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables {
	if t != nil && t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetSourceAddress() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetAggregateContributor retrieves the value of the leaf AggregateContributor from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateContributor is set, it can
// safely use t.GetAggregateContributor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateContributor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetAggregateContributor() bool {
	if t == nil || t.AggregateContributor == nil {
		return false
	}
	return *t.AggregateContributor
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetArea retrieves the value of the leaf Area from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Area is set, it can
// safely use t.GetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Area == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetArea() string {
	if t == nil || t.Area == nil {
		return ""
	}
	return *t.Area
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetDistinguisher() int64 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEvpnType retrieves the value of the leaf EvpnType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnType is set, it can
// safely use t.GetEvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetEvpnType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_EvpnType {
	if t == nil || t.EvpnType == 0 {
		return 0
	}
	return t.EvpnType
}

// GetExternal retrieves the value of the leaf External from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if External is set, it can
// safely use t.GetExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.External == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetExternal() bool {
	if t == nil || t.External == nil {
		return false
	}
	return *t.External
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetFamily() []E_NokiaTypesBgp_IpFamilyIdentifier {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetHostIp retrieves the value of the leaf HostIp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostIp is set, it can
// safely use t.GetHostIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetHostIp() string {
	if t == nil || t.HostIp == nil {
		return ""
	}
	return *t.HostIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetInterface() []string {
	if t == nil || t.Interface == nil {
		return nil
	}
	return t.Interface
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMvpnType retrieves the value of the leaf MvpnType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnType is set, it can
// safely use t.GetMvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetMvpnType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_MvpnType {
	if t == nil || t.MvpnType == 0 {
		return 0
	}
	return t.MvpnType
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOrigin() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Origin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOriginValidationState() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_OriginValidationState {
	if t == nil || t.OriginValidationState == 0 {
		return 0
	}
	return t.OriginValidationState
}

// GetOspfType retrieves the value of the leaf OspfType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfType is set, it can
// safely use t.GetOspfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetOspfType() int32 {
	if t == nil || t.OspfType == nil {
		return 0
	}
	return *t.OspfType
}

// GetPathType retrieves the value of the leaf PathType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathType is set, it can
// safely use t.GetPathType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetPathType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PathType {
	if t == nil || t.PathType == 0 {
		return 0
	}
	return t.PathType
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// GetState retrieves the value of the leaf State from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if State is set, it can
// safely use t.GetState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.State == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetState() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_State {
	if t == nil || t.State == 0 {
		return 0
	}
	return t.State
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) GetTag() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AggregateContributor == nil {
		var v bool = false
		t.AggregateContributor = &v
	}
	if t.External == nil {
		var v bool = false
		t.External = &v
	}
	t.AsPath.PopulateDefaults()
	t.ClusterId.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.InterfaceSubnets.PopulateDefaults()
	t.LocalPreference.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.Neighbor.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.PolicyVariables.PopulateDefaults()
	t.Protocol.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/as-path YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath struct {
	Group  *string                                                                     `path:"group" module:"nokia-conf"`
	Length *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length `path:"length" module:"nokia-conf"`
	Name   *string                                                                     `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) IsYANGGoStruct() {}

// GetOrCreateLength retrieves the value of the Length field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetOrCreateLength() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length {
	if t.Length != nil {
		return t.Length
	}
	t.Length = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length{}
	return t.Length
}

// GetLength returns the value of the Length struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath. If the receiver or the field Length is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetLength() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length {
	if t != nil && t.Length != nil {
		return t.Length
	}
	return nil
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Length.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/as-path/length YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                     `path:"qualifier" module:"nokia-conf"`
	Unique    *bool                                                                                  `path:"unique" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) IsYANGGoStruct() {}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetUnique retrieves the value of the leaf Unique from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unique is set, it can
// safely use t.GetUnique() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unique == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) GetUnique() bool {
	if t == nil || t.Unique == nil {
		return false
	}
	return *t.Unique
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
	if t.Unique == nil {
		var v bool = false
		t.Unique = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_AsPath_Length) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/cluster-id YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId struct {
	IpAddress       []string `path:"ip-address" module:"nokia-conf"`
	NoneClusterList *bool    `path:"none-cluster-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) GetIpAddress() []string {
	if t == nil || t.IpAddress == nil {
		return nil
	}
	return t.IpAddress
}

// GetNoneClusterList retrieves the value of the leaf NoneClusterList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NoneClusterList is set, it can
// safely use t.GetNoneClusterList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NoneClusterList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) GetNoneClusterList() bool {
	if t == nil || t.NoneClusterList == nil {
		return false
	}
	return *t.NoneClusterList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NoneClusterList == nil {
		var v bool = false
		t.NoneClusterList = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_ClusterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/community YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community struct {
	Count      *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count `path:"count" module:"nokia-conf"`
	Expression *string                                                                       `path:"expression" module:"nokia-conf"`
	Name       *string                                                                       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) IsYANGGoStruct() {}

// GetOrCreateCount retrieves the value of the Count field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) GetOrCreateCount() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count {
	if t.Count != nil {
		return t.Count
	}
	t.Count = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count{}
	return t.Count
}

// GetCount returns the value of the Count struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community. If the receiver or the field Count is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) GetCount() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count {
	if t != nil && t.Count != nil {
		return t.Count
	}
	return nil
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Count.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/community/count YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                       `path:"qualifier" module:"nokia-conf"`
	Type      E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Type      `path:"type" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) GetType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Community_Count) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/flowspec YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec struct {
	Dest   *string `path:"dest" module:"nokia-conf"`
	Source *string `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) IsYANGGoStruct() {}

// GetDest retrieves the value of the leaf Dest from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dest is set, it can
// safely use t.GetDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) GetDest() string {
	if t == nil || t.Dest == nil {
		return ""
	}
	return *t.Dest
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/interface-subnets YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets struct {
	IpIntName []string `path:"ip-int-name" module:"nokia-conf"`
	Service   *string  `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) IsYANGGoStruct() {
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) GetIpIntName() []string {
	if t == nil || t.IpIntName == nil {
		return nil
	}
	return t.IpIntName
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) GetService() string {
	if t == nil || t.Service == nil {
		return "Base"
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Service == nil {
		var v string = "Base"
		t.Service = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_InterfaceSubnets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/local-preference YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                       `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_LocalPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                              `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) IsYANGGoStruct() {}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/neighbor YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/next-hop YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/policy-variables YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables struct {
	Name map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) IsYANGGoStruct() {
}

// NewName creates a new entry in the Name list of the
// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) NewName(VariableName string) (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name)
	}

	key := VariableName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name{
		VariableName: &VariableName,
	}

	return t.Name[key], nil
}

// RenameName renames an entry in the list Name within
// the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) RenameName(oldK, newK string) error {
	if _, ok := t.Name[newK]; ok {
		return fmt.Errorf("key %v already exists in Name", newK)
	}

	e, ok := t.Name[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Name", oldK)
	}
	e.VariableName = &newK

	t.Name[newK] = e
	delete(t.Name, oldK)
	return nil
}

// GetOrCreateName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) GetOrCreateName(VariableName string) *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name {

	key := VariableName

	if v, ok := t.Name[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewName(VariableName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateName got unexpected error: %v", err))
	}
	return v
}

// GetName retrieves the value with the specified key from
// the Name map field of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) GetName(VariableName string) *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name {

	if t == nil {
		return nil
	}

	key := VariableName

	if lm, ok := t.Name[key]; ok {
		return lm
	}
	return nil
}

// DeleteName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) DeleteName(VariableName string) {
	key := VariableName

	delete(t.Name, key)
}

// AppendName appends the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name struct to the
// list Name of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) AppendName(v *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) error {
	if v.VariableName == nil {
		return fmt.Errorf("invalid nil key received for VariableName")
	}

	key := *v.VariableName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name)
	}

	if _, ok := t.Name[key]; ok {
		return fmt.Errorf("duplicate key for list Name %v", key)
	}

	t.Name[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Name {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/policy-variables/name YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Decimal            *float64 `path:"decimal" module:"nokia-conf"`
	Number             *uint64  `path:"number" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
	VariableName       *string  `path:"variable-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDecimal retrieves the value of the leaf Decimal from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Decimal is set, it can
// safely use t.GetDecimal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Decimal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetDecimal() float64 {
	if t == nil || t.Decimal == nil {
		return 0.0
	}
	return *t.Decimal
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetNumber() uint64 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// GetVariableName retrieves the value of the leaf VariableName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableName is set, it can
// safely use t.GetVariableName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) GetVariableName() string {
	if t == nil || t.VariableName == nil {
		return ""
	}
	return *t.VariableName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VariableName == nil {
		return nil, fmt.Errorf("nil value for key VariableName")
	}

	return map[string]interface{}{
		"variable-name": *t.VariableName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_PolicyVariables_Name) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/protocol YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol struct {
	Instance NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) IsYANGGoStruct() {}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) GetInstance() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) GetName() []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress represents the /nokia-conf/configure/policy-options/policy-statement/entry/from/source-address YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_From_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To represents the /nokia-conf/configure/policy-options/policy-statement/entry/to YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *int32                                                               `path:"level" module:"nokia-conf"`
	Neighbor           *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor `path:"neighbor" module:"nokia-conf"`
	PrefixList         []string                                                             `path:"prefix-list" module:"nokia-conf"`
	Protocol           *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) IsYANGGoStruct() {}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetOrCreateNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor{}
	return t.Neighbor
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetOrCreateProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol{}
	return t.Protocol
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Neighbor.PopulateDefaults()
	t.Protocol.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor represents the /nokia-conf/configure/policy-options/policy-statement/entry/to/neighbor YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol represents the /nokia-conf/configure/policy-options/policy-statement/entry/to/protocol YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol struct {
	Instance NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) IsYANGGoStruct() {}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) GetInstance() NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) GetName() []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_Entry_To_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry represents the /nokia-conf/configure/policy-options/policy-statement/named-entry YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry struct {
	Action                *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action                `path:"action" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups           []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ConditionalExpression *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression `path:"conditional-expression" module:"nokia-conf" yangPresence:"true"`
	Description           *string                                                                             `path:"description" module:"nokia-conf"`
	EntryName             *string                                                                             `path:"entry-name" module:"nokia-conf"`
	From                  *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From                  `path:"from" module:"nokia-conf" yangPresence:"true"`
	To                    *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To                    `path:"to" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateAction() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action{}
	return t.Action
}

// GetOrCreateConditionalExpression retrieves the value of the ConditionalExpression field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateConditionalExpression() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression {
	if t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	t.ConditionalExpression = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression{}
	return t.ConditionalExpression
}

// GetOrCreateFrom retrieves the value of the From field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateFrom() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From {
	if t.From != nil {
		return t.From
	}
	t.From = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From{}
	return t.From
}

// GetOrCreateTo retrieves the value of the To field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetOrCreateTo() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To {
	if t.To != nil {
		return t.To
	}
	t.To = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To{}
	return t.To
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetAction() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetConditionalExpression returns the value of the ConditionalExpression struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field ConditionalExpression is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetConditionalExpression() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression {
	if t != nil && t.ConditionalExpression != nil {
		return t.ConditionalExpression
	}
	return nil
}

// GetFrom returns the value of the From struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field From is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetFrom() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From {
	if t != nil && t.From != nil {
		return t.From
	}
	return nil
}

// GetTo returns the value of the To struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry. If the receiver or the field To is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetTo() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To {
	if t != nil && t.To != nil {
		return t.To
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryName retrieves the value of the leaf EntryName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryName is set, it can
// safely use t.GetEntryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) GetEntryName() string {
	if t == nil || t.EntryName == nil {
		return ""
	}
	return *t.EntryName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.ConditionalExpression.PopulateDefaults()
	t.From.PopulateDefaults()
	t.To.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryName == nil {
		return nil, fmt.Errorf("nil value for key EntryName")
	}

	return map[string]interface{}{
		"entry-name": *t.EntryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action struct {
	ActionType            E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ActionType                `path:"action-type" module:"nokia-conf"`
	AddPathsSendLimit     NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AddPathsSendLimit_Union     `path:"add-paths-send-limit" module:"nokia-conf"`
	AdminTagPolicy        *string                                                                                         `path:"admin-tag-policy" module:"nokia-conf"`
	AdvertiseLabel        E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AdvertiseLabel            `path:"advertise-label" module:"nokia-conf"`
	AigpMetric            *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric                 `path:"aigp-metric" module:"nokia-conf"`
	ApplyGroups           []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath                     `path:"as-path" module:"nokia-conf"`
	AsPathPrepend         *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend              `path:"as-path-prepend" module:"nokia-conf"`
	BgpHighPriority       *bool                                                                                           `path:"bgp-high-priority" module:"nokia-conf"`
	BgpLeak               *bool                                                                                           `path:"bgp-leak" module:"nokia-conf"`
	BgpMed                *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed                     `path:"bgp-med" module:"nokia-conf"`
	BgpTunnelMetric       *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric            `path:"bgp-tunnel-metric" module:"nokia-conf"`
	Community             *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community                  `path:"community" module:"nokia-conf"`
	CreateMplsTunnel      *bool                                                                                           `path:"create-mpls-tunnel" module:"nokia-conf"`
	CreateUdpTunnel       *bool                                                                                           `path:"create-udp-tunnel" module:"nokia-conf"`
	Damping               NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Damping_Union               `path:"damping" module:"nokia-conf"`
	DestClass             *uint32                                                                                         `path:"dest-class" module:"nokia-conf"`
	EgressStatistics      *bool                                                                                           `path:"egress-statistics" module:"nokia-conf"`
	FlexAlgo              NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_FlexAlgo_Union              `path:"flex-algo" module:"nokia-conf"`
	ForwardingClass       *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass            `path:"forwarding-class" module:"nokia-conf"`
	IngressStatistics     *bool                                                                                           `path:"ingress-statistics" module:"nokia-conf"`
	InstallBackupPath     *bool                                                                                           `path:"install-backup-path" module:"nokia-conf"`
	LocalPreference       NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_LocalPreference_Union       `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric                     `path:"metric" module:"nokia-conf"`
	MulticastRedirection  *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection       `path:"multicast-redirection" module:"nokia-conf"`
	NatPolicy             *string                                                                                         `path:"nat-policy" module:"nokia-conf"`
	NextHop               NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_NextHop_Union               `path:"next-hop" module:"nokia-conf"`
	Origin                NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Origin_Union                `path:"origin" module:"nokia-conf"`
	OriginValidationState NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_OriginValidationState_Union `path:"origin-validation-state" module:"nokia-conf"`
	Preference            NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Preference_Union            `path:"preference" module:"nokia-conf"`
	ResolveStatic         *bool                                                                                           `path:"resolve-static" module:"nokia-conf"`
	RouteTableInstall     *bool                                                                                           `path:"route-table-install" module:"nokia-conf"`
	SourceClass           *uint32                                                                                         `path:"source-class" module:"nokia-conf"`
	SrLabelIndex          *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex               `path:"sr-label-index" module:"nokia-conf"`
	SrMaintenancePolicy   *string                                                                                         `path:"sr-maintenance-policy" module:"nokia-conf"`
	StickyEcmp            *bool                                                                                           `path:"sticky-ecmp" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Tag_Union                   `path:"tag" module:"nokia-conf"`
	Type                  NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Type_Union                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) IsYANGGoStruct() {}

// GetOrCreateAigpMetric retrieves the value of the AigpMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateAigpMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric {
	if t.AigpMetric != nil {
		return t.AigpMetric
	}
	t.AigpMetric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric{}
	return t.AigpMetric
}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath{}
	return t.AsPath
}

// GetOrCreateAsPathPrepend retrieves the value of the AsPathPrepend field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateAsPathPrepend() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend {
	if t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	t.AsPathPrepend = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend{}
	return t.AsPathPrepend
}

// GetOrCreateBgpMed retrieves the value of the BgpMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateBgpMed() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed {
	if t.BgpMed != nil {
		return t.BgpMed
	}
	t.BgpMed = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed{}
	return t.BgpMed
}

// GetOrCreateBgpTunnelMetric retrieves the value of the BgpTunnelMetric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateBgpTunnelMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric {
	if t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	t.BgpTunnelMetric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric{}
	return t.BgpTunnelMetric
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community{}
	return t.Community
}

// GetOrCreateForwardingClass retrieves the value of the ForwardingClass field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateForwardingClass() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass {
	if t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	t.ForwardingClass = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass{}
	return t.ForwardingClass
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric{}
	return t.Metric
}

// GetOrCreateMulticastRedirection retrieves the value of the MulticastRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateMulticastRedirection() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection {
	if t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	t.MulticastRedirection = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection{}
	return t.MulticastRedirection
}

// GetOrCreateSrLabelIndex retrieves the value of the SrLabelIndex field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrCreateSrLabelIndex() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex {
	if t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	t.SrLabelIndex = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex{}
	return t.SrLabelIndex
}

// GetAigpMetric returns the value of the AigpMetric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field AigpMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAigpMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric {
	if t != nil && t.AigpMetric != nil {
		return t.AigpMetric
	}
	return nil
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetAsPathPrepend returns the value of the AsPathPrepend struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field AsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAsPathPrepend() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend {
	if t != nil && t.AsPathPrepend != nil {
		return t.AsPathPrepend
	}
	return nil
}

// GetBgpMed returns the value of the BgpMed struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field BgpMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpMed() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed {
	if t != nil && t.BgpMed != nil {
		return t.BgpMed
	}
	return nil
}

// GetBgpTunnelMetric returns the value of the BgpTunnelMetric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field BgpTunnelMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpTunnelMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric {
	if t != nil && t.BgpTunnelMetric != nil {
		return t.BgpTunnelMetric
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetForwardingClass returns the value of the ForwardingClass struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field ForwardingClass is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetForwardingClass() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass {
	if t != nil && t.ForwardingClass != nil {
		return t.ForwardingClass
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetMulticastRedirection returns the value of the MulticastRedirection struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field MulticastRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetMulticastRedirection() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection {
	if t != nil && t.MulticastRedirection != nil {
		return t.MulticastRedirection
	}
	return nil
}

// GetSrLabelIndex returns the value of the SrLabelIndex struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action. If the receiver or the field SrLabelIndex is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetSrLabelIndex() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex {
	if t != nil && t.SrLabelIndex != nil {
		return t.SrLabelIndex
	}
	return nil
}

// GetActionType retrieves the value of the leaf ActionType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionType is set, it can
// safely use t.GetActionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetActionType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ActionType {
	if t == nil || t.ActionType == 0 {
		return 0
	}
	return t.ActionType
}

// GetAddPathsSendLimit retrieves the value of the leaf AddPathsSendLimit from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddPathsSendLimit is set, it can
// safely use t.GetAddPathsSendLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddPathsSendLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAddPathsSendLimit() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AddPathsSendLimit_Union {
	if t == nil || t.AddPathsSendLimit == nil {
		return nil
	}
	return t.AddPathsSendLimit
}

// GetAdminTagPolicy retrieves the value of the leaf AdminTagPolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminTagPolicy is set, it can
// safely use t.GetAdminTagPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminTagPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAdminTagPolicy() string {
	if t == nil || t.AdminTagPolicy == nil {
		return ""
	}
	return *t.AdminTagPolicy
}

// GetAdvertiseLabel retrieves the value of the leaf AdvertiseLabel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLabel is set, it can
// safely use t.GetAdvertiseLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetAdvertiseLabel() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AdvertiseLabel {
	if t == nil || t.AdvertiseLabel == 0 {
		return 0
	}
	return t.AdvertiseLabel
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpHighPriority retrieves the value of the leaf BgpHighPriority from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpHighPriority is set, it can
// safely use t.GetBgpHighPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpHighPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpHighPriority() bool {
	if t == nil || t.BgpHighPriority == nil {
		return false
	}
	return *t.BgpHighPriority
}

// GetBgpLeak retrieves the value of the leaf BgpLeak from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLeak is set, it can
// safely use t.GetBgpLeak() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLeak == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetBgpLeak() bool {
	if t == nil || t.BgpLeak == nil {
		return false
	}
	return *t.BgpLeak
}

// GetCreateMplsTunnel retrieves the value of the leaf CreateMplsTunnel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateMplsTunnel is set, it can
// safely use t.GetCreateMplsTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateMplsTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetCreateMplsTunnel() bool {
	if t == nil || t.CreateMplsTunnel == nil {
		return false
	}
	return *t.CreateMplsTunnel
}

// GetCreateUdpTunnel retrieves the value of the leaf CreateUdpTunnel from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateUdpTunnel is set, it can
// safely use t.GetCreateUdpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateUdpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetCreateUdpTunnel() bool {
	if t == nil || t.CreateUdpTunnel == nil {
		return false
	}
	return *t.CreateUdpTunnel
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetDamping() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Damping_Union {
	if t == nil || t.Damping == nil {
		return nil
	}
	return t.Damping
}

// GetDestClass retrieves the value of the leaf DestClass from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestClass is set, it can
// safely use t.GetDestClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetDestClass() uint32 {
	if t == nil || t.DestClass == nil {
		return 0
	}
	return *t.DestClass
}

// GetEgressStatistics retrieves the value of the leaf EgressStatistics from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressStatistics is set, it can
// safely use t.GetEgressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetEgressStatistics() bool {
	if t == nil || t.EgressStatistics == nil {
		return false
	}
	return *t.EgressStatistics
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetFlexAlgo() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_FlexAlgo_Union {
	if t == nil || t.FlexAlgo == nil {
		return nil
	}
	return t.FlexAlgo
}

// GetIngressStatistics retrieves the value of the leaf IngressStatistics from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStatistics is set, it can
// safely use t.GetIngressStatistics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStatistics == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetIngressStatistics() bool {
	if t == nil || t.IngressStatistics == nil {
		return false
	}
	return *t.IngressStatistics
}

// GetInstallBackupPath retrieves the value of the leaf InstallBackupPath from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallBackupPath is set, it can
// safely use t.GetInstallBackupPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallBackupPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetInstallBackupPath() bool {
	if t == nil || t.InstallBackupPath == nil {
		return false
	}
	return *t.InstallBackupPath
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetLocalPreference() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_LocalPreference_Union {
	if t == nil || t.LocalPreference == nil {
		return nil
	}
	return t.LocalPreference
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetNextHop() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOrigin() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetOriginValidationState() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_OriginValidationState_Union {
	if t == nil || t.OriginValidationState == nil {
		return nil
	}
	return t.OriginValidationState
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetPreference() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Preference_Union {
	if t == nil || t.Preference == nil {
		return nil
	}
	return t.Preference
}

// GetResolveStatic retrieves the value of the leaf ResolveStatic from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveStatic is set, it can
// safely use t.GetResolveStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetResolveStatic() bool {
	if t == nil || t.ResolveStatic == nil {
		return false
	}
	return *t.ResolveStatic
}

// GetRouteTableInstall retrieves the value of the leaf RouteTableInstall from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTableInstall is set, it can
// safely use t.GetRouteTableInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTableInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetRouteTableInstall() bool {
	if t == nil || t.RouteTableInstall == nil {
		return true
	}
	return *t.RouteTableInstall
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetSrMaintenancePolicy retrieves the value of the leaf SrMaintenancePolicy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrMaintenancePolicy is set, it can
// safely use t.GetSrMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrMaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetSrMaintenancePolicy() string {
	if t == nil || t.SrMaintenancePolicy == nil {
		return ""
	}
	return *t.SrMaintenancePolicy
}

// GetStickyEcmp retrieves the value of the leaf StickyEcmp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StickyEcmp is set, it can
// safely use t.GetStickyEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StickyEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetStickyEcmp() bool {
	if t == nil || t.StickyEcmp == nil {
		return false
	}
	return *t.StickyEcmp
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetTag() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) GetType() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpHighPriority == nil {
		var v bool = false
		t.BgpHighPriority = &v
	}
	if t.BgpLeak == nil {
		var v bool = false
		t.BgpLeak = &v
	}
	if t.CreateMplsTunnel == nil {
		var v bool = false
		t.CreateMplsTunnel = &v
	}
	if t.CreateUdpTunnel == nil {
		var v bool = false
		t.CreateUdpTunnel = &v
	}
	if t.EgressStatistics == nil {
		var v bool = false
		t.EgressStatistics = &v
	}
	if t.IngressStatistics == nil {
		var v bool = false
		t.IngressStatistics = &v
	}
	if t.InstallBackupPath == nil {
		var v bool = false
		t.InstallBackupPath = &v
	}
	if t.ResolveStatic == nil {
		var v bool = false
		t.ResolveStatic = &v
	}
	if t.RouteTableInstall == nil {
		var v bool = true
		t.RouteTableInstall = &v
	}
	if t.StickyEcmp == nil {
		var v bool = false
		t.StickyEcmp = &v
	}
	t.AigpMetric.PopulateDefaults()
	t.AsPath.PopulateDefaults()
	t.AsPathPrepend.PopulateDefaults()
	t.BgpMed.PopulateDefaults()
	t.BgpTunnelMetric.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.ForwardingClass.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.MulticastRedirection.PopulateDefaults()
	t.SrLabelIndex.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/aigp-metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric struct {
	Add NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Add_Union `path:"add" module:"nokia-conf"`
	Set NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) GetAdd() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AigpMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/as-path YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath struct {
	Add     *string `path:"add" module:"nokia-conf"`
	Replace *string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) GetAdd() string {
	if t == nil || t.Add == nil {
		return ""
	}
	return *t.Add
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) GetReplace() string {
	if t == nil || t.Replace == nil {
		return ""
	}
	return *t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/as-path-prepend YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend struct {
	AsPath NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_AsPath_Union `path:"as-path" module:"nokia-conf"`
	Repeat NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) IsYANGGoStruct() {
}

// GetAsPath retrieves the value of the leaf AsPath from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPath is set, it can
// safely use t.GetAsPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) GetAsPath() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_AsPath_Union {
	if t == nil || t.AsPath == nil {
		return nil
	}
	return t.AsPath
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) GetRepeat() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionInt32(1)
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionInt32(1)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_AsPathPrepend) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/bgp-med YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed struct {
	Adjust *string                                                                              `path:"adjust" module:"nokia-conf"`
	Set    NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed_Set_Union `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) IsYANGGoStruct() {}

// GetAdjust retrieves the value of the leaf Adjust from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adjust is set, it can
// safely use t.GetAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) GetAdjust() string {
	if t == nil || t.Adjust == nil {
		return ""
	}
	return *t.Adjust
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/bgp-tunnel-metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric struct {
	PreferAigp *bool                                                                                           `path:"prefer-aigp" module:"nokia-conf"`
	Value      NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) IsYANGGoStruct() {
}

// GetPreferAigp retrieves the value of the leaf PreferAigp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferAigp is set, it can
// safely use t.GetPreferAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferAigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) GetPreferAigp() bool {
	if t == nil || t.PreferAigp == nil {
		return false
	}
	return *t.PreferAigp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferAigp == nil {
		var v bool = false
		t.PreferAigp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_BgpTunnelMetric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/community YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community struct {
	Add                []string `path:"add" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Remove             []string `path:"remove" module:"nokia-conf"`
	Replace            []string `path:"replace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) IsYANGGoStruct() {
}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetAdd() []string {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRemove retrieves the value of the leaf Remove from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remove is set, it can
// safely use t.GetRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetRemove() []string {
	if t == nil || t.Remove == nil {
		return nil
	}
	return t.Remove
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) GetReplace() []string {
	if t == nil || t.Replace == nil {
		return nil
	}
	return t.Replace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/forwarding-class YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass struct {
	Fc       E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Fc       `path:"fc" module:"nokia-conf"`
	Priority E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) GetFc() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Fc {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) GetPriority() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_ForwardingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric struct {
	Add      NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Add_Union      `path:"add" module:"nokia-conf"`
	Set      NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Set_Union      `path:"set" module:"nokia-conf"`
	Subtract NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Subtract_Union `path:"subtract" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) IsYANGGoStruct() {}

// GetAdd retrieves the value of the leaf Add from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Add is set, it can
// safely use t.GetAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Add == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) GetAdd() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Add_Union {
	if t == nil || t.Add == nil {
		return nil
	}
	return t.Add
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) GetSet() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Set_Union {
	if t == nil || t.Set == nil {
		return nil
	}
	return t.Set
}

// GetSubtract retrieves the value of the leaf Subtract from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtract is set, it can
// safely use t.GetSubtract() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtract == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) GetSubtract() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric_Subtract_Union {
	if t == nil || t.Subtract == nil {
		return nil
	}
	return t.Subtract
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/multicast-redirection YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection struct {
	FwdService *string `path:"fwd-service" module:"nokia-conf"`
	IpIntName  *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) IsYANGGoStruct() {
}

// GetFwdService retrieves the value of the leaf FwdService from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdService is set, it can
// safely use t.GetFwdService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) GetFwdService() string {
	if t == nil || t.FwdService == nil {
		return "Base"
	}
	return *t.FwdService
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FwdService == nil {
		var v string = "Base"
		t.FwdService = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_MulticastRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/action/sr-label-index YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex struct {
	PreferIgp *bool                                                                                        `path:"prefer-igp" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) IsYANGGoStruct() {
}

// GetPreferIgp retrieves the value of the leaf PreferIgp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferIgp is set, it can
// safely use t.GetPreferIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) GetPreferIgp() bool {
	if t == nil || t.PreferIgp == nil {
		return false
	}
	return *t.PreferIgp
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferIgp == nil {
		var v bool = false
		t.PreferIgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_Action_SrLabelIndex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/conditional-expression YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteExists        *string  `path:"route-exists" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteExists retrieves the value of the leaf RouteExists from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteExists is set, it can
// safely use t.GetRouteExists() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteExists == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) GetRouteExists() string {
	if t == nil || t.RouteExists == nil {
		return ""
	}
	return *t.RouteExists
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_ConditionalExpression) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From struct {
	AggregateContributor  *bool                                                                                     `path:"aggregate-contributor" module:"nokia-conf"`
	ApplyGroups           []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Area                  *string                                                                                   `path:"area" module:"nokia-conf"`
	AsPath                *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath                 `path:"as-path" module:"nokia-conf"`
	ClusterId             *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId              `path:"cluster-id" module:"nokia-conf"`
	Color                 *int64                                                                                    `path:"color" module:"nokia-conf"`
	Community             *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community              `path:"community" module:"nokia-conf"`
	Distinguisher         *int64                                                                                    `path:"distinguisher" module:"nokia-conf"`
	Endpoint              *string                                                                                   `path:"endpoint" module:"nokia-conf"`
	EvpnType              E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_EvpnType              `path:"evpn-type" module:"nokia-conf"`
	External              *bool                                                                                     `path:"external" module:"nokia-conf"`
	Family                []E_NokiaTypesBgp_IpFamilyIdentifier                                                      `path:"family" module:"nokia-conf"`
	Flowspec              *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec               `path:"flowspec" module:"nokia-conf"`
	GroupAddress          *string                                                                                   `path:"group-address" module:"nokia-conf"`
	HostIp                *string                                                                                   `path:"host-ip" module:"nokia-conf"`
	Interface             []string                                                                                  `path:"interface" module:"nokia-conf"`
	InterfaceSubnets      *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets       `path:"interface-subnets" module:"nokia-conf"`
	Level                 *int32                                                                                    `path:"level" module:"nokia-conf"`
	LocalPreference       *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference        `path:"local-preference" module:"nokia-conf"`
	Metric                *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric                 `path:"metric" module:"nokia-conf"`
	MvpnType              E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_MvpnType              `path:"mvpn-type" module:"nokia-conf"`
	Neighbor              *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor               `path:"neighbor" module:"nokia-conf"`
	NextHop               *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop                `path:"next-hop" module:"nokia-conf"`
	Origin                E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Origin                `path:"origin" module:"nokia-conf"`
	OriginValidationState E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_OriginValidationState `path:"origin-validation-state" module:"nokia-conf"`
	OspfType              *int32                                                                                    `path:"ospf-type" module:"nokia-conf"`
	PathType              E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PathType              `path:"path-type" module:"nokia-conf"`
	Policy                *string                                                                                   `path:"policy" module:"nokia-conf"`
	PolicyVariables       *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables        `path:"policy-variables" module:"nokia-conf"`
	PrefixList            []string                                                                                  `path:"prefix-list" module:"nokia-conf"`
	Protocol              *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol               `path:"protocol" module:"nokia-conf"`
	SourceAddress         *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress          `path:"source-address" module:"nokia-conf"`
	State                 E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_State                 `path:"state" module:"nokia-conf"`
	Tag                   NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Tag_Union               `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) IsYANGGoStruct() {}

// GetOrCreateAsPath retrieves the value of the AsPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath {
	if t.AsPath != nil {
		return t.AsPath
	}
	t.AsPath = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath{}
	return t.AsPath
}

// GetOrCreateClusterId retrieves the value of the ClusterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateClusterId() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId {
	if t.ClusterId != nil {
		return t.ClusterId
	}
	t.ClusterId = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId{}
	return t.ClusterId
}

// GetOrCreateCommunity retrieves the value of the Community field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community {
	if t.Community != nil {
		return t.Community
	}
	t.Community = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community{}
	return t.Community
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateFlowspec() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec{}
	return t.Flowspec
}

// GetOrCreateInterfaceSubnets retrieves the value of the InterfaceSubnets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateInterfaceSubnets() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets {
	if t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	t.InterfaceSubnets = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets{}
	return t.InterfaceSubnets
}

// GetOrCreateLocalPreference retrieves the value of the LocalPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateLocalPreference() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference {
	if t.LocalPreference != nil {
		return t.LocalPreference
	}
	t.LocalPreference = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference{}
	return t.LocalPreference
}

// GetOrCreateMetric retrieves the value of the Metric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric {
	if t.Metric != nil {
		return t.Metric
	}
	t.Metric = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric{}
	return t.Metric
}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor{}
	return t.Neighbor
}

// GetOrCreateNextHop retrieves the value of the NextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateNextHop() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop {
	if t.NextHop != nil {
		return t.NextHop
	}
	t.NextHop = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop{}
	return t.NextHop
}

// GetOrCreatePolicyVariables retrieves the value of the PolicyVariables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreatePolicyVariables() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables {
	if t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	t.PolicyVariables = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables{}
	return t.PolicyVariables
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol{}
	return t.Protocol
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrCreateSourceAddress() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress{}
	return t.SourceAddress
}

// GetAsPath returns the value of the AsPath struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field AsPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetAsPath() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath {
	if t != nil && t.AsPath != nil {
		return t.AsPath
	}
	return nil
}

// GetClusterId returns the value of the ClusterId struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field ClusterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetClusterId() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId {
	if t != nil && t.ClusterId != nil {
		return t.ClusterId
	}
	return nil
}

// GetCommunity returns the value of the Community struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Community is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetCommunity() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community {
	if t != nil && t.Community != nil {
		return t.Community
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetFlowspec() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetInterfaceSubnets returns the value of the InterfaceSubnets struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field InterfaceSubnets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetInterfaceSubnets() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets {
	if t != nil && t.InterfaceSubnets != nil {
		return t.InterfaceSubnets
	}
	return nil
}

// GetLocalPreference returns the value of the LocalPreference struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field LocalPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetLocalPreference() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference {
	if t != nil && t.LocalPreference != nil {
		return t.LocalPreference
	}
	return nil
}

// GetMetric returns the value of the Metric struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Metric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetMetric() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric {
	if t != nil && t.Metric != nil {
		return t.Metric
	}
	return nil
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetNextHop returns the value of the NextHop struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field NextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetNextHop() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop {
	if t != nil && t.NextHop != nil {
		return t.NextHop
	}
	return nil
}

// GetPolicyVariables returns the value of the PolicyVariables struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field PolicyVariables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetPolicyVariables() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables {
	if t != nil && t.PolicyVariables != nil {
		return t.PolicyVariables
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetSourceAddress() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetAggregateContributor retrieves the value of the leaf AggregateContributor from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateContributor is set, it can
// safely use t.GetAggregateContributor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateContributor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetAggregateContributor() bool {
	if t == nil || t.AggregateContributor == nil {
		return false
	}
	return *t.AggregateContributor
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetArea retrieves the value of the leaf Area from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Area is set, it can
// safely use t.GetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Area == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetArea() string {
	if t == nil || t.Area == nil {
		return ""
	}
	return *t.Area
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetDistinguisher() int64 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEvpnType retrieves the value of the leaf EvpnType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnType is set, it can
// safely use t.GetEvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetEvpnType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_EvpnType {
	if t == nil || t.EvpnType == 0 {
		return 0
	}
	return t.EvpnType
}

// GetExternal retrieves the value of the leaf External from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if External is set, it can
// safely use t.GetExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.External == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetExternal() bool {
	if t == nil || t.External == nil {
		return false
	}
	return *t.External
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetFamily() []E_NokiaTypesBgp_IpFamilyIdentifier {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetHostIp retrieves the value of the leaf HostIp from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostIp is set, it can
// safely use t.GetHostIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetHostIp() string {
	if t == nil || t.HostIp == nil {
		return ""
	}
	return *t.HostIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetInterface() []string {
	if t == nil || t.Interface == nil {
		return nil
	}
	return t.Interface
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetMvpnType retrieves the value of the leaf MvpnType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnType is set, it can
// safely use t.GetMvpnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetMvpnType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_MvpnType {
	if t == nil || t.MvpnType == 0 {
		return 0
	}
	return t.MvpnType
}

// GetOrigin retrieves the value of the leaf Origin from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOrigin() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Origin {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginValidationState retrieves the value of the leaf OriginValidationState from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginValidationState is set, it can
// safely use t.GetOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOriginValidationState() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_OriginValidationState {
	if t == nil || t.OriginValidationState == 0 {
		return 0
	}
	return t.OriginValidationState
}

// GetOspfType retrieves the value of the leaf OspfType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfType is set, it can
// safely use t.GetOspfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetOspfType() int32 {
	if t == nil || t.OspfType == nil {
		return 0
	}
	return *t.OspfType
}

// GetPathType retrieves the value of the leaf PathType from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathType is set, it can
// safely use t.GetPathType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetPathType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PathType {
	if t == nil || t.PathType == 0 {
		return 0
	}
	return t.PathType
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// GetState retrieves the value of the leaf State from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if State is set, it can
// safely use t.GetState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.State == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetState() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_State {
	if t == nil || t.State == 0 {
		return 0
	}
	return t.State
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) GetTag() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AggregateContributor == nil {
		var v bool = false
		t.AggregateContributor = &v
	}
	if t.External == nil {
		var v bool = false
		t.External = &v
	}
	t.AsPath.PopulateDefaults()
	t.ClusterId.PopulateDefaults()
	t.Community.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.InterfaceSubnets.PopulateDefaults()
	t.LocalPreference.PopulateDefaults()
	t.Metric.PopulateDefaults()
	t.Neighbor.PopulateDefaults()
	t.NextHop.PopulateDefaults()
	t.PolicyVariables.PopulateDefaults()
	t.Protocol.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/as-path YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath struct {
	Group  *string                                                                          `path:"group" module:"nokia-conf"`
	Length *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length `path:"length" module:"nokia-conf"`
	Name   *string                                                                          `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) IsYANGGoStruct() {}

// GetOrCreateLength retrieves the value of the Length field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetOrCreateLength() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length {
	if t.Length != nil {
		return t.Length
	}
	t.Length = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length{}
	return t.Length
}

// GetLength returns the value of the Length struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath. If the receiver or the field Length is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetLength() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length {
	if t != nil && t.Length != nil {
		return t.Length
	}
	return nil
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Length.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/as-path/length YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                          `path:"qualifier" module:"nokia-conf"`
	Unique    *bool                                                                                       `path:"unique" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetUnique retrieves the value of the leaf Unique from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unique is set, it can
// safely use t.GetUnique() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unique == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) GetUnique() bool {
	if t == nil || t.Unique == nil {
		return false
	}
	return *t.Unique
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
	if t.Unique == nil {
		var v bool = false
		t.Unique = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_AsPath_Length) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/cluster-id YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId struct {
	IpAddress       []string `path:"ip-address" module:"nokia-conf"`
	NoneClusterList *bool    `path:"none-cluster-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) GetIpAddress() []string {
	if t == nil || t.IpAddress == nil {
		return nil
	}
	return t.IpAddress
}

// GetNoneClusterList retrieves the value of the leaf NoneClusterList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NoneClusterList is set, it can
// safely use t.GetNoneClusterList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NoneClusterList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) GetNoneClusterList() bool {
	if t == nil || t.NoneClusterList == nil {
		return false
	}
	return *t.NoneClusterList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NoneClusterList == nil {
		var v bool = false
		t.NoneClusterList = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_ClusterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/community YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community struct {
	Count      *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count `path:"count" module:"nokia-conf"`
	Expression *string                                                                            `path:"expression" module:"nokia-conf"`
	Name       *string                                                                            `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) IsYANGGoStruct() {
}

// GetOrCreateCount retrieves the value of the Count field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetOrCreateCount() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count {
	if t.Count != nil {
		return t.Count
	}
	t.Count = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count{}
	return t.Count
}

// GetCount returns the value of the Count struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community. If the receiver or the field Count is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetCount() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count {
	if t != nil && t.Count != nil {
		return t.Count
	}
	return nil
}

// GetExpression retrieves the value of the leaf Expression from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expression is set, it can
// safely use t.GetExpression() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expression == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetExpression() string {
	if t == nil || t.Expression == nil {
		return ""
	}
	return *t.Expression
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Count.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/community/count YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                            `path:"qualifier" module:"nokia-conf"`
	Type      E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Type      `path:"type" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) GetType() E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Community_Count) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/flowspec YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec struct {
	Dest   *string `path:"dest" module:"nokia-conf"`
	Source *string `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) IsYANGGoStruct() {}

// GetDest retrieves the value of the leaf Dest from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dest is set, it can
// safely use t.GetDest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) GetDest() string {
	if t == nil || t.Dest == nil {
		return ""
	}
	return *t.Dest
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/interface-subnets YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets struct {
	IpIntName []string `path:"ip-int-name" module:"nokia-conf"`
	Service   *string  `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) IsYANGGoStruct() {
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) GetIpIntName() []string {
	if t == nil || t.IpIntName == nil {
		return nil
	}
	return t.IpIntName
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) GetService() string {
	if t == nil || t.Service == nil {
		return "Base"
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Service == nil {
		var v string = "Base"
		t.Service = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_InterfaceSubnets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/local-preference YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                            `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) IsYANGGoStruct() {
}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_LocalPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/metric YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric struct {
	Qualifier E_NokiaTypesPolicy_PolicyQualifier                                                   `path:"qualifier" module:"nokia-conf"`
	Value     NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) IsYANGGoStruct() {}

// GetQualifier retrieves the value of the leaf Qualifier from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Qualifier is set, it can
// safely use t.GetQualifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Qualifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) GetQualifier() E_NokiaTypesPolicy_PolicyQualifier {
	if t == nil || t.Qualifier == 0 {
		return NokiaTypesPolicy_PolicyQualifier_equal
	}
	return t.Qualifier
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) GetValue() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Qualifier == 0 {
		t.Qualifier = NokiaTypesPolicy_PolicyQualifier_equal
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Metric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/neighbor YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/next-hop YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/policy-variables YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables struct {
	Name map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) IsYANGGoStruct() {
}

// NewName creates a new entry in the Name list of the
// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) NewName(VariableName string) (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name)
	}

	key := VariableName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Name[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Name", key)
	}

	t.Name[key] = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name{
		VariableName: &VariableName,
	}

	return t.Name[key], nil
}

// RenameName renames an entry in the list Name within
// the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) RenameName(oldK, newK string) error {
	if _, ok := t.Name[newK]; ok {
		return fmt.Errorf("key %v already exists in Name", newK)
	}

	e, ok := t.Name[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Name", oldK)
	}
	e.VariableName = &newK

	t.Name[newK] = e
	delete(t.Name, oldK)
	return nil
}

// GetOrCreateName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) GetOrCreateName(VariableName string) *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name {

	key := VariableName

	if v, ok := t.Name[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewName(VariableName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateName got unexpected error: %v", err))
	}
	return v
}

// GetName retrieves the value with the specified key from
// the Name map field of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) GetName(VariableName string) *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name {

	if t == nil {
		return nil
	}

	key := VariableName

	if lm, ok := t.Name[key]; ok {
		return lm
	}
	return nil
}

// DeleteName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) DeleteName(VariableName string) {
	key := VariableName

	delete(t.Name, key)
}

// AppendName appends the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name struct to the
// list Name of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) AppendName(v *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) error {
	if v.VariableName == nil {
		return fmt.Errorf("invalid nil key received for VariableName")
	}

	key := *v.VariableName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Name == nil {
		t.Name = make(map[string]*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name)
	}

	if _, ok := t.Name[key]; ok {
		return fmt.Errorf("duplicate key for list Name %v", key)
	}

	t.Name[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Name {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/policy-variables/name YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Decimal            *float64 `path:"decimal" module:"nokia-conf"`
	Number             *uint64  `path:"number" module:"nokia-conf"`
	Value              *string  `path:"value" module:"nokia-conf"`
	VariableName       *string  `path:"variable-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDecimal retrieves the value of the leaf Decimal from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Decimal is set, it can
// safely use t.GetDecimal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Decimal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetDecimal() float64 {
	if t == nil || t.Decimal == nil {
		return 0.0
	}
	return *t.Decimal
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetNumber() uint64 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// GetVariableName retrieves the value of the leaf VariableName from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableName is set, it can
// safely use t.GetVariableName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) GetVariableName() string {
	if t == nil || t.VariableName == nil {
		return ""
	}
	return *t.VariableName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VariableName == nil {
		return nil, fmt.Errorf("nil value for key VariableName")
	}

	return map[string]interface{}{
		"variable-name": *t.VariableName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_PolicyVariables_Name) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/protocol YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol struct {
	Instance NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) IsYANGGoStruct() {}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) GetInstance() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) GetName() []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/from/source-address YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_From_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/to YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *int32                                                                    `path:"level" module:"nokia-conf"`
	Neighbor           *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor `path:"neighbor" module:"nokia-conf"`
	PrefixList         []string                                                                  `path:"prefix-list" module:"nokia-conf"`
	Protocol           *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) IsYANGGoStruct() {}

// GetOrCreateNeighbor retrieves the value of the Neighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetOrCreateNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor {
	if t.Neighbor != nil {
		return t.Neighbor
	}
	t.Neighbor = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor{}
	return t.Neighbor
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetOrCreateProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol{}
	return t.Protocol
}

// GetNeighbor returns the value of the Neighbor struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To. If the receiver or the field Neighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetNeighbor() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor {
	if t != nil && t.Neighbor != nil {
		return t.Neighbor
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetProtocol() *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetLevel() int32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) GetPrefixList() []string {
	if t == nil || t.PrefixList == nil {
		return nil
	}
	return t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Neighbor.PopulateDefaults()
	t.Protocol.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/to/neighbor YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor struct {
	IpAddress  *string `path:"ip-address" module:"nokia-conf"`
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol represents the /nokia-conf/configure/policy-options/policy-statement/named-entry/to/protocol YANG schema element.
type NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol struct {
	Instance NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Instance_Union `path:"instance" module:"nokia-conf"`
	Name     []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Name       `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) IsYANGGoStruct() {}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) GetInstance() NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Instance_Union {
	if t == nil || t.Instance == nil {
		return UnionUint32(0)
	}
	return t.Instance
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) GetName() []E_NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol_Name {
	if t == nil || t.Name == nil {
		return nil
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Instance == nil {
		t.Instance = UnionUint32(0)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol.
func (*NokiaConf_Configure_PolicyOptions_PolicyStatement_NamedEntry_To_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PrefixList represents the /nokia-conf/configure/policy-options/prefix-list YANG schema element.
type NokiaConf_Configure_PolicyOptions_PrefixList struct {
	ApplyGroups        []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string                                                                                                          `path:"name" module:"nokia-conf"`
	Prefix             map[NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PrefixList) IsYANGGoStruct() {}

// NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key represents the key for list Prefix of element /nokia-conf/configure/policy-options/prefix-list.
type NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key struct {
	IpPrefix string                                                     `path:"ip-prefix"`
	Type     E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type `path:"type"`
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_PolicyOptions_PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) NewPrefix(IpPrefix string, Type E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type) (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix)
	}

	key := NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_PolicyOptions_PrefixList_Prefix{
		IpPrefix: &IpPrefix,
		Type:     Type,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_PolicyOptions_PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) RenamePrefix(oldK, newK NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.Type = newK.Type

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) GetOrCreatePrefix(IpPrefix string, Type E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type) *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix {

	key := NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_PolicyOptions_PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) GetPrefix(IpPrefix string, Type E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type) *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) DeletePrefix(IpPrefix string, Type E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type) {
	key := NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: IpPrefix,
		Type:     Type,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_PolicyOptions_PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) AppendPrefix(v *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key{
		IpPrefix: *v.IpPrefix,
		Type:     v.Type,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Key]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PolicyOptions_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PrefixList.
func (*NokiaConf_Configure_PolicyOptions_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PrefixList_Prefix represents the /nokia-conf/configure/policy-options/prefix-list/prefix YANG schema element.
type NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	EndLength          *uint32                                                                     `path:"end-length" module:"nokia-conf"`
	IpPrefix           *string                                                                     `path:"ip-prefix" module:"nokia-conf"`
	MaskPattern        map[string]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern `path:"mask-pattern" module:"nokia-conf"`
	StartLength        *uint32                                                                     `path:"start-length" module:"nokia-conf"`
	ThroughLength      *uint32                                                                     `path:"through-length" module:"nokia-conf"`
	ToPrefix           map[string]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix    `path:"to-prefix" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type                  `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) IsYANGGoStruct() {}

// NewMaskPattern creates a new entry in the MaskPattern list of the
// NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) NewMaskPattern(Address string) (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaskPattern == nil {
		t.MaskPattern = make(map[string]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MaskPattern[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MaskPattern", key)
	}

	t.MaskPattern[key] = &NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern{
		Address: &Address,
	}

	return t.MaskPattern[key], nil
}

// RenameMaskPattern renames an entry in the list MaskPattern within
// the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) RenameMaskPattern(oldK, newK string) error {
	if _, ok := t.MaskPattern[newK]; ok {
		return fmt.Errorf("key %v already exists in MaskPattern", newK)
	}

	e, ok := t.MaskPattern[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MaskPattern", oldK)
	}
	e.Address = &newK

	t.MaskPattern[newK] = e
	delete(t.MaskPattern, oldK)
	return nil
}

// GetOrCreateMaskPattern retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetOrCreateMaskPattern(Address string) *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern {

	key := Address

	if v, ok := t.MaskPattern[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMaskPattern(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMaskPattern got unexpected error: %v", err))
	}
	return v
}

// GetMaskPattern retrieves the value with the specified key from
// the MaskPattern map field of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetMaskPattern(Address string) *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.MaskPattern[key]; ok {
		return lm
	}
	return nil
}

// DeleteMaskPattern deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) DeleteMaskPattern(Address string) {
	key := Address

	delete(t.MaskPattern, key)
}

// AppendMaskPattern appends the supplied NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern struct to the
// list MaskPattern of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) AppendMaskPattern(v *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaskPattern == nil {
		t.MaskPattern = make(map[string]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern)
	}

	if _, ok := t.MaskPattern[key]; ok {
		return fmt.Errorf("duplicate key for list MaskPattern %v", key)
	}

	t.MaskPattern[key] = v
	return nil
}

// NewToPrefix creates a new entry in the ToPrefix list of the
// NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) NewToPrefix(IpPrefix string) (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ToPrefix == nil {
		t.ToPrefix = make(map[string]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ToPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ToPrefix", key)
	}

	t.ToPrefix[key] = &NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.ToPrefix[key], nil
}

// RenameToPrefix renames an entry in the list ToPrefix within
// the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) RenameToPrefix(oldK, newK string) error {
	if _, ok := t.ToPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ToPrefix", newK)
	}

	e, ok := t.ToPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ToPrefix", oldK)
	}
	e.IpPrefix = &newK

	t.ToPrefix[newK] = e
	delete(t.ToPrefix, oldK)
	return nil
}

// GetOrCreateToPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetOrCreateToPrefix(IpPrefix string) *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix {

	key := IpPrefix

	if v, ok := t.ToPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewToPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateToPrefix got unexpected error: %v", err))
	}
	return v
}

// GetToPrefix retrieves the value with the specified key from
// the ToPrefix map field of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetToPrefix(IpPrefix string) *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.ToPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteToPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) DeleteToPrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.ToPrefix, key)
}

// AppendToPrefix appends the supplied NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix struct to the
// list ToPrefix of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) AppendToPrefix(v *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ToPrefix == nil {
		t.ToPrefix = make(map[string]*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix)
	}

	if _, ok := t.ToPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ToPrefix %v", key)
	}

	t.ToPrefix[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEndLength retrieves the value of the leaf EndLength from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLength is set, it can
// safely use t.GetEndLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetEndLength() uint32 {
	if t == nil || t.EndLength == nil {
		return 0
	}
	return *t.EndLength
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetStartLength retrieves the value of the leaf StartLength from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLength is set, it can
// safely use t.GetStartLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetStartLength() uint32 {
	if t == nil || t.StartLength == nil {
		return 0
	}
	return *t.StartLength
}

// GetThroughLength retrieves the value of the leaf ThroughLength from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThroughLength is set, it can
// safely use t.GetThroughLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThroughLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetThroughLength() uint32 {
	if t == nil || t.ThroughLength == nil {
		return 0
	}
	return *t.ThroughLength
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) GetType() E_NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MaskPattern {
		e.PopulateDefaults()
	}
	for _, e := range t.ToPrefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
		"type":      t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix.
func (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern represents the /nokia-conf/configure/policy-options/prefix-list/prefix/mask-pattern YANG schema element.
type NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern.
func (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_MaskPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix represents the /nokia-conf/configure/policy-options/prefix-list/prefix/to-prefix YANG schema element.
type NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix.
func (*NokiaConf_Configure_PolicyOptions_PrefixList_Prefix_ToPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port represents the /nokia-conf/configure/port YANG schema element.
type NokiaConf_Configure_Port struct {
	Access                     *NokiaConf_Configure_Port_Access                 `path:"access" module:"nokia-conf"`
	AdminState                 E_NokiaTypesSros_AdminState                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Connector                  *NokiaConf_Configure_Port_Connector              `path:"connector" module:"nokia-conf"`
	DdmEvents                  *bool                                            `path:"ddm-events" module:"nokia-conf"`
	Description                *string                                          `path:"description" module:"nokia-conf"`
	DistCpuProtection          *NokiaConf_Configure_Port_DistCpuProtection      `path:"dist-cpu-protection" module:"nokia-conf"`
	Dwdm                       *NokiaConf_Configure_Port_Dwdm                   `path:"dwdm" module:"nokia-conf"`
	Ethernet                   *NokiaConf_Configure_Port_Ethernet               `path:"ethernet" module:"nokia-conf"`
	Gnss                       *NokiaConf_Configure_Port_Gnss                   `path:"gnss" module:"nokia-conf"`
	HybridBufferAllocation     *NokiaConf_Configure_Port_HybridBufferAllocation `path:"hybrid-buffer-allocation" module:"nokia-conf"`
	ModifyBufferAllocation     *NokiaConf_Configure_Port_ModifyBufferAllocation `path:"modify-buffer-allocation" module:"nokia-conf"`
	MonitorAggEgressQueueStats *bool                                            `path:"monitor-agg-egress-queue-stats" module:"nokia-conf"`
	Network                    *NokiaConf_Configure_Port_Network                `path:"network" module:"nokia-conf"`
	OperGroup                  *string                                          `path:"oper-group" module:"nokia-conf"`
	Otu                        *NokiaConf_Configure_Port_Otu                    `path:"otu" module:"nokia-conf" yangPresence:"true"`
	PortId                     *string                                          `path:"port-id" module:"nokia-conf"`
	SonetSdh                   *NokiaConf_Configure_Port_SonetSdh               `path:"sonet-sdh" module:"nokia-conf"`
	Tdm                        *NokiaConf_Configure_Port_Tdm                    `path:"tdm" module:"nokia-conf"`
	Transceiver                *NokiaConf_Configure_Port_Transceiver            `path:"transceiver" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateAccess() *NokiaConf_Configure_Port_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Port_Access{}
	return t.Access
}

// GetOrCreateConnector retrieves the value of the Connector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateConnector() *NokiaConf_Configure_Port_Connector {
	if t.Connector != nil {
		return t.Connector
	}
	t.Connector = &NokiaConf_Configure_Port_Connector{}
	return t.Connector
}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Port_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Port_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateDwdm retrieves the value of the Dwdm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateDwdm() *NokiaConf_Configure_Port_Dwdm {
	if t.Dwdm != nil {
		return t.Dwdm
	}
	t.Dwdm = &NokiaConf_Configure_Port_Dwdm{}
	return t.Dwdm
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateEthernet() *NokiaConf_Configure_Port_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_Port_Ethernet{}
	return t.Ethernet
}

// GetOrCreateGnss retrieves the value of the Gnss field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateGnss() *NokiaConf_Configure_Port_Gnss {
	if t.Gnss != nil {
		return t.Gnss
	}
	t.Gnss = &NokiaConf_Configure_Port_Gnss{}
	return t.Gnss
}

// GetOrCreateHybridBufferAllocation retrieves the value of the HybridBufferAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateHybridBufferAllocation() *NokiaConf_Configure_Port_HybridBufferAllocation {
	if t.HybridBufferAllocation != nil {
		return t.HybridBufferAllocation
	}
	t.HybridBufferAllocation = &NokiaConf_Configure_Port_HybridBufferAllocation{}
	return t.HybridBufferAllocation
}

// GetOrCreateModifyBufferAllocation retrieves the value of the ModifyBufferAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateModifyBufferAllocation() *NokiaConf_Configure_Port_ModifyBufferAllocation {
	if t.ModifyBufferAllocation != nil {
		return t.ModifyBufferAllocation
	}
	t.ModifyBufferAllocation = &NokiaConf_Configure_Port_ModifyBufferAllocation{}
	return t.ModifyBufferAllocation
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateNetwork() *NokiaConf_Configure_Port_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_Network{}
	return t.Network
}

// GetOrCreateOtu retrieves the value of the Otu field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateOtu() *NokiaConf_Configure_Port_Otu {
	if t.Otu != nil {
		return t.Otu
	}
	t.Otu = &NokiaConf_Configure_Port_Otu{}
	return t.Otu
}

// GetOrCreateSonetSdh retrieves the value of the SonetSdh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateSonetSdh() *NokiaConf_Configure_Port_SonetSdh {
	if t.SonetSdh != nil {
		return t.SonetSdh
	}
	t.SonetSdh = &NokiaConf_Configure_Port_SonetSdh{}
	return t.SonetSdh
}

// GetOrCreateTdm retrieves the value of the Tdm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateTdm() *NokiaConf_Configure_Port_Tdm {
	if t.Tdm != nil {
		return t.Tdm
	}
	t.Tdm = &NokiaConf_Configure_Port_Tdm{}
	return t.Tdm
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port) GetOrCreateTransceiver() *NokiaConf_Configure_Port_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &NokiaConf_Configure_Port_Transceiver{}
	return t.Transceiver
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetAccess() *NokiaConf_Configure_Port_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetConnector returns the value of the Connector struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Connector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetConnector() *NokiaConf_Configure_Port_Connector {
	if t != nil && t.Connector != nil {
		return t.Connector
	}
	return nil
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetDistCpuProtection() *NokiaConf_Configure_Port_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetDwdm returns the value of the Dwdm struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Dwdm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetDwdm() *NokiaConf_Configure_Port_Dwdm {
	if t != nil && t.Dwdm != nil {
		return t.Dwdm
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetEthernet() *NokiaConf_Configure_Port_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetGnss returns the value of the Gnss struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Gnss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetGnss() *NokiaConf_Configure_Port_Gnss {
	if t != nil && t.Gnss != nil {
		return t.Gnss
	}
	return nil
}

// GetHybridBufferAllocation returns the value of the HybridBufferAllocation struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field HybridBufferAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetHybridBufferAllocation() *NokiaConf_Configure_Port_HybridBufferAllocation {
	if t != nil && t.HybridBufferAllocation != nil {
		return t.HybridBufferAllocation
	}
	return nil
}

// GetModifyBufferAllocation returns the value of the ModifyBufferAllocation struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field ModifyBufferAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetModifyBufferAllocation() *NokiaConf_Configure_Port_ModifyBufferAllocation {
	if t != nil && t.ModifyBufferAllocation != nil {
		return t.ModifyBufferAllocation
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetNetwork() *NokiaConf_Configure_Port_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetOtu returns the value of the Otu struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Otu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetOtu() *NokiaConf_Configure_Port_Otu {
	if t != nil && t.Otu != nil {
		return t.Otu
	}
	return nil
}

// GetSonetSdh returns the value of the SonetSdh struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field SonetSdh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetSonetSdh() *NokiaConf_Configure_Port_SonetSdh {
	if t != nil && t.SonetSdh != nil {
		return t.SonetSdh
	}
	return nil
}

// GetTdm returns the value of the Tdm struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Tdm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetTdm() *NokiaConf_Configure_Port_Tdm {
	if t != nil && t.Tdm != nil {
		return t.Tdm
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from NokiaConf_Configure_Port. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port) GetTransceiver() *NokiaConf_Configure_Port_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDdmEvents retrieves the value of the leaf DdmEvents from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DdmEvents is set, it can
// safely use t.GetDdmEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DdmEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetDdmEvents() bool {
	if t == nil || t.DdmEvents == nil {
		return true
	}
	return *t.DdmEvents
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMonitorAggEgressQueueStats retrieves the value of the leaf MonitorAggEgressQueueStats from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorAggEgressQueueStats is set, it can
// safely use t.GetMonitorAggEgressQueueStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorAggEgressQueueStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetMonitorAggEgressQueueStats() bool {
	if t == nil || t.MonitorAggEgressQueueStats == nil {
		return false
	}
	return *t.MonitorAggEgressQueueStats
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DdmEvents == nil {
		var v bool = true
		t.DdmEvents = &v
	}
	if t.MonitorAggEgressQueueStats == nil {
		var v bool = false
		t.MonitorAggEgressQueueStats = &v
	}
	t.Access.PopulateDefaults()
	t.Connector.PopulateDefaults()
	t.DistCpuProtection.PopulateDefaults()
	t.Dwdm.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
	t.Gnss.PopulateDefaults()
	t.HybridBufferAllocation.PopulateDefaults()
	t.ModifyBufferAllocation.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Otu.PopulateDefaults()
	t.SonetSdh.PopulateDefaults()
	t.Tdm.PopulateDefaults()
	t.Transceiver.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port.
func (*NokiaConf_Configure_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PortPolicy represents the /nokia-conf/configure/port-policy YANG schema element.
type NokiaConf_Configure_PortPolicy struct {
	ApplyGroups               []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description               *string  `path:"description" module:"nokia-conf"`
	EgressPortSchedulerPolicy *string  `path:"egress-port-scheduler-policy" module:"nokia-conf"`
	Name                      *string  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PortPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PortPolicy) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPortSchedulerPolicy retrieves the value of the leaf EgressPortSchedulerPolicy from the NokiaConf_Configure_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPortSchedulerPolicy is set, it can
// safely use t.GetEgressPortSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPortSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortPolicy) GetEgressPortSchedulerPolicy() string {
	if t == nil || t.EgressPortSchedulerPolicy == nil {
		return ""
	}
	return *t.EgressPortSchedulerPolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_PortPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PortPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PortPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PortPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PortPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PortPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PortPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PortPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PortPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PortPolicy.
func (*NokiaConf_Configure_PortPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PortXc represents the /nokia-conf/configure/port-xc YANG schema element.
type NokiaConf_Configure_PortXc struct {
	ApplyGroups        []string                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Pxc                map[uint32]*NokiaConf_Configure_PortXc_Pxc `path:"pxc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PortXc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PortXc) IsYANGGoStruct() {}

// NewPxc creates a new entry in the Pxc list of the
// NokiaConf_Configure_PortXc struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_PortXc) NewPxc(PxcId uint32) (*NokiaConf_Configure_PortXc_Pxc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pxc == nil {
		t.Pxc = make(map[uint32]*NokiaConf_Configure_PortXc_Pxc)
	}

	key := PxcId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pxc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pxc", key)
	}

	t.Pxc[key] = &NokiaConf_Configure_PortXc_Pxc{
		PxcId: &PxcId,
	}

	return t.Pxc[key], nil
}

// RenamePxc renames an entry in the list Pxc within
// the NokiaConf_Configure_PortXc struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_PortXc) RenamePxc(oldK, newK uint32) error {
	if _, ok := t.Pxc[newK]; ok {
		return fmt.Errorf("key %v already exists in Pxc", newK)
	}

	e, ok := t.Pxc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pxc", oldK)
	}
	e.PxcId = &newK

	t.Pxc[newK] = e
	delete(t.Pxc, oldK)
	return nil
}

// GetOrCreatePxc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_PortXc. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_PortXc) GetOrCreatePxc(PxcId uint32) *NokiaConf_Configure_PortXc_Pxc {

	key := PxcId

	if v, ok := t.Pxc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPxc(PxcId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePxc got unexpected error: %v", err))
	}
	return v
}

// GetPxc retrieves the value with the specified key from
// the Pxc map field of NokiaConf_Configure_PortXc. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_PortXc) GetPxc(PxcId uint32) *NokiaConf_Configure_PortXc_Pxc {

	if t == nil {
		return nil
	}

	key := PxcId

	if lm, ok := t.Pxc[key]; ok {
		return lm
	}
	return nil
}

// DeletePxc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_PortXc. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_PortXc) DeletePxc(PxcId uint32) {
	key := PxcId

	delete(t.Pxc, key)
}

// AppendPxc appends the supplied NokiaConf_Configure_PortXc_Pxc struct to the
// list Pxc of NokiaConf_Configure_PortXc. If the key value(s) specified in
// the supplied NokiaConf_Configure_PortXc_Pxc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_PortXc) AppendPxc(v *NokiaConf_Configure_PortXc_Pxc) error {
	if v.PxcId == nil {
		return fmt.Errorf("invalid nil key received for PxcId")
	}

	key := *v.PxcId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pxc == nil {
		t.Pxc = make(map[uint32]*NokiaConf_Configure_PortXc_Pxc)
	}

	if _, ok := t.Pxc[key]; ok {
		return fmt.Errorf("duplicate key for list Pxc %v", key)
	}

	t.Pxc[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PortXc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PortXc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PortXc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PortXc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pxc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PortXc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PortXc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PortXc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PortXc) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PortXc.
func (*NokiaConf_Configure_PortXc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_PortXc_Pxc represents the /nokia-conf/configure/port-xc/pxc YANG schema element.
type NokiaConf_Configure_PortXc_Pxc struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	PortId             *string                     `path:"port-id" module:"nokia-conf"`
	PxcId              *uint32                     `path:"pxc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_PortXc_Pxc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_PortXc_Pxc) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc_Pxc) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc_Pxc) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc_Pxc) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc_Pxc) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc_Pxc) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPxcId retrieves the value of the leaf PxcId from the NokiaConf_Configure_PortXc_Pxc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PxcId is set, it can
// safely use t.GetPxcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PxcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_PortXc_Pxc) GetPxcId() uint32 {
	if t == nil || t.PxcId == nil {
		return 0
	}
	return *t.PxcId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_PortXc_Pxc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_PortXc_Pxc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_PortXc_Pxc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_PortXc_Pxc) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PxcId == nil {
		return nil, fmt.Errorf("nil value for key PxcId")
	}

	return map[string]interface{}{
		"pxc-id": *t.PxcId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PortXc_Pxc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_PortXc_Pxc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_PortXc_Pxc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_PortXc_Pxc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_PortXc_Pxc.
func (*NokiaConf_Configure_PortXc_Pxc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access represents the /nokia-conf/configure/port/access YANG schema element.
type NokiaConf_Configure_Port_Access struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Port_Access_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Port_Access_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Access) GetOrCreateEgress() *NokiaConf_Configure_Port_Access_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Access_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Access) GetOrCreateIngress() *NokiaConf_Configure_Port_Access_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Port_Access_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Access. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Access) GetEgress() *NokiaConf_Configure_Port_Access_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Port_Access. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Access) GetIngress() *NokiaConf_Configure_Port_Access_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access.
func (*NokiaConf_Configure_Port_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Egress represents the /nokia-conf/configure/port/access/egress YANG schema element.
type NokiaConf_Configure_Port_Access_Egress struct {
	Pool map[string]*NokiaConf_Configure_Port_Access_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Port_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Access_Egress) NewPool(Name string) (*NokiaConf_Configure_Port_Access_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Port_Access_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Port_Access_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Port_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Access_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Access_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Port_Access_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Port_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Access_Egress) GetPool(Name string) *NokiaConf_Configure_Port_Access_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Access_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Port_Access_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Port_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Access_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Access_Egress) AppendPool(v *NokiaConf_Configure_Port_Access_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Port_Access_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Egress.
func (*NokiaConf_Configure_Port_Access_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Egress_Pool represents the /nokia-conf/configure/port/access/egress/pool YANG schema element.
type NokiaConf_Configure_Port_Access_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                              `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                              `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                              `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                              `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Port_Access_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Port_Access_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Access_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Egress_Pool.
func (*NokiaConf_Configure_Port_Access_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs represents the /nokia-conf/configure/port/access/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_Cbs_Union         `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) GetCbs() NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	return t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/port/access/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Port_Access_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Ingress represents the /nokia-conf/configure/port/access/ingress YANG schema element.
type NokiaConf_Configure_Port_Access_Ingress struct {
	Pool map[string]*NokiaConf_Configure_Port_Access_Ingress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Ingress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Port_Access_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Access_Ingress) NewPool(Name string) (*NokiaConf_Configure_Port_Access_Ingress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Port_Access_Ingress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Port_Access_Ingress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Port_Access_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Access_Ingress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Access_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Access_Ingress) GetOrCreatePool(Name string) *NokiaConf_Configure_Port_Access_Ingress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Port_Access_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Access_Ingress) GetPool(Name string) *NokiaConf_Configure_Port_Access_Ingress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Access_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Access_Ingress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Port_Access_Ingress_Pool struct to the
// list Pool of NokiaConf_Configure_Port_Access_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Access_Ingress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Access_Ingress) AppendPool(v *NokiaConf_Configure_Port_Access_Ingress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Port_Access_Ingress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Ingress.
func (*NokiaConf_Configure_Port_Access_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Ingress_Pool represents the /nokia-conf/configure/port/access/ingress/pool YANG schema element.
type NokiaConf_Configure_Port_Access_Ingress_Pool struct {
	AmberAlarmThreshold *uint32                                               `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                               `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                               `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                               `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Ingress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Ingress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Port_Access_Ingress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetResvCbs() *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Port_Access_Ingress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Ingress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Access_Ingress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Ingress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Ingress_Pool.
func (*NokiaConf_Configure_Port_Access_Ingress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs represents the /nokia-conf/configure/port/access/ingress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_Cbs_Union         `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) GetCbs() NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_Cbs_Enum_auto
	}
	return t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_Cbs_Enum_auto
	}
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs.
func (*NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/port/access/ingress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Port_Access_Ingress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Connector represents the /nokia-conf/configure/port/connector YANG schema element.
type NokiaConf_Configure_Port_Connector struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Breakout           E_NokiaConf_Configure_Port_Connector_Breakout  `path:"breakout" module:"nokia-conf"`
	RsFecMode          E_NokiaConf_Configure_Port_Connector_RsFecMode `path:"rs-fec-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Connector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Connector) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Connector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Connector) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Connector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Connector) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBreakout retrieves the value of the leaf Breakout from the NokiaConf_Configure_Port_Connector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Breakout is set, it can
// safely use t.GetBreakout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Breakout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Connector) GetBreakout() E_NokiaConf_Configure_Port_Connector_Breakout {
	if t == nil || t.Breakout == 0 {
		return 0
	}
	return t.Breakout
}

// GetRsFecMode retrieves the value of the leaf RsFecMode from the NokiaConf_Configure_Port_Connector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsFecMode is set, it can
// safely use t.GetRsFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsFecMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Connector) GetRsFecMode() E_NokiaConf_Configure_Port_Connector_RsFecMode {
	if t == nil || t.RsFecMode == 0 {
		return 0
	}
	return t.RsFecMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Connector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Connector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Connector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Connector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Connector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Connector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Connector.
func (*NokiaConf_Configure_Port_Connector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_DistCpuProtection represents the /nokia-conf/configure/port/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Port_DistCpuProtection struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_DistCpuProtection) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Port_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_DistCpuProtection) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_DistCpuProtection.
func (*NokiaConf_Configure_Port_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm represents the /nokia-conf/configure/port/dwdm YANG schema element.
type NokiaConf_Configure_Port_Dwdm struct {
	ApplyGroups        []string                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Channel            *uint32                                    `path:"channel" module:"nokia-conf"`
	Coherent           *NokiaConf_Configure_Port_Dwdm_Coherent    `path:"coherent" module:"nokia-conf"`
	Frequency          *uint32                                    `path:"frequency" module:"nokia-conf"`
	RxdtvAdjust        *bool                                      `path:"rxdtv-adjust" module:"nokia-conf"`
	Wavetracker        *NokiaConf_Configure_Port_Dwdm_Wavetracker `path:"wavetracker" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm) IsYANGGoStruct() {}

// GetOrCreateCoherent retrieves the value of the Coherent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm) GetOrCreateCoherent() *NokiaConf_Configure_Port_Dwdm_Coherent {
	if t.Coherent != nil {
		return t.Coherent
	}
	t.Coherent = &NokiaConf_Configure_Port_Dwdm_Coherent{}
	return t.Coherent
}

// GetOrCreateWavetracker retrieves the value of the Wavetracker field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm) GetOrCreateWavetracker() *NokiaConf_Configure_Port_Dwdm_Wavetracker {
	if t.Wavetracker != nil {
		return t.Wavetracker
	}
	t.Wavetracker = &NokiaConf_Configure_Port_Dwdm_Wavetracker{}
	return t.Wavetracker
}

// GetCoherent returns the value of the Coherent struct pointer
// from NokiaConf_Configure_Port_Dwdm. If the receiver or the field Coherent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm) GetCoherent() *NokiaConf_Configure_Port_Dwdm_Coherent {
	if t != nil && t.Coherent != nil {
		return t.Coherent
	}
	return nil
}

// GetWavetracker returns the value of the Wavetracker struct pointer
// from NokiaConf_Configure_Port_Dwdm. If the receiver or the field Wavetracker is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm) GetWavetracker() *NokiaConf_Configure_Port_Dwdm_Wavetracker {
	if t != nil && t.Wavetracker != nil {
		return t.Wavetracker
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChannel retrieves the value of the leaf Channel from the NokiaConf_Configure_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Channel is set, it can
// safely use t.GetChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Channel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm) GetChannel() uint32 {
	if t == nil || t.Channel == nil {
		return 0
	}
	return *t.Channel
}

// GetFrequency retrieves the value of the leaf Frequency from the NokiaConf_Configure_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Frequency is set, it can
// safely use t.GetFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Frequency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm) GetFrequency() uint32 {
	if t == nil || t.Frequency == nil {
		return 0
	}
	return *t.Frequency
}

// GetRxdtvAdjust retrieves the value of the leaf RxdtvAdjust from the NokiaConf_Configure_Port_Dwdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxdtvAdjust is set, it can
// safely use t.GetRxdtvAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxdtvAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm) GetRxdtvAdjust() bool {
	if t == nil || t.RxdtvAdjust == nil {
		return false
	}
	return *t.RxdtvAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Coherent.PopulateDefaults()
	t.Wavetracker.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm.
func (*NokiaConf_Configure_Port_Dwdm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Coherent represents the /nokia-conf/configure/port/dwdm/coherent YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Coherent struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Channel            *uint32                                             `path:"channel" module:"nokia-conf"`
	Compatibility      E_NokiaTypesPort_OpticalCompatibilityMode           `path:"compatibility" module:"nokia-conf"`
	CprWindowSize      *uint32                                             `path:"cpr-window-size" module:"nokia-conf"`
	Dispersion         *int32                                              `path:"dispersion" module:"nokia-conf"`
	Mode               E_NokiaTypesPort_OpticalDispersionControlMode       `path:"mode" module:"nokia-conf"`
	ReportAlarm        *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm `path:"report-alarm" module:"nokia-conf"`
	RxLosReaction      E_NokiaTypesPort_LosReaction                        `path:"rx-los-reaction" module:"nokia-conf"`
	RxLosThresh        *float64                                            `path:"rx-los-thresh" module:"nokia-conf"`
	Sweep              *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep       `path:"sweep" module:"nokia-conf"`
	TargetPower        *float64                                            `path:"target-power" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Coherent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Coherent) IsYANGGoStruct() {}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSweep retrieves the value of the Sweep field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetOrCreateSweep() *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep {
	if t.Sweep != nil {
		return t.Sweep
	}
	t.Sweep = &NokiaConf_Configure_Port_Dwdm_Coherent_Sweep{}
	return t.Sweep
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Dwdm_Coherent. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetReportAlarm() *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSweep returns the value of the Sweep struct pointer
// from NokiaConf_Configure_Port_Dwdm_Coherent. If the receiver or the field Sweep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetSweep() *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep {
	if t != nil && t.Sweep != nil {
		return t.Sweep
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChannel retrieves the value of the leaf Channel from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Channel is set, it can
// safely use t.GetChannel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Channel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetChannel() uint32 {
	if t == nil || t.Channel == nil {
		return 0
	}
	return *t.Channel
}

// GetCompatibility retrieves the value of the leaf Compatibility from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Compatibility is set, it can
// safely use t.GetCompatibility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Compatibility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetCompatibility() E_NokiaTypesPort_OpticalCompatibilityMode {
	if t == nil || t.Compatibility == 0 {
		return NokiaTypesPort_OpticalCompatibilityMode_long_haul
	}
	return t.Compatibility
}

// GetCprWindowSize retrieves the value of the leaf CprWindowSize from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CprWindowSize is set, it can
// safely use t.GetCprWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CprWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetCprWindowSize() uint32 {
	if t == nil || t.CprWindowSize == nil {
		return 32
	}
	return *t.CprWindowSize
}

// GetDispersion retrieves the value of the leaf Dispersion from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dispersion is set, it can
// safely use t.GetDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dispersion == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetDispersion() int32 {
	if t == nil || t.Dispersion == nil {
		return 0
	}
	return *t.Dispersion
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetMode() E_NokiaTypesPort_OpticalDispersionControlMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesPort_OpticalDispersionControlMode_automatic
	}
	return t.Mode
}

// GetRxLosReaction retrieves the value of the leaf RxLosReaction from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxLosReaction is set, it can
// safely use t.GetRxLosReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxLosReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetRxLosReaction() E_NokiaTypesPort_LosReaction {
	if t == nil || t.RxLosReaction == 0 {
		return NokiaTypesPort_LosReaction_squelch
	}
	return t.RxLosReaction
}

// GetRxLosThresh retrieves the value of the leaf RxLosThresh from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxLosThresh is set, it can
// safely use t.GetRxLosThresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxLosThresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetRxLosThresh() float64 {
	if t == nil || t.RxLosThresh == nil {
		return -23
	}
	return *t.RxLosThresh
}

// GetTargetPower retrieves the value of the leaf TargetPower from the NokiaConf_Configure_Port_Dwdm_Coherent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetPower is set, it can
// safely use t.GetTargetPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetPower == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) GetTargetPower() float64 {
	if t == nil || t.TargetPower == nil {
		return 1
	}
	return *t.TargetPower
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Coherent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Compatibility == 0 {
		t.Compatibility = NokiaTypesPort_OpticalCompatibilityMode_long_haul
	}
	if t.CprWindowSize == nil {
		var v uint32 = 32
		t.CprWindowSize = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesPort_OpticalDispersionControlMode_automatic
	}
	if t.RxLosReaction == 0 {
		t.RxLosReaction = NokiaTypesPort_LosReaction_squelch
	}
	if t.RxLosThresh == nil {
		var v float64 = -23
		t.RxLosThresh = &v
	}
	if t.TargetPower == nil {
		var v float64 = 1
		t.TargetPower = &v
	}
	t.ReportAlarm.PopulateDefaults()
	t.Sweep.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Coherent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Coherent.
func (*NokiaConf_Configure_Port_Dwdm_Coherent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm represents the /nokia-conf/configure/port/dwdm/coherent/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm struct {
	Hosttx *bool `path:"hosttx" module:"nokia-conf"`
	Mod    *bool `path:"mod" module:"nokia-conf"`
	Modflt *bool `path:"modflt" module:"nokia-conf"`
	Netrx  *bool `path:"netrx" module:"nokia-conf"`
	Nettx  *bool `path:"nettx" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) IsYANGGoStruct() {}

// GetHosttx retrieves the value of the leaf Hosttx from the NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hosttx is set, it can
// safely use t.GetHosttx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hosttx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) GetHosttx() bool {
	if t == nil || t.Hosttx == nil {
		return true
	}
	return *t.Hosttx
}

// GetMod retrieves the value of the leaf Mod from the NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mod is set, it can
// safely use t.GetMod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) GetMod() bool {
	if t == nil || t.Mod == nil {
		return true
	}
	return *t.Mod
}

// GetModflt retrieves the value of the leaf Modflt from the NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Modflt is set, it can
// safely use t.GetModflt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Modflt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) GetModflt() bool {
	if t == nil || t.Modflt == nil {
		return true
	}
	return *t.Modflt
}

// GetNetrx retrieves the value of the leaf Netrx from the NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netrx is set, it can
// safely use t.GetNetrx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netrx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) GetNetrx() bool {
	if t == nil || t.Netrx == nil {
		return true
	}
	return *t.Netrx
}

// GetNettx retrieves the value of the leaf Nettx from the NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nettx is set, it can
// safely use t.GetNettx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nettx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) GetNettx() bool {
	if t == nil || t.Nettx == nil {
		return true
	}
	return *t.Nettx
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Hosttx == nil {
		var v bool = true
		t.Hosttx = &v
	}
	if t.Mod == nil {
		var v bool = true
		t.Mod = &v
	}
	if t.Modflt == nil {
		var v bool = true
		t.Modflt = &v
	}
	if t.Netrx == nil {
		var v bool = true
		t.Netrx = &v
	}
	if t.Nettx == nil {
		var v bool = true
		t.Nettx = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm.
func (*NokiaConf_Configure_Port_Dwdm_Coherent_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Coherent_Sweep represents the /nokia-conf/configure/port/dwdm/coherent/sweep YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Coherent_Sweep struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Coherent_Sweep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Port_Dwdm_Coherent_Sweep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 2000
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Port_Dwdm_Coherent_Sweep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) GetStart() int32 {
	if t == nil || t.Start == nil {
		return -25500
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Coherent_Sweep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 2000
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = -25500
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Coherent_Sweep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Coherent_Sweep.
func (*NokiaConf_Configure_Port_Dwdm_Coherent_Sweep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Wavetracker represents the /nokia-conf/configure/port/dwdm/wavetracker YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Wavetracker struct {
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Encode             *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode       `path:"encode" module:"nokia-conf" yangPresence:"true"`
	PowerControl       *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl `path:"power-control" module:"nokia-conf" yangPresence:"true"`
	ReportAlarm        *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm  `path:"report-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Wavetracker implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker) IsYANGGoStruct() {}

// GetOrCreateEncode retrieves the value of the Encode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetOrCreateEncode() *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode {
	if t.Encode != nil {
		return t.Encode
	}
	t.Encode = &NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode{}
	return t.Encode
}

// GetOrCreatePowerControl retrieves the value of the PowerControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetOrCreatePowerControl() *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl {
	if t.PowerControl != nil {
		return t.PowerControl
	}
	t.PowerControl = &NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl{}
	return t.PowerControl
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm{}
	return t.ReportAlarm
}

// GetEncode returns the value of the Encode struct pointer
// from NokiaConf_Configure_Port_Dwdm_Wavetracker. If the receiver or the field Encode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetEncode() *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode {
	if t != nil && t.Encode != nil {
		return t.Encode
	}
	return nil
}

// GetPowerControl returns the value of the PowerControl struct pointer
// from NokiaConf_Configure_Port_Dwdm_Wavetracker. If the receiver or the field PowerControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetPowerControl() *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl {
	if t != nil && t.PowerControl != nil {
		return t.PowerControl
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Dwdm_Wavetracker. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetReportAlarm() *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Dwdm_Wavetracker
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Dwdm_Wavetracker
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Wavetracker
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Encode.PopulateDefaults()
	t.PowerControl.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Wavetracker"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Wavetracker.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode represents the /nokia-conf/configure/port/dwdm/wavetracker/encode YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode struct {
	Key1 *uint32 `path:"key1" module:"nokia-conf"`
	Key2 *uint32 `path:"key2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) IsYANGGoStruct() {}

// GetKey1 retrieves the value of the leaf Key1 from the NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) GetKey1() uint32 {
	if t == nil || t.Key1 == nil {
		return 0
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) GetKey2() uint32 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker_Encode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl represents the /nokia-conf/configure/port/dwdm/wavetracker/power-control YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl struct {
	TargetPower *float64 `path:"target-power" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) IsYANGGoStruct() {}

// GetTargetPower retrieves the value of the leaf TargetPower from the NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetPower is set, it can
// safely use t.GetTargetPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetPower == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) GetTargetPower() float64 {
	if t == nil || t.TargetPower == nil {
		return -20
	}
	return *t.TargetPower
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TargetPower == nil {
		var v float64 = -20
		t.TargetPower = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker_PowerControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm represents the /nokia-conf/configure/port/dwdm/wavetracker/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm struct {
	EncoderDegrade        *bool `path:"encoder-degrade" module:"nokia-conf"`
	EncoderFailure        *bool `path:"encoder-failure" module:"nokia-conf"`
	MissingPluggableVoa   *bool `path:"missing-pluggable-voa" module:"nokia-conf"`
	PowerControlDegrade   *bool `path:"power-control-degrade" module:"nokia-conf"`
	PowerControlFailure   *bool `path:"power-control-failure" module:"nokia-conf"`
	PowerControlHighLimit *bool `path:"power-control-high-limit" module:"nokia-conf"`
	PowerControlLowLimit  *bool `path:"power-control-low-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) IsYANGGoStruct() {}

// GetEncoderDegrade retrieves the value of the leaf EncoderDegrade from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncoderDegrade is set, it can
// safely use t.GetEncoderDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncoderDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetEncoderDegrade() bool {
	if t == nil || t.EncoderDegrade == nil {
		return true
	}
	return *t.EncoderDegrade
}

// GetEncoderFailure retrieves the value of the leaf EncoderFailure from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncoderFailure is set, it can
// safely use t.GetEncoderFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncoderFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetEncoderFailure() bool {
	if t == nil || t.EncoderFailure == nil {
		return true
	}
	return *t.EncoderFailure
}

// GetMissingPluggableVoa retrieves the value of the leaf MissingPluggableVoa from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MissingPluggableVoa is set, it can
// safely use t.GetMissingPluggableVoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MissingPluggableVoa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetMissingPluggableVoa() bool {
	if t == nil || t.MissingPluggableVoa == nil {
		return true
	}
	return *t.MissingPluggableVoa
}

// GetPowerControlDegrade retrieves the value of the leaf PowerControlDegrade from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlDegrade is set, it can
// safely use t.GetPowerControlDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlDegrade() bool {
	if t == nil || t.PowerControlDegrade == nil {
		return true
	}
	return *t.PowerControlDegrade
}

// GetPowerControlFailure retrieves the value of the leaf PowerControlFailure from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlFailure is set, it can
// safely use t.GetPowerControlFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlFailure() bool {
	if t == nil || t.PowerControlFailure == nil {
		return true
	}
	return *t.PowerControlFailure
}

// GetPowerControlHighLimit retrieves the value of the leaf PowerControlHighLimit from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlHighLimit is set, it can
// safely use t.GetPowerControlHighLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlHighLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlHighLimit() bool {
	if t == nil || t.PowerControlHighLimit == nil {
		return true
	}
	return *t.PowerControlHighLimit
}

// GetPowerControlLowLimit retrieves the value of the leaf PowerControlLowLimit from the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerControlLowLimit is set, it can
// safely use t.GetPowerControlLowLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerControlLowLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) GetPowerControlLowLimit() bool {
	if t == nil || t.PowerControlLowLimit == nil {
		return true
	}
	return *t.PowerControlLowLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EncoderDegrade == nil {
		var v bool = true
		t.EncoderDegrade = &v
	}
	if t.EncoderFailure == nil {
		var v bool = true
		t.EncoderFailure = &v
	}
	if t.MissingPluggableVoa == nil {
		var v bool = true
		t.MissingPluggableVoa = &v
	}
	if t.PowerControlDegrade == nil {
		var v bool = true
		t.PowerControlDegrade = &v
	}
	if t.PowerControlFailure == nil {
		var v bool = true
		t.PowerControlFailure = &v
	}
	if t.PowerControlHighLimit == nil {
		var v bool = true
		t.PowerControlHighLimit = &v
	}
	if t.PowerControlLowLimit == nil {
		var v bool = true
		t.PowerControlLowLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm.
func (*NokiaConf_Configure_Port_Dwdm_Wavetracker_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet represents the /nokia-conf/configure/port/ethernet YANG schema element.
type NokiaConf_Configure_Port_Ethernet struct {
	Access                  *NokiaConf_Configure_Port_Ethernet_Access                  `path:"access" module:"nokia-conf"`
	AccountingPolicy        *uint32                                                    `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups             []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Autonegotiate           E_NokiaConf_Configure_Port_Ethernet_Autonegotiate          `path:"autonegotiate" module:"nokia-conf"`
	CollectStats            *bool                                                      `path:"collect-stats" module:"nokia-conf"`
	CrcMonitor              *NokiaConf_Configure_Port_Ethernet_CrcMonitor              `path:"crc-monitor" module:"nokia-conf"`
	Dampening               *NokiaConf_Configure_Port_Ethernet_Dampening               `path:"dampening" module:"nokia-conf"`
	DiscardRxPauseFrames    *bool                                                      `path:"discard-rx-pause-frames" module:"nokia-conf"`
	Dot1QEtype              *string                                                    `path:"dot1q-etype" module:"nokia-conf"`
	Dot1X                   *NokiaConf_Configure_Port_Ethernet_Dot1X                   `path:"dot1x" module:"nokia-conf"`
	DownOnInternalError     *NokiaConf_Configure_Port_Ethernet_DownOnInternalError     `path:"down-on-internal-error" module:"nokia-conf" yangPresence:"true"`
	DownWhenLooped          *NokiaConf_Configure_Port_Ethernet_DownWhenLooped          `path:"down-when-looped" module:"nokia-conf"`
	Duplex                  E_NokiaTypesPort_DuplexMode                                `path:"duplex" module:"nokia-conf"`
	EfmOam                  *NokiaConf_Configure_Port_Ethernet_EfmOam                  `path:"efm-oam" module:"nokia-conf"`
	Egress                  *NokiaConf_Configure_Port_Ethernet_Egress                  `path:"egress" module:"nokia-conf"`
	Elmi                    *NokiaConf_Configure_Port_Ethernet_Elmi                    `path:"elmi" module:"nokia-conf"`
	EncapType               E_NokiaTypesPort_EthernetEncapType                         `path:"encap-type" module:"nokia-conf"`
	EthCfm                  *NokiaConf_Configure_Port_Ethernet_EthCfm                  `path:"eth-cfm" module:"nokia-conf"`
	HoldTime                *NokiaConf_Configure_Port_Ethernet_HoldTime                `path:"hold-time" module:"nokia-conf"`
	HsmdaSchedulerOverrides *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides `path:"hsmda-scheduler-overrides" module:"nokia-conf" yangPresence:"true"`
	Ingress                 *NokiaConf_Configure_Port_Ethernet_Ingress                 `path:"ingress" module:"nokia-conf"`
	LacpTunnel              *bool                                                      `path:"lacp-tunnel" module:"nokia-conf"`
	Lldp                    *NokiaConf_Configure_Port_Ethernet_Lldp                    `path:"lldp" module:"nokia-conf"`
	LoadBalancingAlgorithm  E_NokiaTypesPort_LoadBalancingAlgorithm                    `path:"load-balancing-algorithm" module:"nokia-conf"`
	Loopback                *NokiaConf_Configure_Port_Ethernet_Loopback                `path:"loopback" module:"nokia-conf"`
	MacAddress              *string                                                    `path:"mac-address" module:"nokia-conf"`
	MinFrameLength          *uint32                                                    `path:"min-frame-length" module:"nokia-conf"`
	Mode                    E_NokiaTypesPort_Mode                                      `path:"mode" module:"nokia-conf"`
	Mtu                     *uint32                                                    `path:"mtu" module:"nokia-conf"`
	Network                 *NokiaConf_Configure_Port_Ethernet_Network                 `path:"network" module:"nokia-conf"`
	PbbEtype                *string                                                    `path:"pbb-etype" module:"nokia-conf"`
	PtpAsymmetry            *int32                                                     `path:"ptp-asymmetry" module:"nokia-conf"`
	QinqEtype               *string                                                    `path:"qinq-etype" module:"nokia-conf"`
	ReportAlarm             *NokiaConf_Configure_Port_Ethernet_ReportAlarm             `path:"report-alarm" module:"nokia-conf"`
	RsFecMode               E_NokiaConf_Configure_Port_Ethernet_RsFecMode              `path:"rs-fec-mode" module:"nokia-conf"`
	SingleFiber             *bool                                                      `path:"single-fiber" module:"nokia-conf"`
	Speed                   *uint32                                                    `path:"speed" module:"nokia-conf"`
	Ssm                     *NokiaConf_Configure_Port_Ethernet_Ssm                     `path:"ssm" module:"nokia-conf"`
	SymbolMonitor           *NokiaConf_Configure_Port_Ethernet_SymbolMonitor           `path:"symbol-monitor" module:"nokia-conf"`
	UtilStatsInterval       *uint32                                                    `path:"util-stats-interval" module:"nokia-conf"`
	Xgig                    E_NokiaConf_Configure_Port_Ethernet_Xgig                   `path:"xgig" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateAccess() *NokiaConf_Configure_Port_Ethernet_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Port_Ethernet_Access{}
	return t.Access
}

// GetOrCreateCrcMonitor retrieves the value of the CrcMonitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateCrcMonitor() *NokiaConf_Configure_Port_Ethernet_CrcMonitor {
	if t.CrcMonitor != nil {
		return t.CrcMonitor
	}
	t.CrcMonitor = &NokiaConf_Configure_Port_Ethernet_CrcMonitor{}
	return t.CrcMonitor
}

// GetOrCreateDampening retrieves the value of the Dampening field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateDampening() *NokiaConf_Configure_Port_Ethernet_Dampening {
	if t.Dampening != nil {
		return t.Dampening
	}
	t.Dampening = &NokiaConf_Configure_Port_Ethernet_Dampening{}
	return t.Dampening
}

// GetOrCreateDot1X retrieves the value of the Dot1X field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateDot1X() *NokiaConf_Configure_Port_Ethernet_Dot1X {
	if t.Dot1X != nil {
		return t.Dot1X
	}
	t.Dot1X = &NokiaConf_Configure_Port_Ethernet_Dot1X{}
	return t.Dot1X
}

// GetOrCreateDownOnInternalError retrieves the value of the DownOnInternalError field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateDownOnInternalError() *NokiaConf_Configure_Port_Ethernet_DownOnInternalError {
	if t.DownOnInternalError != nil {
		return t.DownOnInternalError
	}
	t.DownOnInternalError = &NokiaConf_Configure_Port_Ethernet_DownOnInternalError{}
	return t.DownOnInternalError
}

// GetOrCreateDownWhenLooped retrieves the value of the DownWhenLooped field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateDownWhenLooped() *NokiaConf_Configure_Port_Ethernet_DownWhenLooped {
	if t.DownWhenLooped != nil {
		return t.DownWhenLooped
	}
	t.DownWhenLooped = &NokiaConf_Configure_Port_Ethernet_DownWhenLooped{}
	return t.DownWhenLooped
}

// GetOrCreateEfmOam retrieves the value of the EfmOam field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateEfmOam() *NokiaConf_Configure_Port_Ethernet_EfmOam {
	if t.EfmOam != nil {
		return t.EfmOam
	}
	t.EfmOam = &NokiaConf_Configure_Port_Ethernet_EfmOam{}
	return t.EfmOam
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateEgress() *NokiaConf_Configure_Port_Ethernet_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Ethernet_Egress{}
	return t.Egress
}

// GetOrCreateElmi retrieves the value of the Elmi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateElmi() *NokiaConf_Configure_Port_Ethernet_Elmi {
	if t.Elmi != nil {
		return t.Elmi
	}
	t.Elmi = &NokiaConf_Configure_Port_Ethernet_Elmi{}
	return t.Elmi
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateEthCfm() *NokiaConf_Configure_Port_Ethernet_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Port_Ethernet_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateHoldTime() *NokiaConf_Configure_Port_Ethernet_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Port_Ethernet_HoldTime{}
	return t.HoldTime
}

// GetOrCreateHsmdaSchedulerOverrides retrieves the value of the HsmdaSchedulerOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateHsmdaSchedulerOverrides() *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides {
	if t.HsmdaSchedulerOverrides != nil {
		return t.HsmdaSchedulerOverrides
	}
	t.HsmdaSchedulerOverrides = &NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides{}
	return t.HsmdaSchedulerOverrides
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateIngress() *NokiaConf_Configure_Port_Ethernet_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Port_Ethernet_Ingress{}
	return t.Ingress
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateLldp() *NokiaConf_Configure_Port_Ethernet_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &NokiaConf_Configure_Port_Ethernet_Lldp{}
	return t.Lldp
}

// GetOrCreateLoopback retrieves the value of the Loopback field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateLoopback() *NokiaConf_Configure_Port_Ethernet_Loopback {
	if t.Loopback != nil {
		return t.Loopback
	}
	t.Loopback = &NokiaConf_Configure_Port_Ethernet_Loopback{}
	return t.Loopback
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateNetwork() *NokiaConf_Configure_Port_Ethernet_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_Ethernet_Network{}
	return t.Network
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Ethernet_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Ethernet_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateSsm() *NokiaConf_Configure_Port_Ethernet_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &NokiaConf_Configure_Port_Ethernet_Ssm{}
	return t.Ssm
}

// GetOrCreateSymbolMonitor retrieves the value of the SymbolMonitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet) GetOrCreateSymbolMonitor() *NokiaConf_Configure_Port_Ethernet_SymbolMonitor {
	if t.SymbolMonitor != nil {
		return t.SymbolMonitor
	}
	t.SymbolMonitor = &NokiaConf_Configure_Port_Ethernet_SymbolMonitor{}
	return t.SymbolMonitor
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetAccess() *NokiaConf_Configure_Port_Ethernet_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetCrcMonitor returns the value of the CrcMonitor struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field CrcMonitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetCrcMonitor() *NokiaConf_Configure_Port_Ethernet_CrcMonitor {
	if t != nil && t.CrcMonitor != nil {
		return t.CrcMonitor
	}
	return nil
}

// GetDampening returns the value of the Dampening struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Dampening is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetDampening() *NokiaConf_Configure_Port_Ethernet_Dampening {
	if t != nil && t.Dampening != nil {
		return t.Dampening
	}
	return nil
}

// GetDot1X returns the value of the Dot1X struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Dot1X is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetDot1X() *NokiaConf_Configure_Port_Ethernet_Dot1X {
	if t != nil && t.Dot1X != nil {
		return t.Dot1X
	}
	return nil
}

// GetDownOnInternalError returns the value of the DownOnInternalError struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field DownOnInternalError is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetDownOnInternalError() *NokiaConf_Configure_Port_Ethernet_DownOnInternalError {
	if t != nil && t.DownOnInternalError != nil {
		return t.DownOnInternalError
	}
	return nil
}

// GetDownWhenLooped returns the value of the DownWhenLooped struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field DownWhenLooped is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetDownWhenLooped() *NokiaConf_Configure_Port_Ethernet_DownWhenLooped {
	if t != nil && t.DownWhenLooped != nil {
		return t.DownWhenLooped
	}
	return nil
}

// GetEfmOam returns the value of the EfmOam struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field EfmOam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetEfmOam() *NokiaConf_Configure_Port_Ethernet_EfmOam {
	if t != nil && t.EfmOam != nil {
		return t.EfmOam
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetEgress() *NokiaConf_Configure_Port_Ethernet_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetElmi returns the value of the Elmi struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Elmi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetElmi() *NokiaConf_Configure_Port_Ethernet_Elmi {
	if t != nil && t.Elmi != nil {
		return t.Elmi
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetEthCfm() *NokiaConf_Configure_Port_Ethernet_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetHoldTime() *NokiaConf_Configure_Port_Ethernet_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetHsmdaSchedulerOverrides returns the value of the HsmdaSchedulerOverrides struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field HsmdaSchedulerOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetHsmdaSchedulerOverrides() *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides {
	if t != nil && t.HsmdaSchedulerOverrides != nil {
		return t.HsmdaSchedulerOverrides
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetIngress() *NokiaConf_Configure_Port_Ethernet_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetLldp() *NokiaConf_Configure_Port_Ethernet_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetLoopback returns the value of the Loopback struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Loopback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetLoopback() *NokiaConf_Configure_Port_Ethernet_Loopback {
	if t != nil && t.Loopback != nil {
		return t.Loopback
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetNetwork() *NokiaConf_Configure_Port_Ethernet_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetReportAlarm() *NokiaConf_Configure_Port_Ethernet_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetSsm() *NokiaConf_Configure_Port_Ethernet_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetSymbolMonitor returns the value of the SymbolMonitor struct pointer
// from NokiaConf_Configure_Port_Ethernet. If the receiver or the field SymbolMonitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet) GetSymbolMonitor() *NokiaConf_Configure_Port_Ethernet_SymbolMonitor {
	if t != nil && t.SymbolMonitor != nil {
		return t.SymbolMonitor
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutonegotiate retrieves the value of the leaf Autonegotiate from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonegotiate is set, it can
// safely use t.GetAutonegotiate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonegotiate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetAutonegotiate() E_NokiaConf_Configure_Port_Ethernet_Autonegotiate {
	if t == nil || t.Autonegotiate == 0 {
		return 0
	}
	return t.Autonegotiate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDiscardRxPauseFrames retrieves the value of the leaf DiscardRxPauseFrames from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardRxPauseFrames is set, it can
// safely use t.GetDiscardRxPauseFrames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardRxPauseFrames == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetDiscardRxPauseFrames() bool {
	if t == nil || t.DiscardRxPauseFrames == nil {
		return false
	}
	return *t.DiscardRxPauseFrames
}

// GetDot1QEtype retrieves the value of the leaf Dot1QEtype from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1QEtype is set, it can
// safely use t.GetDot1QEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1QEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetDot1QEtype() string {
	if t == nil || t.Dot1QEtype == nil {
		return "33024"
	}
	return *t.Dot1QEtype
}

// GetDuplex retrieves the value of the leaf Duplex from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duplex is set, it can
// safely use t.GetDuplex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duplex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetDuplex() E_NokiaTypesPort_DuplexMode {
	if t == nil || t.Duplex == 0 {
		return 0
	}
	return t.Duplex
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetEncapType() E_NokiaTypesPort_EthernetEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetLacpTunnel retrieves the value of the leaf LacpTunnel from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpTunnel is set, it can
// safely use t.GetLacpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetLacpTunnel() bool {
	if t == nil || t.LacpTunnel == nil {
		return false
	}
	return *t.LacpTunnel
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMinFrameLength retrieves the value of the leaf MinFrameLength from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinFrameLength is set, it can
// safely use t.GetMinFrameLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinFrameLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetMinFrameLength() uint32 {
	if t == nil || t.MinFrameLength == nil {
		return 64
	}
	return *t.MinFrameLength
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetMode() E_NokiaTypesPort_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPbbEtype retrieves the value of the leaf PbbEtype from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbbEtype is set, it can
// safely use t.GetPbbEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbbEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetPbbEtype() string {
	if t == nil || t.PbbEtype == nil {
		return "35047"
	}
	return *t.PbbEtype
}

// GetPtpAsymmetry retrieves the value of the leaf PtpAsymmetry from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PtpAsymmetry is set, it can
// safely use t.GetPtpAsymmetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PtpAsymmetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetPtpAsymmetry() int32 {
	if t == nil || t.PtpAsymmetry == nil {
		return 0
	}
	return *t.PtpAsymmetry
}

// GetQinqEtype retrieves the value of the leaf QinqEtype from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqEtype is set, it can
// safely use t.GetQinqEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetQinqEtype() string {
	if t == nil || t.QinqEtype == nil {
		return "33024"
	}
	return *t.QinqEtype
}

// GetRsFecMode retrieves the value of the leaf RsFecMode from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsFecMode is set, it can
// safely use t.GetRsFecMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsFecMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetRsFecMode() E_NokiaConf_Configure_Port_Ethernet_RsFecMode {
	if t == nil || t.RsFecMode == 0 {
		return 0
	}
	return t.RsFecMode
}

// GetSingleFiber retrieves the value of the leaf SingleFiber from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleFiber is set, it can
// safely use t.GetSingleFiber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleFiber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetSingleFiber() bool {
	if t == nil || t.SingleFiber == nil {
		return false
	}
	return *t.SingleFiber
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetSpeed() uint32 {
	if t == nil || t.Speed == nil {
		return 0
	}
	return *t.Speed
}

// GetUtilStatsInterval retrieves the value of the leaf UtilStatsInterval from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UtilStatsInterval is set, it can
// safely use t.GetUtilStatsInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UtilStatsInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetUtilStatsInterval() uint32 {
	if t == nil || t.UtilStatsInterval == nil {
		return 300
	}
	return *t.UtilStatsInterval
}

// GetXgig retrieves the value of the leaf Xgig from the NokiaConf_Configure_Port_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Xgig is set, it can
// safely use t.GetXgig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Xgig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet) GetXgig() E_NokiaConf_Configure_Port_Ethernet_Xgig {
	if t == nil || t.Xgig == 0 {
		return 0
	}
	return t.Xgig
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.DiscardRxPauseFrames == nil {
		var v bool = false
		t.DiscardRxPauseFrames = &v
	}
	if t.Dot1QEtype == nil {
		var v string = "33024"
		t.Dot1QEtype = &v
	}
	if t.LacpTunnel == nil {
		var v bool = false
		t.LacpTunnel = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.MinFrameLength == nil {
		var v uint32 = 64
		t.MinFrameLength = &v
	}
	if t.PbbEtype == nil {
		var v string = "35047"
		t.PbbEtype = &v
	}
	if t.QinqEtype == nil {
		var v string = "33024"
		t.QinqEtype = &v
	}
	if t.SingleFiber == nil {
		var v bool = false
		t.SingleFiber = &v
	}
	if t.UtilStatsInterval == nil {
		var v uint32 = 300
		t.UtilStatsInterval = &v
	}
	t.Access.PopulateDefaults()
	t.CrcMonitor.PopulateDefaults()
	t.Dampening.PopulateDefaults()
	t.Dot1X.PopulateDefaults()
	t.DownOnInternalError.PopulateDefaults()
	t.DownWhenLooped.PopulateDefaults()
	t.EfmOam.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Elmi.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.HsmdaSchedulerOverrides.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.Loopback.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.Ssm.PopulateDefaults()
	t.SymbolMonitor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet.
func (*NokiaConf_Configure_Port_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access represents the /nokia-conf/configure/port/ethernet/access YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access struct {
	AccountingPolicy   *uint32                                           `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint64                                           `path:"bandwidth" module:"nokia-conf"`
	BookingFactor      *uint32                                           `path:"booking-factor" module:"nokia-conf"`
	CollectStats       *bool                                             `path:"collect-stats" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Port_Ethernet_Access_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Port_Ethernet_Access_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetOrCreateEgress() *NokiaConf_Configure_Port_Ethernet_Access_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Ethernet_Access_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetOrCreateIngress() *NokiaConf_Configure_Port_Ethernet_Access_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Port_Ethernet_Access_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetEgress() *NokiaConf_Configure_Port_Ethernet_Access_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetIngress() *NokiaConf_Configure_Port_Ethernet_Access_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetBookingFactor retrieves the value of the leaf BookingFactor from the NokiaConf_Configure_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BookingFactor is set, it can
// safely use t.GetBookingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BookingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetBookingFactor() uint32 {
	if t == nil || t.BookingFactor == nil {
		return 100
	}
	return *t.BookingFactor
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Ethernet_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BookingFactor == nil {
		var v uint32 = 100
		t.BookingFactor = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access.
func (*NokiaConf_Configure_Port_Ethernet_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress represents the /nokia-conf/configure/port/ethernet/access/egress YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress struct {
	QueueGroup  map[NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup `path:"queue-group" module:"nokia-conf"`
	VirtualPort map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort                                                        `path:"virtual-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress) IsYANGGoStruct() {}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/port/ethernet/access/egress.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key struct {
	QueueGroupName string `path:"queue-group-name"`
	InstanceId     uint16 `path:"instance-id"`
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) NewQueueGroup(QueueGroupName string, InstanceId uint16) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup)
	}

	key := NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     &InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) RenameQueueGroup(oldK, newK NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = &newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) GetOrCreateQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup {

	key := NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Port_Ethernet_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) GetQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) DeleteQueueGroup(QueueGroupName string, InstanceId uint16) {
	key := NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Port_Ethernet_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) AppendQueueGroup(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key for InstanceId")
	}

	key := NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     *v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_Key]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// NewVirtualPort creates a new entry in the VirtualPort list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) NewVirtualPort(VportName string) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualPort == nil {
		t.VirtualPort = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort)
	}

	key := VportName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualPort", key)
	}

	t.VirtualPort[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort{
		VportName: &VportName,
	}

	return t.VirtualPort[key], nil
}

// RenameVirtualPort renames an entry in the list VirtualPort within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) RenameVirtualPort(oldK, newK string) error {
	if _, ok := t.VirtualPort[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualPort", newK)
	}

	e, ok := t.VirtualPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualPort", oldK)
	}
	e.VportName = &newK

	t.VirtualPort[newK] = e
	delete(t.VirtualPort, oldK)
	return nil
}

// GetOrCreateVirtualPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) GetOrCreateVirtualPort(VportName string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort {

	key := VportName

	if v, ok := t.VirtualPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualPort(VportName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualPort got unexpected error: %v", err))
	}
	return v
}

// GetVirtualPort retrieves the value with the specified key from
// the VirtualPort map field of NokiaConf_Configure_Port_Ethernet_Access_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) GetVirtualPort(VportName string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort {

	if t == nil {
		return nil
	}

	key := VportName

	if lm, ok := t.VirtualPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) DeleteVirtualPort(VportName string) {
	key := VportName

	delete(t.VirtualPort, key)
}

// AppendVirtualPort appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort struct to the
// list VirtualPort of NokiaConf_Configure_Port_Ethernet_Access_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) AppendVirtualPort(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) error {
	if v.VportName == nil {
		return fmt.Errorf("invalid nil key received for VportName")
	}

	key := *v.VportName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualPort == nil {
		t.VirtualPort = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort)
	}

	if _, ok := t.VirtualPort[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualPort %v", key)
	}

	t.VirtualPort[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.VirtualPort {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup struct {
	AccountingPolicy    *uint32                                                                         `path:"accounting-policy" module:"nokia-conf"`
	AggregateRate       *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate       `path:"aggregate-rate" module:"nokia-conf"`
	ApplyGroups         []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats        *bool                                                                           `path:"collect-stats" module:"nokia-conf"`
	Description         *string                                                                         `path:"description" module:"nokia-conf"`
	HostMatch           *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch           `path:"host-match" module:"nokia-conf"`
	HsTurbo             *bool                                                                           `path:"hs-turbo" module:"nokia-conf"`
	HsmdaQueueOverrides *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides `path:"hsmda-queue-overrides" module:"nokia-conf"`
	InstanceId          *uint16                                                                         `path:"instance-id" module:"nokia-conf"`
	QueueGroupName      *string                                                                         `path:"queue-group-name" module:"nokia-conf"`
	QueueOverrides      *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides      `path:"queue-overrides" module:"nokia-conf"`
	SchedulerPolicy     *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy     `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) IsYANGGoStruct() {}

// GetOrCreateAggregateRate retrieves the value of the AggregateRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateAggregateRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate {
	if t.AggregateRate != nil {
		return t.AggregateRate
	}
	t.AggregateRate = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate{}
	return t.AggregateRate
}

// GetOrCreateHostMatch retrieves the value of the HostMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateHostMatch() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch {
	if t.HostMatch != nil {
		return t.HostMatch
	}
	t.HostMatch = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch{}
	return t.HostMatch
}

// GetOrCreateHsmdaQueueOverrides retrieves the value of the HsmdaQueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateHsmdaQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides {
	if t.HsmdaQueueOverrides != nil {
		return t.HsmdaQueueOverrides
	}
	t.HsmdaQueueOverrides = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides{}
	return t.HsmdaQueueOverrides
}

// GetOrCreateQueueOverrides retrieves the value of the QueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides {
	if t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	t.QueueOverrides = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides{}
	return t.QueueOverrides
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggregateRate returns the value of the AggregateRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field AggregateRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetAggregateRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate {
	if t != nil && t.AggregateRate != nil {
		return t.AggregateRate
	}
	return nil
}

// GetHostMatch returns the value of the HostMatch struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field HostMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetHostMatch() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch {
	if t != nil && t.HostMatch != nil {
		return t.HostMatch
	}
	return nil
}

// GetHsmdaQueueOverrides returns the value of the HsmdaQueueOverrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field HsmdaQueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetHsmdaQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides {
	if t != nil && t.HsmdaQueueOverrides != nil {
		return t.HsmdaQueueOverrides
	}
	return nil
}

// GetQueueOverrides returns the value of the QueueOverrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field QueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides {
	if t != nil && t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsTurbo retrieves the value of the leaf HsTurbo from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsTurbo is set, it can
// safely use t.GetHsTurbo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsTurbo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetHsTurbo() bool {
	if t == nil || t.HsTurbo == nil {
		return false
	}
	return *t.HsTurbo
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetInstanceId() uint16 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HsTurbo == nil {
		var v bool = false
		t.HsTurbo = &v
	}
	t.AggregateRate.PopulateDefaults()
	t.HostMatch.PopulateDefaults()
	t.HsmdaQueueOverrides.PopulateDefaults()
	t.QueueOverrides.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      *t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/aggregate-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate struct {
	LimitUnusedBandwidth      *bool                                                                               `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                               `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) IsYANGGoStruct() {}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) GetRate() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_AggregateRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/host-match YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch struct {
	IntDestId map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId `path:"int-dest-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) IsYANGGoStruct() {}

// NewIntDestId creates a new entry in the IntDestId list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) NewIntDestId(DestinationString string) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId)
	}

	key := DestinationString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IntDestId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IntDestId", key)
	}

	t.IntDestId[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId{
		DestinationString: &DestinationString,
	}

	return t.IntDestId[key], nil
}

// RenameIntDestId renames an entry in the list IntDestId within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) RenameIntDestId(oldK, newK string) error {
	if _, ok := t.IntDestId[newK]; ok {
		return fmt.Errorf("key %v already exists in IntDestId", newK)
	}

	e, ok := t.IntDestId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IntDestId", oldK)
	}
	e.DestinationString = &newK

	t.IntDestId[newK] = e
	delete(t.IntDestId, oldK)
	return nil
}

// GetOrCreateIntDestId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) GetOrCreateIntDestId(DestinationString string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId {

	key := DestinationString

	if v, ok := t.IntDestId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIntDestId(DestinationString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIntDestId got unexpected error: %v", err))
	}
	return v
}

// GetIntDestId retrieves the value with the specified key from
// the IntDestId map field of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) GetIntDestId(DestinationString string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId {

	if t == nil {
		return nil
	}

	key := DestinationString

	if lm, ok := t.IntDestId[key]; ok {
		return lm
	}
	return nil
}

// DeleteIntDestId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) DeleteIntDestId(DestinationString string) {
	key := DestinationString

	delete(t.IntDestId, key)
}

// AppendIntDestId appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId struct to the
// list IntDestId of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) AppendIntDestId(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) error {
	if v.DestinationString == nil {
		return fmt.Errorf("invalid nil key received for DestinationString")
	}

	key := *v.DestinationString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId)
	}

	if _, ok := t.IntDestId[key]; ok {
		return fmt.Errorf("duplicate key for list IntDestId %v", key)
	}

	t.IntDestId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IntDestId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/host-match/int-dest-id YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId struct {
	DestinationString *string `path:"destination-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) IsYANGGoStruct() {
}

// GetDestinationString retrieves the value of the leaf DestinationString from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationString is set, it can
// safely use t.GetDestinationString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) GetDestinationString() string {
	if t == nil || t.DestinationString == nil {
		return ""
	}
	return *t.DestinationString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationString == nil {
		return nil, fmt.Errorf("nil value for key DestinationString")
	}

	return map[string]interface{}{
		"destination-string": *t.DestinationString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HostMatch_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/hsmda-queue-overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides struct {
	PacketByteOffset *int32                                                                                          `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                         `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                         `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) AppendQueue(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/hsmda-queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                          `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                         `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *int32                                                                                          `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetMbs() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetRate() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_HsmdaQueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides struct {
	Queue map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) GetQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) AppendQueue(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                              `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                             `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetDropTail() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetParent() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetPercentRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetBurstLimit() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetCbs() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetMbs() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/queue-overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetCir() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetPir() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                                `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/port/ethernet/access/egress/queue-group/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort represents the /nokia-conf/configure/port/ethernet/access/egress/virtual-port YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort struct {
	AggregateRate               *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate   `path:"aggregate-rate" module:"nokia-conf"`
	ApplyGroups                 []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description                 *string                                                                      `path:"description" module:"nokia-conf"`
	HostMatch                   *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch       `path:"host-match" module:"nokia-conf"`
	HwAggShaperSchedulerPolicy  *string                                                                      `path:"hw-agg-shaper-scheduler-policy" module:"nokia-conf"`
	MonitorHwAggShaperScheduler *bool                                                                        `path:"monitor-hw-agg-shaper-scheduler" module:"nokia-conf"`
	MonitorPortScheduler        *bool                                                                        `path:"monitor-port-scheduler" module:"nokia-conf"`
	MulticastHqosAdjustment     *bool                                                                        `path:"multicast-hqos-adjustment" module:"nokia-conf"`
	PortSchedulerPolicy         *string                                                                      `path:"port-scheduler-policy" module:"nokia-conf"`
	SchedulerPolicy             *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
	VportName                   *string                                                                      `path:"vport-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) IsYANGGoStruct() {}

// GetOrCreateAggregateRate retrieves the value of the AggregateRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetOrCreateAggregateRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate {
	if t.AggregateRate != nil {
		return t.AggregateRate
	}
	t.AggregateRate = &NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate{}
	return t.AggregateRate
}

// GetOrCreateHostMatch retrieves the value of the HostMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetOrCreateHostMatch() *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch {
	if t.HostMatch != nil {
		return t.HostMatch
	}
	t.HostMatch = &NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch{}
	return t.HostMatch
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggregateRate returns the value of the AggregateRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort. If the receiver or the field AggregateRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetAggregateRate() *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate {
	if t != nil && t.AggregateRate != nil {
		return t.AggregateRate
	}
	return nil
}

// GetHostMatch returns the value of the HostMatch struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort. If the receiver or the field HostMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetHostMatch() *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch {
	if t != nil && t.HostMatch != nil {
		return t.HostMatch
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHwAggShaperSchedulerPolicy retrieves the value of the leaf HwAggShaperSchedulerPolicy from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HwAggShaperSchedulerPolicy is set, it can
// safely use t.GetHwAggShaperSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HwAggShaperSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetHwAggShaperSchedulerPolicy() string {
	if t == nil || t.HwAggShaperSchedulerPolicy == nil {
		return ""
	}
	return *t.HwAggShaperSchedulerPolicy
}

// GetMonitorHwAggShaperScheduler retrieves the value of the leaf MonitorHwAggShaperScheduler from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorHwAggShaperScheduler is set, it can
// safely use t.GetMonitorHwAggShaperScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorHwAggShaperScheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetMonitorHwAggShaperScheduler() bool {
	if t == nil || t.MonitorHwAggShaperScheduler == nil {
		return false
	}
	return *t.MonitorHwAggShaperScheduler
}

// GetMonitorPortScheduler retrieves the value of the leaf MonitorPortScheduler from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorPortScheduler is set, it can
// safely use t.GetMonitorPortScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorPortScheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetMonitorPortScheduler() bool {
	if t == nil || t.MonitorPortScheduler == nil {
		return false
	}
	return *t.MonitorPortScheduler
}

// GetMulticastHqosAdjustment retrieves the value of the leaf MulticastHqosAdjustment from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastHqosAdjustment is set, it can
// safely use t.GetMulticastHqosAdjustment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastHqosAdjustment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetMulticastHqosAdjustment() bool {
	if t == nil || t.MulticastHqosAdjustment == nil {
		return false
	}
	return *t.MulticastHqosAdjustment
}

// GetPortSchedulerPolicy retrieves the value of the leaf PortSchedulerPolicy from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSchedulerPolicy is set, it can
// safely use t.GetPortSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetPortSchedulerPolicy() string {
	if t == nil || t.PortSchedulerPolicy == nil {
		return ""
	}
	return *t.PortSchedulerPolicy
}

// GetVportName retrieves the value of the leaf VportName from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VportName is set, it can
// safely use t.GetVportName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VportName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) GetVportName() string {
	if t == nil || t.VportName == nil {
		return ""
	}
	return *t.VportName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorHwAggShaperScheduler == nil {
		var v bool = false
		t.MonitorHwAggShaperScheduler = &v
	}
	if t.MonitorPortScheduler == nil {
		var v bool = false
		t.MonitorPortScheduler = &v
	}
	if t.MulticastHqosAdjustment == nil {
		var v bool = false
		t.MulticastHqosAdjustment = &v
	}
	t.AggregateRate.PopulateDefaults()
	t.HostMatch.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VportName == nil {
		return nil, fmt.Errorf("nil value for key VportName")
	}

	return map[string]interface{}{
		"vport-name": *t.VportName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate represents the /nokia-conf/configure/port/ethernet/access/egress/virtual-port/aggregate-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate struct {
	LimitUnusedBandwidth *bool                                                                                `path:"limit-unused-bandwidth" module:"nokia-conf"`
	Rate                 NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) IsYANGGoStruct() {}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) GetRate() NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_AggregateRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch represents the /nokia-conf/configure/port/ethernet/access/egress/virtual-port/host-match YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch struct {
	IntDestId map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId `path:"int-dest-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) IsYANGGoStruct() {}

// NewIntDestId creates a new entry in the IntDestId list of the
// NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) NewIntDestId(DestinationString string) (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId)
	}

	key := DestinationString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IntDestId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IntDestId", key)
	}

	t.IntDestId[key] = &NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId{
		DestinationString: &DestinationString,
	}

	return t.IntDestId[key], nil
}

// RenameIntDestId renames an entry in the list IntDestId within
// the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) RenameIntDestId(oldK, newK string) error {
	if _, ok := t.IntDestId[newK]; ok {
		return fmt.Errorf("key %v already exists in IntDestId", newK)
	}

	e, ok := t.IntDestId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IntDestId", oldK)
	}
	e.DestinationString = &newK

	t.IntDestId[newK] = e
	delete(t.IntDestId, oldK)
	return nil
}

// GetOrCreateIntDestId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) GetOrCreateIntDestId(DestinationString string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId {

	key := DestinationString

	if v, ok := t.IntDestId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIntDestId(DestinationString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIntDestId got unexpected error: %v", err))
	}
	return v
}

// GetIntDestId retrieves the value with the specified key from
// the IntDestId map field of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) GetIntDestId(DestinationString string) *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId {

	if t == nil {
		return nil
	}

	key := DestinationString

	if lm, ok := t.IntDestId[key]; ok {
		return lm
	}
	return nil
}

// DeleteIntDestId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) DeleteIntDestId(DestinationString string) {
	key := DestinationString

	delete(t.IntDestId, key)
}

// AppendIntDestId appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId struct to the
// list IntDestId of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) AppendIntDestId(v *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) error {
	if v.DestinationString == nil {
		return fmt.Errorf("invalid nil key received for DestinationString")
	}

	key := *v.DestinationString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IntDestId == nil {
		t.IntDestId = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId)
	}

	if _, ok := t.IntDestId[key]; ok {
		return fmt.Errorf("duplicate key for list IntDestId %v", key)
	}

	t.IntDestId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IntDestId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId represents the /nokia-conf/configure/port/ethernet/access/egress/virtual-port/host-match/int-dest-id YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId struct {
	DestinationString *string `path:"destination-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) IsYANGGoStruct() {
}

// GetDestinationString retrieves the value of the leaf DestinationString from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationString is set, it can
// safely use t.GetDestinationString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) GetDestinationString() string {
	if t == nil || t.DestinationString == nil {
		return ""
	}
	return *t.DestinationString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestinationString == nil {
		return nil, fmt.Errorf("nil value for key DestinationString")
	}

	return map[string]interface{}{
		"destination-string": *t.DestinationString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_HostMatch_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy represents the /nokia-conf/configure/port/ethernet/access/egress/virtual-port/scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Access_Egress_VirtualPort_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress represents the /nokia-conf/configure/port/ethernet/access/ingress YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress struct {
	QueueGroup map[string]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup `path:"queue-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress) IsYANGGoStruct() {}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Port_Ethernet_Access_Ingress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) NewQueueGroup(QueueGroupName string) (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup)
	}

	key := QueueGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup{
		QueueGroupName: &QueueGroupName,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Port_Ethernet_Access_Ingress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) RenameQueueGroup(oldK, newK string) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Ingress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) GetOrCreateQueueGroup(QueueGroupName string) *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup {

	key := QueueGroupName

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Port_Ethernet_Access_Ingress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) GetQueueGroup(QueueGroupName string) *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup {

	if t == nil {
		return nil
	}

	key := QueueGroupName

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Ingress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) DeleteQueueGroup(QueueGroupName string) {
	key := QueueGroupName

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Port_Ethernet_Access_Ingress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) AppendQueueGroup(v *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key received for QueueGroupName")
	}

	key := *v.QueueGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup struct {
	AccountingPolicy   *uint32                                                                      `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool                                                                        `path:"collect-stats" module:"nokia-conf"`
	Description        *string                                                                      `path:"description" module:"nokia-conf"`
	QueueGroupName     *string                                                                      `path:"queue-group-name" module:"nokia-conf"`
	QueueOverrides     *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides  `path:"queue-overrides" module:"nokia-conf"`
	SchedulerPolicy    *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) IsYANGGoStruct() {}

// GetOrCreateQueueOverrides retrieves the value of the QueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetOrCreateQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides {
	if t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	t.QueueOverrides = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides{}
	return t.QueueOverrides
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetQueueOverrides returns the value of the QueueOverrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup. If the receiver or the field QueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides {
	if t != nil && t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.QueueOverrides.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides struct {
	Queue map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) GetQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) AppendQueue(v *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                               `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	QueueId            *int32                                                                                              `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetDropTail() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetRate() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetCbs() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetMbs() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/queue-overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) GetCir() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) GetPir() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_QueueOverrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                                 `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/port/ethernet/access/ingress/queue-group/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Port_Ethernet_Access_Ingress_QueueGroup_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_CrcMonitor represents the /nokia-conf/configure/port/ethernet/crc-monitor YANG schema element.
type NokiaConf_Configure_Port_Ethernet_CrcMonitor struct {
	SignalDegrade *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure `path:"signal-failure" module:"nokia-conf"`
	WindowSize    *uint32                                                     `path:"window-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_CrcMonitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_CrcMonitor) IsYANGGoStruct() {}

// GetOrCreateSignalDegrade retrieves the value of the SignalDegrade field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) GetOrCreateSignalDegrade() *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade {
	if t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	t.SignalDegrade = &NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade{}
	return t.SignalDegrade
}

// GetOrCreateSignalFailure retrieves the value of the SignalFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) GetOrCreateSignalFailure() *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure {
	if t.SignalFailure != nil {
		return t.SignalFailure
	}
	t.SignalFailure = &NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure{}
	return t.SignalFailure
}

// GetSignalDegrade returns the value of the SignalDegrade struct pointer
// from NokiaConf_Configure_Port_Ethernet_CrcMonitor. If the receiver or the field SignalDegrade is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) GetSignalDegrade() *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade {
	if t != nil && t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	return nil
}

// GetSignalFailure returns the value of the SignalFailure struct pointer
// from NokiaConf_Configure_Port_Ethernet_CrcMonitor. If the receiver or the field SignalFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) GetSignalFailure() *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure {
	if t != nil && t.SignalFailure != nil {
		return t.SignalFailure
	}
	return nil
}

// GetWindowSize retrieves the value of the leaf WindowSize from the NokiaConf_Configure_Port_Ethernet_CrcMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowSize is set, it can
// safely use t.GetWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) GetWindowSize() uint32 {
	if t == nil || t.WindowSize == nil {
		return 10
	}
	return *t.WindowSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_CrcMonitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WindowSize == nil {
		var v uint32 = 10
		t.WindowSize = &v
	}
	t.SignalDegrade.PopulateDefaults()
	t.SignalFailure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_CrcMonitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_CrcMonitor.
func (*NokiaConf_Configure_Port_Ethernet_CrcMonitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade represents the /nokia-conf/configure/port/ethernet/crc-monitor/signal-degrade YANG schema element.
type NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade.
func (*NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalDegrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure represents the /nokia-conf/configure/port/ethernet/crc-monitor/signal-failure YANG schema element.
type NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure.
func (*NokiaConf_Configure_Port_Ethernet_CrcMonitor_SignalFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dampening represents the /nokia-conf/configure/port/ethernet/dampening YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dampening struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	HalfLife           *uint32                     `path:"half-life" module:"nokia-conf"`
	MaxSuppressTime    *uint32                     `path:"max-suppress-time" module:"nokia-conf"`
	ReuseThreshold     *uint32                     `path:"reuse-threshold" module:"nokia-conf"`
	SuppressThreshold  *uint32                     `path:"suppress-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dampening implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dampening) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHalfLife retrieves the value of the leaf HalfLife from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLife is set, it can
// safely use t.GetHalfLife() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLife == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetHalfLife() uint32 {
	if t == nil || t.HalfLife == nil {
		return 5
	}
	return *t.HalfLife
}

// GetMaxSuppressTime retrieves the value of the leaf MaxSuppressTime from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSuppressTime is set, it can
// safely use t.GetMaxSuppressTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSuppressTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetMaxSuppressTime() uint32 {
	if t == nil || t.MaxSuppressTime == nil {
		return 20
	}
	return *t.MaxSuppressTime
}

// GetReuseThreshold retrieves the value of the leaf ReuseThreshold from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReuseThreshold is set, it can
// safely use t.GetReuseThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReuseThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetReuseThreshold() uint32 {
	if t == nil || t.ReuseThreshold == nil {
		return 1000
	}
	return *t.ReuseThreshold
}

// GetSuppressThreshold retrieves the value of the leaf SuppressThreshold from the NokiaConf_Configure_Port_Ethernet_Dampening
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressThreshold is set, it can
// safely use t.GetSuppressThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) GetSuppressThreshold() uint32 {
	if t == nil || t.SuppressThreshold == nil {
		return 2000
	}
	return *t.SuppressThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dampening
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HalfLife == nil {
		var v uint32 = 5
		t.HalfLife = &v
	}
	if t.MaxSuppressTime == nil {
		var v uint32 = 20
		t.MaxSuppressTime = &v
	}
	if t.ReuseThreshold == nil {
		var v uint32 = 1000
		t.ReuseThreshold = &v
	}
	if t.SuppressThreshold == nil {
		var v uint32 = 2000
		t.SuppressThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dampening"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dampening) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dampening.
func (*NokiaConf_Configure_Port_Ethernet_Dampening) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X represents the /nokia-conf/configure/port/ethernet/dot1x YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X struct {
	AdminState                E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Macsec                    *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec                `path:"macsec" module:"nokia-conf"`
	MaxAuthenticationRequests *uint32                                                        `path:"max-authentication-requests" module:"nokia-conf"`
	PerHostAuthentication     *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication `path:"per-host-authentication" module:"nokia-conf"`
	PortControl               E_NokiaTypesPort_PaeControlledPortControl                      `path:"port-control" module:"nokia-conf"`
	QuietPeriod               *uint32                                                        `path:"quiet-period" module:"nokia-conf"`
	RadiusPolicy              *string                                                        `path:"radius-policy" module:"nokia-conf"`
	RadiusServerPolicy        *string                                                        `path:"radius-server-policy" module:"nokia-conf"`
	RadiusServerPolicyAcct    *string                                                        `path:"radius-server-policy-acct" module:"nokia-conf"`
	RadiusServerPolicyAuth    *string                                                        `path:"radius-server-policy-auth" module:"nokia-conf"`
	ReAuthentication          *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication      `path:"re-authentication" module:"nokia-conf" yangPresence:"true"`
	ServerTimeout             *uint32                                                        `path:"server-timeout" module:"nokia-conf"`
	SupplicantTimeout         *uint32                                                        `path:"supplicant-timeout" module:"nokia-conf"`
	TransmitPeriod            *uint32                                                        `path:"transmit-period" module:"nokia-conf"`
	TunnelDot1Q               *bool                                                          `path:"tunnel-dot1q" module:"nokia-conf"`
	TunnelQinq                *bool                                                          `path:"tunnel-qinq" module:"nokia-conf"`
	Tunneling                 *bool                                                          `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X) IsYANGGoStruct() {}

// GetOrCreateMacsec retrieves the value of the Macsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetOrCreateMacsec() *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec {
	if t.Macsec != nil {
		return t.Macsec
	}
	t.Macsec = &NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec{}
	return t.Macsec
}

// GetOrCreatePerHostAuthentication retrieves the value of the PerHostAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetOrCreatePerHostAuthentication() *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication {
	if t.PerHostAuthentication != nil {
		return t.PerHostAuthentication
	}
	t.PerHostAuthentication = &NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication{}
	return t.PerHostAuthentication
}

// GetOrCreateReAuthentication retrieves the value of the ReAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetOrCreateReAuthentication() *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication {
	if t.ReAuthentication != nil {
		return t.ReAuthentication
	}
	t.ReAuthentication = &NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication{}
	return t.ReAuthentication
}

// GetMacsec returns the value of the Macsec struct pointer
// from NokiaConf_Configure_Port_Ethernet_Dot1X. If the receiver or the field Macsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetMacsec() *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec {
	if t != nil && t.Macsec != nil {
		return t.Macsec
	}
	return nil
}

// GetPerHostAuthentication returns the value of the PerHostAuthentication struct pointer
// from NokiaConf_Configure_Port_Ethernet_Dot1X. If the receiver or the field PerHostAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetPerHostAuthentication() *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication {
	if t != nil && t.PerHostAuthentication != nil {
		return t.PerHostAuthentication
	}
	return nil
}

// GetReAuthentication returns the value of the ReAuthentication struct pointer
// from NokiaConf_Configure_Port_Ethernet_Dot1X. If the receiver or the field ReAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetReAuthentication() *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication {
	if t != nil && t.ReAuthentication != nil {
		return t.ReAuthentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxAuthenticationRequests retrieves the value of the leaf MaxAuthenticationRequests from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAuthenticationRequests is set, it can
// safely use t.GetMaxAuthenticationRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAuthenticationRequests == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetMaxAuthenticationRequests() uint32 {
	if t == nil || t.MaxAuthenticationRequests == nil {
		return 2
	}
	return *t.MaxAuthenticationRequests
}

// GetPortControl retrieves the value of the leaf PortControl from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortControl is set, it can
// safely use t.GetPortControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortControl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetPortControl() E_NokiaTypesPort_PaeControlledPortControl {
	if t == nil || t.PortControl == 0 {
		return NokiaTypesPort_PaeControlledPortControl_force_authorized
	}
	return t.PortControl
}

// GetQuietPeriod retrieves the value of the leaf QuietPeriod from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuietPeriod is set, it can
// safely use t.GetQuietPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuietPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetQuietPeriod() uint32 {
	if t == nil || t.QuietPeriod == nil {
		return 60
	}
	return *t.QuietPeriod
}

// GetRadiusPolicy retrieves the value of the leaf RadiusPolicy from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusPolicy is set, it can
// safely use t.GetRadiusPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetRadiusPolicy() string {
	if t == nil || t.RadiusPolicy == nil {
		return ""
	}
	return *t.RadiusPolicy
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// GetRadiusServerPolicyAcct retrieves the value of the leaf RadiusServerPolicyAcct from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicyAcct is set, it can
// safely use t.GetRadiusServerPolicyAcct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicyAcct == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetRadiusServerPolicyAcct() string {
	if t == nil || t.RadiusServerPolicyAcct == nil {
		return ""
	}
	return *t.RadiusServerPolicyAcct
}

// GetRadiusServerPolicyAuth retrieves the value of the leaf RadiusServerPolicyAuth from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicyAuth is set, it can
// safely use t.GetRadiusServerPolicyAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicyAuth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetRadiusServerPolicyAuth() string {
	if t == nil || t.RadiusServerPolicyAuth == nil {
		return ""
	}
	return *t.RadiusServerPolicyAuth
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 30
	}
	return *t.ServerTimeout
}

// GetSupplicantTimeout retrieves the value of the leaf SupplicantTimeout from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplicantTimeout is set, it can
// safely use t.GetSupplicantTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplicantTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetSupplicantTimeout() uint32 {
	if t == nil || t.SupplicantTimeout == nil {
		return 30
	}
	return *t.SupplicantTimeout
}

// GetTransmitPeriod retrieves the value of the leaf TransmitPeriod from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPeriod is set, it can
// safely use t.GetTransmitPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetTransmitPeriod() uint32 {
	if t == nil || t.TransmitPeriod == nil {
		return 30
	}
	return *t.TransmitPeriod
}

// GetTunnelDot1Q retrieves the value of the leaf TunnelDot1Q from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelDot1Q is set, it can
// safely use t.GetTunnelDot1Q() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelDot1Q == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetTunnelDot1Q() bool {
	if t == nil || t.TunnelDot1Q == nil {
		return true
	}
	return *t.TunnelDot1Q
}

// GetTunnelQinq retrieves the value of the leaf TunnelQinq from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelQinq is set, it can
// safely use t.GetTunnelQinq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelQinq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetTunnelQinq() bool {
	if t == nil || t.TunnelQinq == nil {
		return true
	}
	return *t.TunnelQinq
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Port_Ethernet_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxAuthenticationRequests == nil {
		var v uint32 = 2
		t.MaxAuthenticationRequests = &v
	}
	if t.PortControl == 0 {
		t.PortControl = NokiaTypesPort_PaeControlledPortControl_force_authorized
	}
	if t.QuietPeriod == nil {
		var v uint32 = 60
		t.QuietPeriod = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 30
		t.ServerTimeout = &v
	}
	if t.SupplicantTimeout == nil {
		var v uint32 = 30
		t.SupplicantTimeout = &v
	}
	if t.TransmitPeriod == nil {
		var v uint32 = 30
		t.TransmitPeriod = &v
	}
	if t.TunnelDot1Q == nil {
		var v bool = true
		t.TunnelDot1Q = &v
	}
	if t.TunnelQinq == nil {
		var v bool = true
		t.TunnelQinq = &v
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
	t.Macsec.PopulateDefaults()
	t.PerHostAuthentication.PopulateDefaults()
	t.ReAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec represents the /nokia-conf/configure/port/ethernet/dot1x/macsec YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ExcludeMacPolicy   *uint32                                                            `path:"exclude-mac-policy" module:"nokia-conf"`
	ExcludeProtocol    *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol    `path:"exclude-protocol" module:"nokia-conf"`
	RxMustBeEncrypted  *bool                                                              `path:"rx-must-be-encrypted" module:"nokia-conf"`
	SubPort            map[uint32]*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort `path:"sub-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) IsYANGGoStruct() {}

// NewSubPort creates a new entry in the SubPort list of the
// NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) NewSubPort(SubPortId uint32) (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubPort == nil {
		t.SubPort = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort)
	}

	key := SubPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubPort", key)
	}

	t.SubPort[key] = &NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort{
		SubPortId: &SubPortId,
	}

	return t.SubPort[key], nil
}

// RenameSubPort renames an entry in the list SubPort within
// the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) RenameSubPort(oldK, newK uint32) error {
	if _, ok := t.SubPort[newK]; ok {
		return fmt.Errorf("key %v already exists in SubPort", newK)
	}

	e, ok := t.SubPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubPort", oldK)
	}
	e.SubPortId = &newK

	t.SubPort[newK] = e
	delete(t.SubPort, oldK)
	return nil
}

// GetOrCreateSubPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetOrCreateSubPort(SubPortId uint32) *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort {

	key := SubPortId

	if v, ok := t.SubPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubPort(SubPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubPort got unexpected error: %v", err))
	}
	return v
}

// GetSubPort retrieves the value with the specified key from
// the SubPort map field of NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetSubPort(SubPortId uint32) *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort {

	if t == nil {
		return nil
	}

	key := SubPortId

	if lm, ok := t.SubPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) DeleteSubPort(SubPortId uint32) {
	key := SubPortId

	delete(t.SubPort, key)
}

// AppendSubPort appends the supplied NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort struct to the
// list SubPort of NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) AppendSubPort(v *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) error {
	if v.SubPortId == nil {
		return fmt.Errorf("invalid nil key received for SubPortId")
	}

	key := *v.SubPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubPort == nil {
		t.SubPort = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort)
	}

	if _, ok := t.SubPort[key]; ok {
		return fmt.Errorf("duplicate key for list SubPort %v", key)
	}

	t.SubPort[key] = v
	return nil
}

// GetOrCreateExcludeProtocol retrieves the value of the ExcludeProtocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetOrCreateExcludeProtocol() *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol {
	if t.ExcludeProtocol != nil {
		return t.ExcludeProtocol
	}
	t.ExcludeProtocol = &NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol{}
	return t.ExcludeProtocol
}

// GetExcludeProtocol returns the value of the ExcludeProtocol struct pointer
// from NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec. If the receiver or the field ExcludeProtocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetExcludeProtocol() *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol {
	if t != nil && t.ExcludeProtocol != nil {
		return t.ExcludeProtocol
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExcludeMacPolicy retrieves the value of the leaf ExcludeMacPolicy from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeMacPolicy is set, it can
// safely use t.GetExcludeMacPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeMacPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetExcludeMacPolicy() uint32 {
	if t == nil || t.ExcludeMacPolicy == nil {
		return 0
	}
	return *t.ExcludeMacPolicy
}

// GetRxMustBeEncrypted retrieves the value of the leaf RxMustBeEncrypted from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxMustBeEncrypted is set, it can
// safely use t.GetRxMustBeEncrypted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxMustBeEncrypted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) GetRxMustBeEncrypted() bool {
	if t == nil || t.RxMustBeEncrypted == nil {
		return false
	}
	return *t.RxMustBeEncrypted
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxMustBeEncrypted == nil {
		var v bool = false
		t.RxMustBeEncrypted = &v
	}
	t.ExcludeProtocol.PopulateDefaults()
	for _, e := range t.SubPort {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol represents the /nokia-conf/configure/port/ethernet/dot1x/macsec/exclude-protocol YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol struct {
	Cdp        *bool `path:"cdp" module:"nokia-conf"`
	EapolStart *bool `path:"eapol-start" module:"nokia-conf"`
	EfmOam     *bool `path:"efm-oam" module:"nokia-conf"`
	EthCfm     *bool `path:"eth-cfm" module:"nokia-conf"`
	Lacp       *bool `path:"lacp" module:"nokia-conf"`
	Lldp       *bool `path:"lldp" module:"nokia-conf"`
	Ptp        *bool `path:"ptp" module:"nokia-conf"`
	Ubfd       *bool `path:"ubfd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) IsYANGGoStruct() {}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetEapolStart retrieves the value of the leaf EapolStart from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EapolStart is set, it can
// safely use t.GetEapolStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EapolStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetEapolStart() bool {
	if t == nil || t.EapolStart == nil {
		return false
	}
	return *t.EapolStart
}

// GetEfmOam retrieves the value of the leaf EfmOam from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EfmOam is set, it can
// safely use t.GetEfmOam() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EfmOam == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetEfmOam() bool {
	if t == nil || t.EfmOam == nil {
		return false
	}
	return *t.EfmOam
}

// GetEthCfm retrieves the value of the leaf EthCfm from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthCfm is set, it can
// safely use t.GetEthCfm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthCfm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetEthCfm() bool {
	if t == nil || t.EthCfm == nil {
		return false
	}
	return *t.EthCfm
}

// GetLacp retrieves the value of the leaf Lacp from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lacp is set, it can
// safely use t.GetLacp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lacp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetLacp() bool {
	if t == nil || t.Lacp == nil {
		return false
	}
	return *t.Lacp
}

// GetLldp retrieves the value of the leaf Lldp from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lldp is set, it can
// safely use t.GetLldp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetLldp() bool {
	if t == nil || t.Lldp == nil {
		return false
	}
	return *t.Lldp
}

// GetPtp retrieves the value of the leaf Ptp from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ptp is set, it can
// safely use t.GetPtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ptp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetPtp() bool {
	if t == nil || t.Ptp == nil {
		return false
	}
	return *t.Ptp
}

// GetUbfd retrieves the value of the leaf Ubfd from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ubfd is set, it can
// safely use t.GetUbfd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ubfd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) GetUbfd() bool {
	if t == nil || t.Ubfd == nil {
		return false
	}
	return *t.Ubfd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.EapolStart == nil {
		var v bool = false
		t.EapolStart = &v
	}
	if t.EfmOam == nil {
		var v bool = false
		t.EfmOam = &v
	}
	if t.EthCfm == nil {
		var v bool = false
		t.EthCfm = &v
	}
	if t.Lacp == nil {
		var v bool = false
		t.Lacp = &v
	}
	if t.Lldp == nil {
		var v bool = false
		t.Lldp = &v
	}
	if t.Ptp == nil {
		var v bool = false
		t.Ptp = &v
	}
	if t.Ubfd == nil {
		var v bool = false
		t.Ubfd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_ExcludeProtocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort represents the /nokia-conf/configure/port/ethernet/dot1x/macsec/sub-port YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort struct {
	AdminState              E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CaName                  *string                                                            `path:"ca-name" module:"nokia-conf"`
	EapolDestinationAddress *string                                                            `path:"eapol-destination-address" module:"nokia-conf"`
	EncapMatch              *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch `path:"encap-match" module:"nokia-conf"`
	MaxPeers                *uint32                                                            `path:"max-peers" module:"nokia-conf"`
	SubPortId               *uint32                                                            `path:"sub-port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) IsYANGGoStruct() {}

// GetOrCreateEncapMatch retrieves the value of the EncapMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetOrCreateEncapMatch() *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch {
	if t.EncapMatch != nil {
		return t.EncapMatch
	}
	t.EncapMatch = &NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch{}
	return t.EncapMatch
}

// GetEncapMatch returns the value of the EncapMatch struct pointer
// from NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort. If the receiver or the field EncapMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetEncapMatch() *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch {
	if t != nil && t.EncapMatch != nil {
		return t.EncapMatch
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCaName retrieves the value of the leaf CaName from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaName is set, it can
// safely use t.GetCaName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetCaName() string {
	if t == nil || t.CaName == nil {
		return ""
	}
	return *t.CaName
}

// GetEapolDestinationAddress retrieves the value of the leaf EapolDestinationAddress from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EapolDestinationAddress is set, it can
// safely use t.GetEapolDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EapolDestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetEapolDestinationAddress() string {
	if t == nil || t.EapolDestinationAddress == nil {
		return ""
	}
	return *t.EapolDestinationAddress
}

// GetMaxPeers retrieves the value of the leaf MaxPeers from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPeers is set, it can
// safely use t.GetMaxPeers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPeers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetMaxPeers() uint32 {
	if t == nil || t.MaxPeers == nil {
		return 0
	}
	return *t.MaxPeers
}

// GetSubPortId retrieves the value of the leaf SubPortId from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubPortId is set, it can
// safely use t.GetSubPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) GetSubPortId() uint32 {
	if t == nil || t.SubPortId == nil {
		return 0
	}
	return *t.SubPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.EncapMatch.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SubPortId == nil {
		return nil, fmt.Errorf("nil value for key SubPortId")
	}

	return map[string]interface{}{
		"sub-port-id": *t.SubPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch represents the /nokia-conf/configure/port/ethernet/dot1x/macsec/sub-port/encap-match YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch struct {
	AllMatch  *bool   `path:"all-match" module:"nokia-conf"`
	DoubleTag *string `path:"double-tag" module:"nokia-conf"`
	SingleTag *string `path:"single-tag" module:"nokia-conf"`
	Untagged  *bool   `path:"untagged" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) IsYANGGoStruct() {}

// GetAllMatch retrieves the value of the leaf AllMatch from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllMatch is set, it can
// safely use t.GetAllMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetAllMatch() bool {
	if t == nil || t.AllMatch == nil {
		return true
	}
	return *t.AllMatch
}

// GetDoubleTag retrieves the value of the leaf DoubleTag from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DoubleTag is set, it can
// safely use t.GetDoubleTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DoubleTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetDoubleTag() string {
	if t == nil || t.DoubleTag == nil {
		return ""
	}
	return *t.DoubleTag
}

// GetSingleTag retrieves the value of the leaf SingleTag from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleTag is set, it can
// safely use t.GetSingleTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetSingleTag() string {
	if t == nil || t.SingleTag == nil {
		return ""
	}
	return *t.SingleTag
}

// GetUntagged retrieves the value of the leaf Untagged from the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Untagged is set, it can
// safely use t.GetUntagged() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Untagged == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) GetUntagged() bool {
	if t == nil || t.Untagged == nil {
		return false
	}
	return *t.Untagged
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllMatch == nil {
		var v bool = true
		t.AllMatch = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_Macsec_SubPort_EncapMatch) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication represents the /nokia-conf/configure/port/ethernet/dot1x/per-host-authentication YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication struct {
	AdminState        E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	AllowedSourceMacs *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs `path:"allowed-source-macs" module:"nokia-conf"`
	AuthenticatorInit *bool                                                                            `path:"authenticator-init" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) IsYANGGoStruct() {}

// GetOrCreateAllowedSourceMacs retrieves the value of the AllowedSourceMacs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) GetOrCreateAllowedSourceMacs() *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs {
	if t.AllowedSourceMacs != nil {
		return t.AllowedSourceMacs
	}
	t.AllowedSourceMacs = &NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs{}
	return t.AllowedSourceMacs
}

// GetAllowedSourceMacs returns the value of the AllowedSourceMacs struct pointer
// from NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication. If the receiver or the field AllowedSourceMacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) GetAllowedSourceMacs() *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs {
	if t != nil && t.AllowedSourceMacs != nil {
		return t.AllowedSourceMacs
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticatorInit retrieves the value of the leaf AuthenticatorInit from the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticatorInit is set, it can
// safely use t.GetAuthenticatorInit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticatorInit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) GetAuthenticatorInit() bool {
	if t == nil || t.AuthenticatorInit == nil {
		return true
	}
	return *t.AuthenticatorInit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuthenticatorInit == nil {
		var v bool = true
		t.AuthenticatorInit = &v
	}
	t.AllowedSourceMacs.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs represents the /nokia-conf/configure/port/ethernet/dot1x/per-host-authentication/allowed-source-macs YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs struct {
	MacAddress map[string]*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) IsYANGGoStruct() {
}

// NewMacAddress creates a new entry in the MacAddress list of the
// NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) NewMacAddress(Mac string) (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacAddress == nil {
		t.MacAddress = make(map[string]*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress)
	}

	key := Mac

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacAddress", key)
	}

	t.MacAddress[key] = &NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress{
		Mac: &Mac,
	}

	return t.MacAddress[key], nil
}

// RenameMacAddress renames an entry in the list MacAddress within
// the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) RenameMacAddress(oldK, newK string) error {
	if _, ok := t.MacAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in MacAddress", newK)
	}

	e, ok := t.MacAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacAddress", oldK)
	}
	e.Mac = &newK

	t.MacAddress[newK] = e
	delete(t.MacAddress, oldK)
	return nil
}

// GetOrCreateMacAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) GetOrCreateMacAddress(Mac string) *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress {

	key := Mac

	if v, ok := t.MacAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacAddress(Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacAddress got unexpected error: %v", err))
	}
	return v
}

// GetMacAddress retrieves the value with the specified key from
// the MacAddress map field of NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) GetMacAddress(Mac string) *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress {

	if t == nil {
		return nil
	}

	key := Mac

	if lm, ok := t.MacAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) DeleteMacAddress(Mac string) {
	key := Mac

	delete(t.MacAddress, key)
}

// AppendMacAddress appends the supplied NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress struct to the
// list MacAddress of NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) AppendMacAddress(v *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) error {
	if v.Mac == nil {
		return fmt.Errorf("invalid nil key received for Mac")
	}

	key := *v.Mac

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacAddress == nil {
		t.MacAddress = make(map[string]*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress)
	}

	if _, ok := t.MacAddress[key]; ok {
		return fmt.Errorf("duplicate key for list MacAddress %v", key)
	}

	t.MacAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MacAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress represents the /nokia-conf/configure/port/ethernet/dot1x/per-host-authentication/allowed-source-macs/mac-address YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress struct {
	Mac *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) IsYANGGoStruct() {
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_PerHostAuthentication_AllowedSourceMacs_MacAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication represents the /nokia-conf/configure/port/ethernet/dot1x/re-authentication YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication struct {
	Period *uint32 `path:"period" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) IsYANGGoStruct() {}

// GetPeriod retrieves the value of the leaf Period from the NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Period is set, it can
// safely use t.GetPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Period == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) GetPeriod() uint32 {
	if t == nil || t.Period == nil {
		return 3600
	}
	return *t.Period
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Period == nil {
		var v uint32 = 3600
		t.Period = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication.
func (*NokiaConf_Configure_Port_Ethernet_Dot1X_ReAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_DownOnInternalError represents the /nokia-conf/configure/port/ethernet/down-on-internal-error YANG schema element.
type NokiaConf_Configure_Port_Ethernet_DownOnInternalError struct {
	TxLaser E_NokiaConf_Configure_Port_Ethernet_DownOnInternalError_TxLaser `path:"tx-laser" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_DownOnInternalError implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_DownOnInternalError) IsYANGGoStruct() {}

// GetTxLaser retrieves the value of the leaf TxLaser from the NokiaConf_Configure_Port_Ethernet_DownOnInternalError
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxLaser is set, it can
// safely use t.GetTxLaser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxLaser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_DownOnInternalError) GetTxLaser() E_NokiaConf_Configure_Port_Ethernet_DownOnInternalError_TxLaser {
	if t == nil || t.TxLaser == 0 {
		return NokiaConf_Configure_Port_Ethernet_DownOnInternalError_TxLaser_on
	}
	return t.TxLaser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_DownOnInternalError
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_DownOnInternalError) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TxLaser == 0 {
		t.TxLaser = NokiaConf_Configure_Port_Ethernet_DownOnInternalError_TxLaser_on
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_DownOnInternalError) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_DownOnInternalError"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_DownOnInternalError) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_DownOnInternalError) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_DownOnInternalError.
func (*NokiaConf_Configure_Port_Ethernet_DownOnInternalError) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_DownWhenLooped represents the /nokia-conf/configure/port/ethernet/down-when-looped YANG schema element.
type NokiaConf_Configure_Port_Ethernet_DownWhenLooped struct {
	AdminState          E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	KeepAlive           *uint32                     `path:"keep-alive" module:"nokia-conf"`
	RetryTimeout        *uint32                     `path:"retry-timeout" module:"nokia-conf"`
	UseBroadcastAddress *bool                       `path:"use-broadcast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_DownWhenLooped implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_DownWhenLooped) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetKeepAlive retrieves the value of the leaf KeepAlive from the NokiaConf_Configure_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAlive is set, it can
// safely use t.GetKeepAlive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAlive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) GetKeepAlive() uint32 {
	if t == nil || t.KeepAlive == nil {
		return 10
	}
	return *t.KeepAlive
}

// GetRetryTimeout retrieves the value of the leaf RetryTimeout from the NokiaConf_Configure_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimeout is set, it can
// safely use t.GetRetryTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) GetRetryTimeout() uint32 {
	if t == nil || t.RetryTimeout == nil {
		return 120
	}
	return *t.RetryTimeout
}

// GetUseBroadcastAddress retrieves the value of the leaf UseBroadcastAddress from the NokiaConf_Configure_Port_Ethernet_DownWhenLooped
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBroadcastAddress is set, it can
// safely use t.GetUseBroadcastAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBroadcastAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) GetUseBroadcastAddress() bool {
	if t == nil || t.UseBroadcastAddress == nil {
		return false
	}
	return *t.UseBroadcastAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_DownWhenLooped
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.KeepAlive == nil {
		var v uint32 = 10
		t.KeepAlive = &v
	}
	if t.RetryTimeout == nil {
		var v uint32 = 120
		t.RetryTimeout = &v
	}
	if t.UseBroadcastAddress == nil {
		var v bool = false
		t.UseBroadcastAddress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_DownWhenLooped"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_DownWhenLooped) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_DownWhenLooped.
func (*NokiaConf_Configure_Port_Ethernet_DownWhenLooped) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam represents the /nokia-conf/configure/port/ethernet/efm-oam YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam struct {
	AcceptRemoteLoopback *bool                                                    `path:"accept-remote-loopback" module:"nokia-conf"`
	AdminState           E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Discovery            *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery      `path:"discovery" module:"nokia-conf"`
	DyingGaspTxOnReset   *bool                                                    `path:"dying-gasp-tx-on-reset" module:"nokia-conf"`
	GraceTx              *bool                                                    `path:"grace-tx" module:"nokia-conf"`
	GraceVendorOui       *string                                                  `path:"grace-vendor-oui" module:"nokia-conf"`
	HoldTime             *uint32                                                  `path:"hold-time" module:"nokia-conf"`
	IgnoreEfmState       *bool                                                    `path:"ignore-efm-state" module:"nokia-conf"`
	LinkMonitoring       *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring `path:"link-monitoring" module:"nokia-conf"`
	Mode                 E_NokiaConf_Configure_Port_Ethernet_EfmOam_Mode          `path:"mode" module:"nokia-conf"`
	Multiplier           *uint32                                                  `path:"multiplier" module:"nokia-conf"`
	PeerRdiRx            *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx      `path:"peer-rdi-rx" module:"nokia-conf"`
	TransmitInterval     *uint32                                                  `path:"transmit-interval" module:"nokia-conf"`
	TriggerFault         E_NokiaConf_Configure_Port_Ethernet_EfmOam_TriggerFault  `path:"trigger-fault" module:"nokia-conf"`
	Tunneling            *bool                                                    `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam) IsYANGGoStruct() {}

// GetOrCreateDiscovery retrieves the value of the Discovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetOrCreateDiscovery() *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery {
	if t.Discovery != nil {
		return t.Discovery
	}
	t.Discovery = &NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery{}
	return t.Discovery
}

// GetOrCreateLinkMonitoring retrieves the value of the LinkMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetOrCreateLinkMonitoring() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring {
	if t.LinkMonitoring != nil {
		return t.LinkMonitoring
	}
	t.LinkMonitoring = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring{}
	return t.LinkMonitoring
}

// GetOrCreatePeerRdiRx retrieves the value of the PeerRdiRx field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetOrCreatePeerRdiRx() *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx {
	if t.PeerRdiRx != nil {
		return t.PeerRdiRx
	}
	t.PeerRdiRx = &NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx{}
	return t.PeerRdiRx
}

// GetDiscovery returns the value of the Discovery struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam. If the receiver or the field Discovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetDiscovery() *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery {
	if t != nil && t.Discovery != nil {
		return t.Discovery
	}
	return nil
}

// GetLinkMonitoring returns the value of the LinkMonitoring struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam. If the receiver or the field LinkMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetLinkMonitoring() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring {
	if t != nil && t.LinkMonitoring != nil {
		return t.LinkMonitoring
	}
	return nil
}

// GetPeerRdiRx returns the value of the PeerRdiRx struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam. If the receiver or the field PeerRdiRx is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetPeerRdiRx() *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx {
	if t != nil && t.PeerRdiRx != nil {
		return t.PeerRdiRx
	}
	return nil
}

// GetAcceptRemoteLoopback retrieves the value of the leaf AcceptRemoteLoopback from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptRemoteLoopback is set, it can
// safely use t.GetAcceptRemoteLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptRemoteLoopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetAcceptRemoteLoopback() bool {
	if t == nil || t.AcceptRemoteLoopback == nil {
		return false
	}
	return *t.AcceptRemoteLoopback
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDyingGaspTxOnReset retrieves the value of the leaf DyingGaspTxOnReset from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGaspTxOnReset is set, it can
// safely use t.GetDyingGaspTxOnReset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGaspTxOnReset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetDyingGaspTxOnReset() bool {
	if t == nil || t.DyingGaspTxOnReset == nil {
		return true
	}
	return *t.DyingGaspTxOnReset
}

// GetGraceTx retrieves the value of the leaf GraceTx from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GraceTx is set, it can
// safely use t.GetGraceTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GraceTx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetGraceTx() bool {
	if t == nil || t.GraceTx == nil {
		return false
	}
	return *t.GraceTx
}

// GetGraceVendorOui retrieves the value of the leaf GraceVendorOui from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GraceVendorOui is set, it can
// safely use t.GetGraceVendorOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GraceVendorOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetGraceVendorOui() string {
	if t == nil || t.GraceVendorOui == nil {
		return "00:16:4D"
	}
	return *t.GraceVendorOui
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetIgnoreEfmState retrieves the value of the leaf IgnoreEfmState from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreEfmState is set, it can
// safely use t.GetIgnoreEfmState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreEfmState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetIgnoreEfmState() bool {
	if t == nil || t.IgnoreEfmState == nil {
		return false
	}
	return *t.IgnoreEfmState
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetMode() E_NokiaConf_Configure_Port_Ethernet_EfmOam_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Port_Ethernet_EfmOam_Mode_active
	}
	return t.Mode
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 5
	}
	return *t.Multiplier
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 10
	}
	return *t.TransmitInterval
}

// GetTriggerFault retrieves the value of the leaf TriggerFault from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggerFault is set, it can
// safely use t.GetTriggerFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggerFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetTriggerFault() E_NokiaConf_Configure_Port_Ethernet_EfmOam_TriggerFault {
	if t == nil || t.TriggerFault == 0 {
		return 0
	}
	return t.TriggerFault
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Port_Ethernet_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptRemoteLoopback == nil {
		var v bool = false
		t.AcceptRemoteLoopback = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DyingGaspTxOnReset == nil {
		var v bool = true
		t.DyingGaspTxOnReset = &v
	}
	if t.GraceVendorOui == nil {
		var v string = "00:16:4D"
		t.GraceVendorOui = &v
	}
	if t.IgnoreEfmState == nil {
		var v bool = false
		t.IgnoreEfmState = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Port_Ethernet_EfmOam_Mode_active
	}
	if t.Multiplier == nil {
		var v uint32 = 5
		t.Multiplier = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 10
		t.TransmitInterval = &v
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
	t.Discovery.PopulateDefaults()
	t.LinkMonitoring.PopulateDefaults()
	t.PeerRdiRx.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery represents the /nokia-conf/configure/port/ethernet/efm-oam/discovery YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery struct {
	AdvertiseCapabilities *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities `path:"advertise-capabilities" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) IsYANGGoStruct() {}

// GetOrCreateAdvertiseCapabilities retrieves the value of the AdvertiseCapabilities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) GetOrCreateAdvertiseCapabilities() *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities {
	if t.AdvertiseCapabilities != nil {
		return t.AdvertiseCapabilities
	}
	t.AdvertiseCapabilities = &NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities{}
	return t.AdvertiseCapabilities
}

// GetAdvertiseCapabilities returns the value of the AdvertiseCapabilities struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery. If the receiver or the field AdvertiseCapabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) GetAdvertiseCapabilities() *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities {
	if t != nil && t.AdvertiseCapabilities != nil {
		return t.AdvertiseCapabilities
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdvertiseCapabilities.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities represents the /nokia-conf/configure/port/ethernet/efm-oam/discovery/advertise-capabilities YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities struct {
	LinkMonitoring *bool `path:"link-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) IsYANGGoStruct() {}

// GetLinkMonitoring retrieves the value of the leaf LinkMonitoring from the NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMonitoring is set, it can
// safely use t.GetLinkMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) GetLinkMonitoring() bool {
	if t == nil || t.LinkMonitoring == nil {
		return true
	}
	return *t.LinkMonitoring
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LinkMonitoring == nil {
		var v bool = true
		t.LinkMonitoring = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_Discovery_AdvertiseCapabilities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring struct {
	AdminState          E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ErroredFrame        *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame        `path:"errored-frame" module:"nokia-conf"`
	ErroredFramePeriod  *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod  `path:"errored-frame-period" module:"nokia-conf"`
	ErroredFrameSeconds *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds `path:"errored-frame-seconds" module:"nokia-conf"`
	ErroredSymbols      *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols      `path:"errored-symbols" module:"nokia-conf"`
	LocalSfAction       *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction       `path:"local-sf-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) IsYANGGoStruct() {}

// GetOrCreateErroredFrame retrieves the value of the ErroredFrame field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredFrame() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame {
	if t.ErroredFrame != nil {
		return t.ErroredFrame
	}
	t.ErroredFrame = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame{}
	return t.ErroredFrame
}

// GetOrCreateErroredFramePeriod retrieves the value of the ErroredFramePeriod field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredFramePeriod() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod {
	if t.ErroredFramePeriod != nil {
		return t.ErroredFramePeriod
	}
	t.ErroredFramePeriod = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod{}
	return t.ErroredFramePeriod
}

// GetOrCreateErroredFrameSeconds retrieves the value of the ErroredFrameSeconds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredFrameSeconds() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds {
	if t.ErroredFrameSeconds != nil {
		return t.ErroredFrameSeconds
	}
	t.ErroredFrameSeconds = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds{}
	return t.ErroredFrameSeconds
}

// GetOrCreateErroredSymbols retrieves the value of the ErroredSymbols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateErroredSymbols() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols {
	if t.ErroredSymbols != nil {
		return t.ErroredSymbols
	}
	t.ErroredSymbols = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols{}
	return t.ErroredSymbols
}

// GetOrCreateLocalSfAction retrieves the value of the LocalSfAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetOrCreateLocalSfAction() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction {
	if t.LocalSfAction != nil {
		return t.LocalSfAction
	}
	t.LocalSfAction = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction{}
	return t.LocalSfAction
}

// GetErroredFrame returns the value of the ErroredFrame struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredFrame is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredFrame() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame {
	if t != nil && t.ErroredFrame != nil {
		return t.ErroredFrame
	}
	return nil
}

// GetErroredFramePeriod returns the value of the ErroredFramePeriod struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredFramePeriod is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredFramePeriod() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod {
	if t != nil && t.ErroredFramePeriod != nil {
		return t.ErroredFramePeriod
	}
	return nil
}

// GetErroredFrameSeconds returns the value of the ErroredFrameSeconds struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredFrameSeconds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredFrameSeconds() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds {
	if t != nil && t.ErroredFrameSeconds != nil {
		return t.ErroredFrameSeconds
	}
	return nil
}

// GetErroredSymbols returns the value of the ErroredSymbols struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field ErroredSymbols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetErroredSymbols() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols {
	if t != nil && t.ErroredSymbols != nil {
		return t.ErroredSymbols
	}
	return nil
}

// GetLocalSfAction returns the value of the LocalSfAction struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring. If the receiver or the field LocalSfAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetLocalSfAction() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction {
	if t != nil && t.LocalSfAction != nil {
		return t.LocalSfAction
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.ErroredFrame.PopulateDefaults()
	t.ErroredFramePeriod.PopulateDefaults()
	t.ErroredFrameSeconds.PopulateDefaults()
	t.ErroredSymbols.PopulateDefaults()
	t.LocalSfAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring/errored-frame YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 10
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 10
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrame) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring/errored-frame-period YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 1488095
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 1488095
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFramePeriod) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring/errored-frame-seconds YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 600
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 600
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredFrameSeconds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring/errored-symbols YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	EventNotification *bool                       `path:"event-notification" module:"nokia-conf"`
	SdThreshold       *uint32                     `path:"sd-threshold" module:"nokia-conf"`
	SfThreshold       *uint32                     `path:"sf-threshold" module:"nokia-conf"`
	Window            *uint32                     `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetEventNotification() bool {
	if t == nil || t.EventNotification == nil {
		return true
	}
	return *t.EventNotification
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 0
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 1
	}
	return *t.SfThreshold
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 10
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EventNotification == nil {
		var v bool = true
		t.EventNotification = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 1
		t.SfThreshold = &v
	}
	if t.Window == nil {
		var v uint32 = 10
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_ErroredSymbols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring/local-sf-action YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction struct {
	EventNotificationBurst *uint32                                                                                 `path:"event-notification-burst" module:"nokia-conf"`
	InfoNotification       *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification `path:"info-notification" module:"nokia-conf"`
	LocalPortAction        E_NokiaTypesPort_EfmOamLocalPortAction                                                  `path:"local-port-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) IsYANGGoStruct() {}

// GetOrCreateInfoNotification retrieves the value of the InfoNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetOrCreateInfoNotification() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification {
	if t.InfoNotification != nil {
		return t.InfoNotification
	}
	t.InfoNotification = &NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification{}
	return t.InfoNotification
}

// GetInfoNotification returns the value of the InfoNotification struct pointer
// from NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction. If the receiver or the field InfoNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetInfoNotification() *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification {
	if t != nil && t.InfoNotification != nil {
		return t.InfoNotification
	}
	return nil
}

// GetEventNotificationBurst retrieves the value of the leaf EventNotificationBurst from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotificationBurst is set, it can
// safely use t.GetEventNotificationBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotificationBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetEventNotificationBurst() uint32 {
	if t == nil || t.EventNotificationBurst == nil {
		return 1
	}
	return *t.EventNotificationBurst
}

// GetLocalPortAction retrieves the value of the leaf LocalPortAction from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPortAction is set, it can
// safely use t.GetLocalPortAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPortAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) GetLocalPortAction() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.LocalPortAction == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.LocalPortAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventNotificationBurst == nil {
		var v uint32 = 1
		t.EventNotificationBurst = &v
	}
	if t.LocalPortAction == 0 {
		t.LocalPortAction = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	t.InfoNotification.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification represents the /nokia-conf/configure/port/ethernet/efm-oam/link-monitoring/local-sf-action/info-notification YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification struct {
	CriticalEvent *bool `path:"critical-event" module:"nokia-conf"`
	DyingGasp     *bool `path:"dying-gasp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) IsYANGGoStruct() {
}

// GetCriticalEvent retrieves the value of the leaf CriticalEvent from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriticalEvent is set, it can
// safely use t.GetCriticalEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriticalEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) GetCriticalEvent() bool {
	if t == nil || t.CriticalEvent == nil {
		return false
	}
	return *t.CriticalEvent
}

// GetDyingGasp retrieves the value of the leaf DyingGasp from the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGasp is set, it can
// safely use t.GetDyingGasp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGasp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) GetDyingGasp() bool {
	if t == nil || t.DyingGasp == nil {
		return false
	}
	return *t.DyingGasp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CriticalEvent == nil {
		var v bool = false
		t.CriticalEvent = &v
	}
	if t.DyingGasp == nil {
		var v bool = false
		t.DyingGasp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_LinkMonitoring_LocalSfAction_InfoNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx represents the /nokia-conf/configure/port/ethernet/efm-oam/peer-rdi-rx YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx struct {
	CriticalEvent     E_NokiaTypesPort_EfmOamLocalPortAction `path:"critical-event" module:"nokia-conf"`
	DyingGasp         E_NokiaTypesPort_EfmOamLocalPortAction `path:"dying-gasp" module:"nokia-conf"`
	EventNotification E_NokiaTypesPort_EfmOamLocalPortAction `path:"event-notification" module:"nokia-conf"`
	LinkFault         E_NokiaTypesPort_EfmOamLocalPortAction `path:"link-fault" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) IsYANGGoStruct() {}

// GetCriticalEvent retrieves the value of the leaf CriticalEvent from the NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CriticalEvent is set, it can
// safely use t.GetCriticalEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CriticalEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) GetCriticalEvent() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.CriticalEvent == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.CriticalEvent
}

// GetDyingGasp retrieves the value of the leaf DyingGasp from the NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGasp is set, it can
// safely use t.GetDyingGasp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGasp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) GetDyingGasp() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.DyingGasp == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.DyingGasp
}

// GetEventNotification retrieves the value of the leaf EventNotification from the NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventNotification is set, it can
// safely use t.GetEventNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) GetEventNotification() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.EventNotification == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_log_only
	}
	return t.EventNotification
}

// GetLinkFault retrieves the value of the leaf LinkFault from the NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkFault is set, it can
// safely use t.GetLinkFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) GetLinkFault() E_NokiaTypesPort_EfmOamLocalPortAction {
	if t == nil || t.LinkFault == 0 {
		return NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	return t.LinkFault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CriticalEvent == 0 {
		t.CriticalEvent = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	if t.DyingGasp == 0 {
		t.DyingGasp = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
	if t.EventNotification == 0 {
		t.EventNotification = NokiaTypesPort_EfmOamLocalPortAction_log_only
	}
	if t.LinkFault == 0 {
		t.LinkFault = NokiaTypesPort_EfmOamLocalPortAction_port_out_of_service
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx.
func (*NokiaConf_Configure_Port_Ethernet_EfmOam_PeerRdiRx) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress represents the /nokia-conf/configure/port/ethernet/egress YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress struct {
	ApplyGroups             []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	EthBnRateChanges        *bool                                                                        `path:"eth-bn-rate-changes" module:"nokia-conf"`
	ExpandedSecondaryShaper map[string]*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper `path:"expanded-secondary-shaper" module:"nokia-conf"`
	HsPortPoolPolicy        *string                                                                      `path:"hs-port-pool-policy" module:"nokia-conf"`
	HsSchedulerPolicy       *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy                  `path:"hs-scheduler-policy" module:"nokia-conf"`
	HsSecondaryShaper       map[string]*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper       `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsmdaSchedulerPolicy    *string                                                                      `path:"hsmda-scheduler-policy" module:"nokia-conf"`
	MonitorPortScheduler    *bool                                                                        `path:"monitor-port-scheduler" module:"nokia-conf"`
	PortQosPolicy           *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy                      `path:"port-qos-policy" module:"nokia-conf"`
	PortSchedulerPolicy     *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy                `path:"port-scheduler-policy" module:"nokia-conf"`
	Rate                    *int32                                                                       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress) IsYANGGoStruct() {}

// NewExpandedSecondaryShaper creates a new entry in the ExpandedSecondaryShaper list of the
// NokiaConf_Configure_Port_Ethernet_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) NewExpandedSecondaryShaper(SecondaryShaperName string) (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpandedSecondaryShaper == nil {
		t.ExpandedSecondaryShaper = make(map[string]*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper)
	}

	key := SecondaryShaperName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExpandedSecondaryShaper[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExpandedSecondaryShaper", key)
	}

	t.ExpandedSecondaryShaper[key] = &NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper{
		SecondaryShaperName: &SecondaryShaperName,
	}

	return t.ExpandedSecondaryShaper[key], nil
}

// RenameExpandedSecondaryShaper renames an entry in the list ExpandedSecondaryShaper within
// the NokiaConf_Configure_Port_Ethernet_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) RenameExpandedSecondaryShaper(oldK, newK string) error {
	if _, ok := t.ExpandedSecondaryShaper[newK]; ok {
		return fmt.Errorf("key %v already exists in ExpandedSecondaryShaper", newK)
	}

	e, ok := t.ExpandedSecondaryShaper[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExpandedSecondaryShaper", oldK)
	}
	e.SecondaryShaperName = &newK

	t.ExpandedSecondaryShaper[newK] = e
	delete(t.ExpandedSecondaryShaper, oldK)
	return nil
}

// GetOrCreateExpandedSecondaryShaper retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetOrCreateExpandedSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper {

	key := SecondaryShaperName

	if v, ok := t.ExpandedSecondaryShaper[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExpandedSecondaryShaper(SecondaryShaperName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExpandedSecondaryShaper got unexpected error: %v", err))
	}
	return v
}

// GetExpandedSecondaryShaper retrieves the value with the specified key from
// the ExpandedSecondaryShaper map field of NokiaConf_Configure_Port_Ethernet_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetExpandedSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper {

	if t == nil {
		return nil
	}

	key := SecondaryShaperName

	if lm, ok := t.ExpandedSecondaryShaper[key]; ok {
		return lm
	}
	return nil
}

// DeleteExpandedSecondaryShaper deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) DeleteExpandedSecondaryShaper(SecondaryShaperName string) {
	key := SecondaryShaperName

	delete(t.ExpandedSecondaryShaper, key)
}

// AppendExpandedSecondaryShaper appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper struct to the
// list ExpandedSecondaryShaper of NokiaConf_Configure_Port_Ethernet_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) AppendExpandedSecondaryShaper(v *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) error {
	if v.SecondaryShaperName == nil {
		return fmt.Errorf("invalid nil key received for SecondaryShaperName")
	}

	key := *v.SecondaryShaperName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExpandedSecondaryShaper == nil {
		t.ExpandedSecondaryShaper = make(map[string]*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper)
	}

	if _, ok := t.ExpandedSecondaryShaper[key]; ok {
		return fmt.Errorf("duplicate key for list ExpandedSecondaryShaper %v", key)
	}

	t.ExpandedSecondaryShaper[key] = v
	return nil
}

// NewHsSecondaryShaper creates a new entry in the HsSecondaryShaper list of the
// NokiaConf_Configure_Port_Ethernet_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) NewHsSecondaryShaper(SecondaryShaperName string) (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSecondaryShaper == nil {
		t.HsSecondaryShaper = make(map[string]*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper)
	}

	key := SecondaryShaperName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsSecondaryShaper[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsSecondaryShaper", key)
	}

	t.HsSecondaryShaper[key] = &NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper{
		SecondaryShaperName: &SecondaryShaperName,
	}

	return t.HsSecondaryShaper[key], nil
}

// RenameHsSecondaryShaper renames an entry in the list HsSecondaryShaper within
// the NokiaConf_Configure_Port_Ethernet_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) RenameHsSecondaryShaper(oldK, newK string) error {
	if _, ok := t.HsSecondaryShaper[newK]; ok {
		return fmt.Errorf("key %v already exists in HsSecondaryShaper", newK)
	}

	e, ok := t.HsSecondaryShaper[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsSecondaryShaper", oldK)
	}
	e.SecondaryShaperName = &newK

	t.HsSecondaryShaper[newK] = e
	delete(t.HsSecondaryShaper, oldK)
	return nil
}

// GetOrCreateHsSecondaryShaper retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetOrCreateHsSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper {

	key := SecondaryShaperName

	if v, ok := t.HsSecondaryShaper[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsSecondaryShaper(SecondaryShaperName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsSecondaryShaper got unexpected error: %v", err))
	}
	return v
}

// GetHsSecondaryShaper retrieves the value with the specified key from
// the HsSecondaryShaper map field of NokiaConf_Configure_Port_Ethernet_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetHsSecondaryShaper(SecondaryShaperName string) *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper {

	if t == nil {
		return nil
	}

	key := SecondaryShaperName

	if lm, ok := t.HsSecondaryShaper[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsSecondaryShaper deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) DeleteHsSecondaryShaper(SecondaryShaperName string) {
	key := SecondaryShaperName

	delete(t.HsSecondaryShaper, key)
}

// AppendHsSecondaryShaper appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper struct to the
// list HsSecondaryShaper of NokiaConf_Configure_Port_Ethernet_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) AppendHsSecondaryShaper(v *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) error {
	if v.SecondaryShaperName == nil {
		return fmt.Errorf("invalid nil key received for SecondaryShaperName")
	}

	key := *v.SecondaryShaperName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsSecondaryShaper == nil {
		t.HsSecondaryShaper = make(map[string]*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper)
	}

	if _, ok := t.HsSecondaryShaper[key]; ok {
		return fmt.Errorf("duplicate key for list HsSecondaryShaper %v", key)
	}

	t.HsSecondaryShaper[key] = v
	return nil
}

// GetOrCreateHsSchedulerPolicy retrieves the value of the HsSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetOrCreateHsSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy {
	if t.HsSchedulerPolicy != nil {
		return t.HsSchedulerPolicy
	}
	t.HsSchedulerPolicy = &NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy{}
	return t.HsSchedulerPolicy
}

// GetOrCreatePortQosPolicy retrieves the value of the PortQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetOrCreatePortQosPolicy() *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy {
	if t.PortQosPolicy != nil {
		return t.PortQosPolicy
	}
	t.PortQosPolicy = &NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy{}
	return t.PortQosPolicy
}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetHsSchedulerPolicy returns the value of the HsSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress. If the receiver or the field HsSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetHsSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy {
	if t != nil && t.HsSchedulerPolicy != nil {
		return t.HsSchedulerPolicy
	}
	return nil
}

// GetPortQosPolicy returns the value of the PortQosPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress. If the receiver or the field PortQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetPortQosPolicy() *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy {
	if t != nil && t.PortQosPolicy != nil {
		return t.PortQosPolicy
	}
	return nil
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEthBnRateChanges retrieves the value of the leaf EthBnRateChanges from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthBnRateChanges is set, it can
// safely use t.GetEthBnRateChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthBnRateChanges == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetEthBnRateChanges() bool {
	if t == nil || t.EthBnRateChanges == nil {
		return false
	}
	return *t.EthBnRateChanges
}

// GetHsPortPoolPolicy retrieves the value of the leaf HsPortPoolPolicy from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsPortPoolPolicy is set, it can
// safely use t.GetHsPortPoolPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsPortPoolPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetHsPortPoolPolicy() string {
	if t == nil || t.HsPortPoolPolicy == nil {
		return ""
	}
	return *t.HsPortPoolPolicy
}

// GetHsmdaSchedulerPolicy retrieves the value of the leaf HsmdaSchedulerPolicy from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsmdaSchedulerPolicy is set, it can
// safely use t.GetHsmdaSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsmdaSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetHsmdaSchedulerPolicy() string {
	if t == nil || t.HsmdaSchedulerPolicy == nil {
		return ""
	}
	return *t.HsmdaSchedulerPolicy
}

// GetMonitorPortScheduler retrieves the value of the leaf MonitorPortScheduler from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorPortScheduler is set, it can
// safely use t.GetMonitorPortScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorPortScheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetMonitorPortScheduler() bool {
	if t == nil || t.MonitorPortScheduler == nil {
		return false
	}
	return *t.MonitorPortScheduler
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) GetRate() int32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EthBnRateChanges == nil {
		var v bool = false
		t.EthBnRateChanges = &v
	}
	if t.MonitorPortScheduler == nil {
		var v bool = false
		t.MonitorPortScheduler = &v
	}
	t.HsSchedulerPolicy.PopulateDefaults()
	t.PortQosPolicy.PopulateDefaults()
	t.PortSchedulerPolicy.PopulateDefaults()
	for _, e := range t.ExpandedSecondaryShaper {
		e.PopulateDefaults()
	}
	for _, e := range t.HsSecondaryShaper {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress.
func (*NokiaConf_Configure_Port_Ethernet_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper represents the /nokia-conf/configure/port/ethernet/egress/expanded-secondary-shaper YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper struct {
	AggregateBurst      *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst   `path:"aggregate-burst" module:"nokia-conf"`
	ApplyGroups         []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Class               map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class `path:"class" module:"nokia-conf"`
	LowBurstMaxClass    *uint32                                                                            `path:"low-burst-max-class" module:"nokia-conf"`
	MonitorThreshold    *int32                                                                             `path:"monitor-threshold" module:"nokia-conf"`
	Rate                NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Rate_Union        `path:"rate" module:"nokia-conf"`
	SecondaryShaperName *string                                                                            `path:"secondary-shaper-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) NewClass(ClassNumber uint32) (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class{
		ClassNumber: &ClassNumber,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) RenameClass(oldK, newK uint32) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassNumber = &newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetOrCreateClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class {

	key := ClassNumber

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) DeleteClass(ClassNumber uint32) {
	key := ClassNumber

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class struct to the
// list Class of NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) AppendClass(v *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) error {
	if v.ClassNumber == nil {
		return fmt.Errorf("invalid nil key received for ClassNumber")
	}

	key := *v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetOrCreateAggregateBurst retrieves the value of the AggregateBurst field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetOrCreateAggregateBurst() *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst {
	if t.AggregateBurst != nil {
		return t.AggregateBurst
	}
	t.AggregateBurst = &NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst{}
	return t.AggregateBurst
}

// GetAggregateBurst returns the value of the AggregateBurst struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper. If the receiver or the field AggregateBurst is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetAggregateBurst() *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst {
	if t != nil && t.AggregateBurst != nil {
		return t.AggregateBurst
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 8
	}
	return *t.LowBurstMaxClass
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetMonitorThreshold() int32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
	return t.Rate
}

// GetSecondaryShaperName retrieves the value of the leaf SecondaryShaperName from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaperName is set, it can
// safely use t.GetSecondaryShaperName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaperName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) GetSecondaryShaperName() string {
	if t == nil || t.SecondaryShaperName == nil {
		return ""
	}
	return *t.SecondaryShaperName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 8
		t.LowBurstMaxClass = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
	t.AggregateBurst.PopulateDefaults()
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecondaryShaperName == nil {
		return nil, fmt.Errorf("nil value for key SecondaryShaperName")
	}

	return map[string]interface{}{
		"secondary-shaper-name": *t.SecondaryShaperName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper.
func (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst represents the /nokia-conf/configure/port/ethernet/egress/expanded-secondary-shaper/aggregate-burst YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst struct {
	HighBurstIncrease *int32 `path:"high-burst-increase" module:"nokia-conf"`
	LowBurstLimit     *int32 `path:"low-burst-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) IsYANGGoStruct() {
}

// GetHighBurstIncrease retrieves the value of the leaf HighBurstIncrease from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighBurstIncrease is set, it can
// safely use t.GetHighBurstIncrease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighBurstIncrease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) GetHighBurstIncrease() int32 {
	if t == nil || t.HighBurstIncrease == nil {
		return 0
	}
	return *t.HighBurstIncrease
}

// GetLowBurstLimit retrieves the value of the leaf LowBurstLimit from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstLimit is set, it can
// safely use t.GetLowBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) GetLowBurstLimit() int32 {
	if t == nil || t.LowBurstLimit == nil {
		return 0
	}
	return *t.LowBurstLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst.
func (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_AggregateBurst) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class represents the /nokia-conf/configure/port/ethernet/egress/expanded-secondary-shaper/class YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class struct {
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	BurstLimit         *int32                                                                            `path:"burst-limit" module:"nokia-conf"`
	ClassNumber        *uint32                                                                           `path:"class-number" module:"nokia-conf"`
	MonitorThreshold   *int32                                                                            `path:"monitor-threshold" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetBurstLimit() int32 {
	if t == nil || t.BurstLimit == nil {
		return 0
	}
	return *t.BurstLimit
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetClassNumber() uint32 {
	if t == nil || t.ClassNumber == nil {
		return 0
	}
	return *t.ClassNumber
}

// GetMonitorThreshold retrieves the value of the leaf MonitorThreshold from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorThreshold is set, it can
// safely use t.GetMonitorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetMonitorThreshold() int32 {
	if t == nil || t.MonitorThreshold == nil {
		return 0
	}
	return *t.MonitorThreshold
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SecondaryShaperPirRate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassNumber == nil {
		return nil, fmt.Errorf("nil value for key ClassNumber")
	}

	return map[string]interface{}{
		"class-number": *t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class.
func (*NokiaConf_Configure_Port_Ethernet_Egress_ExpandedSecondaryShaper_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy represents the /nokia-conf/configure/port/ethernet/egress/hs-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/ethernet/egress/hs-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group           `path:"group" module:"nokia-conf"`
	MaxRate            NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_MaxRate_Union               `path:"max-rate" module:"nokia-conf"`
	SchedulingClass    map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) NewGroup(GroupId uint32) (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group{
		GroupId: &GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) RenameGroup(oldK, newK uint32) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetOrCreateGroup(GroupId uint32) *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetGroup(GroupId uint32) *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) DeleteGroup(GroupId uint32) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group struct to the
// list Group of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) AppendGroup(v *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) NewSchedulingClass(ClassNumber uint32) (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass{
		ClassNumber: &ClassNumber,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) RenameSchedulingClass(oldK, newK uint32) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassNumber = &newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetOrCreateSchedulingClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass {

	key := ClassNumber

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetSchedulingClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) DeleteSchedulingClass(ClassNumber uint32) {
	key := ClassNumber

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) AppendSchedulingClass(v *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) error {
	if v.ClassNumber == nil {
		return fmt.Errorf("invalid nil key received for ClassNumber")
	}

	key := *v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) GetMaxRate() NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group represents the /nokia-conf/configure/port/ethernet/egress/hs-scheduler-policy/overrides/group YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                               `path:"group-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass represents the /nokia-conf/configure/port/ethernet/egress/hs-scheduler-policy/overrides/scheduling-class YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassNumber        *uint32                                                                                         `path:"class-number" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_Rate_Union `path:"rate" module:"nokia-conf"`
	Weight             *int32                                                                                          `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetClassNumber() uint32 {
	if t == nil || t.ClassNumber == nil {
		return 0
	}
	return *t.ClassNumber
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassNumber == nil {
		return nil, fmt.Errorf("nil value for key ClassNumber")
	}

	return map[string]interface{}{
		"class-number": *t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSchedulerPolicy_Overrides_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper represents the /nokia-conf/configure/port/ethernet/egress/hs-secondary-shaper YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper struct {
	Aggregate           *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate        `path:"aggregate" module:"nokia-conf"`
	ApplyGroups         []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Class               map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class `path:"class" module:"nokia-conf"`
	Description         *string                                                                      `path:"description" module:"nokia-conf"`
	SecondaryShaperName *string                                                                      `path:"secondary-shaper-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) IsYANGGoStruct() {}

// NewClass creates a new entry in the Class list of the
// NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) NewClass(ClassNumber uint32) (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Class[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Class", key)
	}

	t.Class[key] = &NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class{
		ClassNumber: &ClassNumber,
	}

	return t.Class[key], nil
}

// RenameClass renames an entry in the list Class within
// the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) RenameClass(oldK, newK uint32) error {
	if _, ok := t.Class[newK]; ok {
		return fmt.Errorf("key %v already exists in Class", newK)
	}

	e, ok := t.Class[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Class", oldK)
	}
	e.ClassNumber = &newK

	t.Class[newK] = e
	delete(t.Class, oldK)
	return nil
}

// GetOrCreateClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetOrCreateClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class {

	key := ClassNumber

	if v, ok := t.Class[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClass got unexpected error: %v", err))
	}
	return v
}

// GetClass retrieves the value with the specified key from
// the Class map field of NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.Class[key]; ok {
		return lm
	}
	return nil
}

// DeleteClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) DeleteClass(ClassNumber uint32) {
	key := ClassNumber

	delete(t.Class, key)
}

// AppendClass appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class struct to the
// list Class of NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) AppendClass(v *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) error {
	if v.ClassNumber == nil {
		return fmt.Errorf("invalid nil key received for ClassNumber")
	}

	key := *v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Class == nil {
		t.Class = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class)
	}

	if _, ok := t.Class[key]; ok {
		return fmt.Errorf("duplicate key for list Class %v", key)
	}

	t.Class[key] = v
	return nil
}

// GetOrCreateAggregate retrieves the value of the Aggregate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetOrCreateAggregate() *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate {
	if t.Aggregate != nil {
		return t.Aggregate
	}
	t.Aggregate = &NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate{}
	return t.Aggregate
}

// GetAggregate returns the value of the Aggregate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper. If the receiver or the field Aggregate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetAggregate() *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate {
	if t != nil && t.Aggregate != nil {
		return t.Aggregate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSecondaryShaperName retrieves the value of the leaf SecondaryShaperName from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaperName is set, it can
// safely use t.GetSecondaryShaperName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaperName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) GetSecondaryShaperName() string {
	if t == nil || t.SecondaryShaperName == nil {
		return ""
	}
	return *t.SecondaryShaperName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Aggregate.PopulateDefaults()
	for _, e := range t.Class {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SecondaryShaperName == nil {
		return nil, fmt.Errorf("nil value for key SecondaryShaperName")
	}

	return map[string]interface{}{
		"secondary-shaper-name": *t.SecondaryShaperName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate represents the /nokia-conf/configure/port/ethernet/egress/hs-secondary-shaper/aggregate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate struct {
	LowBurstMaxClass *uint32                                                                         `path:"low-burst-max-class" module:"nokia-conf"`
	Rate             NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) IsYANGGoStruct() {}

// GetLowBurstMaxClass retrieves the value of the leaf LowBurstMaxClass from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowBurstMaxClass is set, it can
// safely use t.GetLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) GetLowBurstMaxClass() uint32 {
	if t == nil || t.LowBurstMaxClass == nil {
		return 6
	}
	return *t.LowBurstMaxClass
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LowBurstMaxClass == nil {
		var v uint32 = 6
		t.LowBurstMaxClass = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Aggregate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class represents the /nokia-conf/configure/port/ethernet/egress/hs-secondary-shaper/class YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassNumber        *uint32                                                                     `path:"class-number" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) GetClassNumber() uint32 {
	if t == nil || t.ClassNumber == nil {
		return 0
	}
	return *t.ClassNumber
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class_Rate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassNumber == nil {
		return nil, fmt.Errorf("nil value for key ClassNumber")
	}

	return map[string]interface{}{
		"class-number": *t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class.
func (*NokiaConf_Configure_Port_Ethernet_Egress_HsSecondaryShaper_Class) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy represents the /nokia-conf/configure/port/ethernet/egress/port-qos-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/port/ethernet/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                 `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/ethernet/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate            *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate          `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel uint32) (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: &PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel uint32) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/port/ethernet/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel      *uint32                                                                                   `path:"priority-level" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() uint32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/port/ethernet/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/port/ethernet/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/port/ethernet/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                  `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Port_Ethernet_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Elmi represents the /nokia-conf/configure/port/ethernet/elmi YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Elmi struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_Port_Ethernet_Elmi_Mode `path:"mode" module:"nokia-conf"`
	N393               *uint32                                       `path:"n393" module:"nokia-conf"`
	T391               *uint32                                       `path:"t391" module:"nokia-conf"`
	T392               *uint32                                       `path:"t392" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Elmi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Elmi) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) GetMode() E_NokiaConf_Configure_Port_Ethernet_Elmi_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetN393 retrieves the value of the leaf N393 from the NokiaConf_Configure_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if N393 is set, it can
// safely use t.GetN393() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.N393 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) GetN393() uint32 {
	if t == nil || t.N393 == nil {
		return 4
	}
	return *t.N393
}

// GetT391 retrieves the value of the leaf T391 from the NokiaConf_Configure_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if T391 is set, it can
// safely use t.GetT391() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.T391 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) GetT391() uint32 {
	if t == nil || t.T391 == nil {
		return 10
	}
	return *t.T391
}

// GetT392 retrieves the value of the leaf T392 from the NokiaConf_Configure_Port_Ethernet_Elmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if T392 is set, it can
// safely use t.GetT392() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.T392 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) GetT392() uint32 {
	if t == nil || t.T392 == nil {
		return 15
	}
	return *t.T392
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Elmi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.N393 == nil {
		var v uint32 = 4
		t.N393 = &v
	}
	if t.T391 == nil {
		var v uint32 = 10
		t.T391 = &v
	}
	if t.T392 == nil {
		var v uint32 = 15
		t.T392 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Elmi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Elmi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Elmi.
func (*NokiaConf_Configure_Port_Ethernet_Elmi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm represents the /nokia-conf/configure/port/ethernet/eth-cfm YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm struct {
	Mep map[NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key]*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/port/ethernet/eth-cfm.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Port_Ethernet_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key]*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Port_Ethernet_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep {

	key := NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Port_Ethernet_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Port_Ethernet_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Port_Ethernet_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) AppendMep(v *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Key]*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                           `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                          `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                         `path:"ccm-padding-size" module:"nokia-conf"`
	CcmTlvIgnore         []E_NokiaTypesEthCfm_CcmTlvIgnoreType                           `path:"ccm-tlv-ignore" module:"nokia-conf"`
	CollectLmmStats      *bool                                                           `path:"collect-lmm-stats" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                         `path:"description" module:"nokia-conf"`
	EthBn                *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn             `path:"eth-bn" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FacilityFault        *bool                                                           `path:"facility-fault" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                           `path:"install-mep" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                          `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                         `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                         `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                         `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                         `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                         `path:"one-way-delay-threshold" module:"nokia-conf"`
	Vlan                 NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Vlan_Union         `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthBn retrieves the value of the EthBn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOrCreateEthBn() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn {
	if t.EthBn != nil {
		return t.EthBn
	}
	t.EthBn = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn{}
	return t.EthBn
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetAis() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthBn returns the value of the EthBn struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep. If the receiver or the field EthBn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetEthBn() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn {
	if t != nil && t.EthBn != nil {
		return t.EthBn
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCcmTlvIgnore retrieves the value of the leaf CcmTlvIgnore from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmTlvIgnore is set, it can
// safely use t.GetCcmTlvIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmTlvIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetCcmTlvIgnore() []E_NokiaTypesEthCfm_CcmTlvIgnoreType {
	if t == nil || t.CcmTlvIgnore == nil {
		return nil
	}
	return t.CcmTlvIgnore
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacilityFault retrieves the value of the leaf FacilityFault from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityFault is set, it can
// safely use t.GetFacilityFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetFacilityFault() bool {
	if t == nil || t.FacilityFault == nil {
		return false
	}
	return *t.FacilityFault
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) GetVlan() NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return NokiaTypesEthCfm_VlanIdOrNone_Enum_none
	}
	return t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.FacilityFault == nil {
		var v bool = false
		t.FacilityFault = &v
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.Vlan == nil {
		t.Vlan = NokiaTypesEthCfm_VlanIdOrNone_Enum_none
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthBn.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                             `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                              `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                               `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/eth-bn YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn struct {
	Receive        *bool   `path:"receive" module:"nokia-conf"`
	RxUpdatePacing *uint32 `path:"rx-update-pacing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetRxUpdatePacing retrieves the value of the leaf RxUpdatePacing from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxUpdatePacing is set, it can
// safely use t.GetRxUpdatePacing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxUpdatePacing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) GetRxUpdatePacing() uint32 {
	if t == nil || t.RxUpdatePacing == nil {
		return 5
	}
	return *t.RxUpdatePacing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
	if t.RxUpdatePacing == nil {
		var v uint32 = 5
		t.RxUpdatePacing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthBn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                           `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                      `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/port/ethernet/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Port_Ethernet_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_HoldTime represents the /nokia-conf/configure/port/ethernet/hold-time YANG schema element.
type NokiaConf_Configure_Port_Ethernet_HoldTime struct {
	Down  *uint32                                            `path:"down" module:"nokia-conf"`
	Units E_NokiaConf_Configure_Port_Ethernet_HoldTime_Units `path:"units" module:"nokia-conf"`
	Up    *uint32                                            `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Port_Ethernet_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUnits retrieves the value of the leaf Units from the NokiaConf_Configure_Port_Ethernet_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Units is set, it can
// safely use t.GetUnits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Units == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) GetUnits() E_NokiaConf_Configure_Port_Ethernet_HoldTime_Units {
	if t == nil || t.Units == 0 {
		return NokiaConf_Configure_Port_Ethernet_HoldTime_Units_seconds
	}
	return t.Units
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Port_Ethernet_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Units == 0 {
		t.Units = NokiaConf_Configure_Port_Ethernet_HoldTime_Units_seconds
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_HoldTime.
func (*NokiaConf_Configure_Port_Ethernet_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides represents the /nokia-conf/configure/port/ethernet/hsmda-scheduler-overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              map[uint32]*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group           `path:"group" module:"nokia-conf"`
	MaxRate            NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_MaxRate_Union               `path:"max-rate" module:"nokia-conf"`
	SchedulingClass    map[uint32]*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass `path:"scheduling-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) NewGroup(GroupId uint32) (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group{
		GroupId: &GroupId,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) RenameGroup(oldK, newK uint32) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupId = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetOrCreateGroup(GroupId uint32) *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group {

	key := GroupId

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetGroup(GroupId uint32) *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) DeleteGroup(GroupId uint32) {
	key := GroupId

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group struct to the
// list Group of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) AppendGroup(v *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewSchedulingClass creates a new entry in the SchedulingClass list of the
// NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) NewSchedulingClass(ClassNumber uint32) (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass)
	}

	key := ClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulingClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulingClass", key)
	}

	t.SchedulingClass[key] = &NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass{
		ClassNumber: &ClassNumber,
	}

	return t.SchedulingClass[key], nil
}

// RenameSchedulingClass renames an entry in the list SchedulingClass within
// the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) RenameSchedulingClass(oldK, newK uint32) error {
	if _, ok := t.SchedulingClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulingClass", newK)
	}

	e, ok := t.SchedulingClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulingClass", oldK)
	}
	e.ClassNumber = &newK

	t.SchedulingClass[newK] = e
	delete(t.SchedulingClass, oldK)
	return nil
}

// GetOrCreateSchedulingClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetOrCreateSchedulingClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass {

	key := ClassNumber

	if v, ok := t.SchedulingClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulingClass(ClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulingClass got unexpected error: %v", err))
	}
	return v
}

// GetSchedulingClass retrieves the value with the specified key from
// the SchedulingClass map field of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetSchedulingClass(ClassNumber uint32) *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass {

	if t == nil {
		return nil
	}

	key := ClassNumber

	if lm, ok := t.SchedulingClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulingClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) DeleteSchedulingClass(ClassNumber uint32) {
	key := ClassNumber

	delete(t.SchedulingClass, key)
}

// AppendSchedulingClass appends the supplied NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass struct to the
// list SchedulingClass of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) AppendSchedulingClass(v *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) error {
	if v.ClassNumber == nil {
		return fmt.Errorf("invalid nil key received for ClassNumber")
	}

	key := *v.ClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulingClass == nil {
		t.SchedulingClass = make(map[uint32]*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass)
	}

	if _, ok := t.SchedulingClass[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulingClass %v", key)
	}

	t.SchedulingClass[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) GetMaxRate() NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.SchedulingClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides.
func (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group represents the /nokia-conf/configure/port/ethernet/hsmda-scheduler-overrides/group YANG schema element.
type NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group struct {
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                    `path:"group-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) GetRate() NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group.
func (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass represents the /nokia-conf/configure/port/ethernet/hsmda-scheduler-overrides/scheduling-class YANG schema element.
type NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassNumber        *uint32                                                                              `path:"class-number" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_Rate_Union `path:"rate" module:"nokia-conf"`
	WeightInGroup      *int32                                                                               `path:"weight-in-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClassNumber retrieves the value of the leaf ClassNumber from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassNumber is set, it can
// safely use t.GetClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetClassNumber() uint32 {
	if t == nil || t.ClassNumber == nil {
		return 0
	}
	return *t.ClassNumber
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetRate() NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetWeightInGroup retrieves the value of the leaf WeightInGroup from the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightInGroup is set, it can
// safely use t.GetWeightInGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightInGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) GetWeightInGroup() int32 {
	if t == nil || t.WeightInGroup == nil {
		return 0
	}
	return *t.WeightInGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClassNumber == nil {
		return nil, fmt.Errorf("nil value for key ClassNumber")
	}

	return map[string]interface{}{
		"class-number": *t.ClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass.
func (*NokiaConf_Configure_Port_Ethernet_HsmdaSchedulerOverrides_SchedulingClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Ingress represents the /nokia-conf/configure/port/ethernet/ingress YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Ingress struct {
	Rate *int32 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Ingress) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ingress) GetRate() int32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Ingress.
func (*NokiaConf_Configure_Port_Ethernet_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Lldp represents the /nokia-conf/configure/port/ethernet/lldp YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Lldp struct {
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	DestMac            map[E_NokiaTypesLldp_MacAddrType]*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac `path:"dest-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Lldp) IsYANGGoStruct() {}

// NewDestMac creates a new entry in the DestMac list of the
// NokiaConf_Configure_Port_Ethernet_Lldp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) NewDestMac(MacType E_NokiaTypesLldp_MacAddrType) (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestMac == nil {
		t.DestMac = make(map[E_NokiaTypesLldp_MacAddrType]*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac)
	}

	key := MacType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestMac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestMac", key)
	}

	t.DestMac[key] = &NokiaConf_Configure_Port_Ethernet_Lldp_DestMac{
		MacType: MacType,
	}

	return t.DestMac[key], nil
}

// RenameDestMac renames an entry in the list DestMac within
// the NokiaConf_Configure_Port_Ethernet_Lldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) RenameDestMac(oldK, newK E_NokiaTypesLldp_MacAddrType) error {
	if _, ok := t.DestMac[newK]; ok {
		return fmt.Errorf("key %v already exists in DestMac", newK)
	}

	e, ok := t.DestMac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestMac", oldK)
	}
	e.MacType = newK

	t.DestMac[newK] = e
	delete(t.DestMac, oldK)
	return nil
}

// GetOrCreateDestMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Lldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) GetOrCreateDestMac(MacType E_NokiaTypesLldp_MacAddrType) *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac {

	key := MacType

	if v, ok := t.DestMac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestMac(MacType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestMac got unexpected error: %v", err))
	}
	return v
}

// GetDestMac retrieves the value with the specified key from
// the DestMac map field of NokiaConf_Configure_Port_Ethernet_Lldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) GetDestMac(MacType E_NokiaTypesLldp_MacAddrType) *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac {

	if t == nil {
		return nil
	}

	key := MacType

	if lm, ok := t.DestMac[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Lldp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) DeleteDestMac(MacType E_NokiaTypesLldp_MacAddrType) {
	key := MacType

	delete(t.DestMac, key)
}

// AppendDestMac appends the supplied NokiaConf_Configure_Port_Ethernet_Lldp_DestMac struct to the
// list DestMac of NokiaConf_Configure_Port_Ethernet_Lldp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Lldp_DestMac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) AppendDestMac(v *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) error {
	key := v.MacType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestMac == nil {
		t.DestMac = make(map[E_NokiaTypesLldp_MacAddrType]*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac)
	}

	if _, ok := t.DestMac[key]; ok {
		return fmt.Errorf("duplicate key for list DestMac %v", key)
	}

	t.DestMac[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Lldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DestMac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Lldp.
func (*NokiaConf_Configure_Port_Ethernet_Lldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Lldp_DestMac represents the /nokia-conf/configure/port/ethernet/lldp/dest-mac YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Lldp_DestMac struct {
	ApplyGroups         []string                                                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	MacType             E_NokiaTypesLldp_MacAddrType                                                                                                                           `path:"mac-type" module:"nokia-conf"`
	Notification        *bool                                                                                                                                                  `path:"notification" module:"nokia-conf"`
	PortIdSubtype       E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_PortIdSubtype                                                                                         `path:"port-id-subtype" module:"nokia-conf"`
	Receive             *bool                                                                                                                                                  `path:"receive" module:"nokia-conf"`
	Transmit            *bool                                                                                                                                                  `path:"transmit" module:"nokia-conf"`
	TunnelNearestBridge *bool                                                                                                                                                  `path:"tunnel-nearest-bridge" module:"nokia-conf"`
	TxMgmtAddress       map[E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType]*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress `path:"tx-mgmt-address" module:"nokia-conf"`
	TxTlvs              *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs                                                                                                 `path:"tx-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Lldp_DestMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) IsYANGGoStruct() {}

// NewTxMgmtAddress creates a new entry in the TxMgmtAddress list of the
// NokiaConf_Configure_Port_Ethernet_Lldp_DestMac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) NewTxMgmtAddress(MgmtAddressSystemType E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType) (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxMgmtAddress == nil {
		t.TxMgmtAddress = make(map[E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType]*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress)
	}

	key := MgmtAddressSystemType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TxMgmtAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TxMgmtAddress", key)
	}

	t.TxMgmtAddress[key] = &NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress{
		MgmtAddressSystemType: MgmtAddressSystemType,
	}

	return t.TxMgmtAddress[key], nil
}

// RenameTxMgmtAddress renames an entry in the list TxMgmtAddress within
// the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) RenameTxMgmtAddress(oldK, newK E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType) error {
	if _, ok := t.TxMgmtAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in TxMgmtAddress", newK)
	}

	e, ok := t.TxMgmtAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TxMgmtAddress", oldK)
	}
	e.MgmtAddressSystemType = newK

	t.TxMgmtAddress[newK] = e
	delete(t.TxMgmtAddress, oldK)
	return nil
}

// GetOrCreateTxMgmtAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Lldp_DestMac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetOrCreateTxMgmtAddress(MgmtAddressSystemType E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType) *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress {

	key := MgmtAddressSystemType

	if v, ok := t.TxMgmtAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTxMgmtAddress(MgmtAddressSystemType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTxMgmtAddress got unexpected error: %v", err))
	}
	return v
}

// GetTxMgmtAddress retrieves the value with the specified key from
// the TxMgmtAddress map field of NokiaConf_Configure_Port_Ethernet_Lldp_DestMac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetTxMgmtAddress(MgmtAddressSystemType E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType) *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress {

	if t == nil {
		return nil
	}

	key := MgmtAddressSystemType

	if lm, ok := t.TxMgmtAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteTxMgmtAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Lldp_DestMac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) DeleteTxMgmtAddress(MgmtAddressSystemType E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType) {
	key := MgmtAddressSystemType

	delete(t.TxMgmtAddress, key)
}

// AppendTxMgmtAddress appends the supplied NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress struct to the
// list TxMgmtAddress of NokiaConf_Configure_Port_Ethernet_Lldp_DestMac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) AppendTxMgmtAddress(v *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) error {
	key := v.MgmtAddressSystemType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TxMgmtAddress == nil {
		t.TxMgmtAddress = make(map[E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType]*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress)
	}

	if _, ok := t.TxMgmtAddress[key]; ok {
		return fmt.Errorf("duplicate key for list TxMgmtAddress %v", key)
	}

	t.TxMgmtAddress[key] = v
	return nil
}

// GetOrCreateTxTlvs retrieves the value of the TxTlvs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetOrCreateTxTlvs() *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs {
	if t.TxTlvs != nil {
		return t.TxTlvs
	}
	t.TxTlvs = &NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs{}
	return t.TxTlvs
}

// GetTxTlvs returns the value of the TxTlvs struct pointer
// from NokiaConf_Configure_Port_Ethernet_Lldp_DestMac. If the receiver or the field TxTlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetTxTlvs() *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs {
	if t != nil && t.TxTlvs != nil {
		return t.TxTlvs
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMacType retrieves the value of the leaf MacType from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacType is set, it can
// safely use t.GetMacType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetMacType() E_NokiaTypesLldp_MacAddrType {
	if t == nil || t.MacType == 0 {
		return 0
	}
	return t.MacType
}

// GetNotification retrieves the value of the leaf Notification from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Notification is set, it can
// safely use t.GetNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Notification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetNotification() bool {
	if t == nil || t.Notification == nil {
		return false
	}
	return *t.Notification
}

// GetPortIdSubtype retrieves the value of the leaf PortIdSubtype from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortIdSubtype is set, it can
// safely use t.GetPortIdSubtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortIdSubtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetPortIdSubtype() E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_PortIdSubtype {
	if t == nil || t.PortIdSubtype == 0 {
		return NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_PortIdSubtype_tx_local
	}
	return t.PortIdSubtype
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetTransmit retrieves the value of the leaf Transmit from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetTransmit() bool {
	if t == nil || t.Transmit == nil {
		return false
	}
	return *t.Transmit
}

// GetTunnelNearestBridge retrieves the value of the leaf TunnelNearestBridge from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelNearestBridge is set, it can
// safely use t.GetTunnelNearestBridge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelNearestBridge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) GetTunnelNearestBridge() bool {
	if t == nil || t.TunnelNearestBridge == nil {
		return false
	}
	return *t.TunnelNearestBridge
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Notification == nil {
		var v bool = false
		t.Notification = &v
	}
	if t.PortIdSubtype == 0 {
		t.PortIdSubtype = NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_PortIdSubtype_tx_local
	}
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
	if t.Transmit == nil {
		var v bool = false
		t.Transmit = &v
	}
	if t.TunnelNearestBridge == nil {
		var v bool = false
		t.TunnelNearestBridge = &v
	}
	t.TxTlvs.PopulateDefaults()
	for _, e := range t.TxMgmtAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mac-type": t.MacType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Lldp_DestMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Lldp_DestMac.
func (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress represents the /nokia-conf/configure/port/ethernet/lldp/dest-mac/tx-mgmt-address YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress struct {
	AdminState            E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	MgmtAddressSystemType E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType `path:"mgmt-address-system-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMgmtAddressSystemType retrieves the value of the leaf MgmtAddressSystemType from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MgmtAddressSystemType is set, it can
// safely use t.GetMgmtAddressSystemType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MgmtAddressSystemType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) GetMgmtAddressSystemType() E_NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress_MgmtAddressSystemType {
	if t == nil || t.MgmtAddressSystemType == 0 {
		return 0
	}
	return t.MgmtAddressSystemType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"mgmt-address-system-type": t.MgmtAddressSystemType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress.
func (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxMgmtAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs represents the /nokia-conf/configure/port/ethernet/lldp/dest-mac/tx-tlvs YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs struct {
	PortDesc *bool `path:"port-desc" module:"nokia-conf"`
	SysCap   *bool `path:"sys-cap" module:"nokia-conf"`
	SysDesc  *bool `path:"sys-desc" module:"nokia-conf"`
	SysName  *bool `path:"sys-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) IsYANGGoStruct() {}

// GetPortDesc retrieves the value of the leaf PortDesc from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortDesc is set, it can
// safely use t.GetPortDesc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortDesc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) GetPortDesc() bool {
	if t == nil || t.PortDesc == nil {
		return false
	}
	return *t.PortDesc
}

// GetSysCap retrieves the value of the leaf SysCap from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SysCap is set, it can
// safely use t.GetSysCap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SysCap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) GetSysCap() bool {
	if t == nil || t.SysCap == nil {
		return false
	}
	return *t.SysCap
}

// GetSysDesc retrieves the value of the leaf SysDesc from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SysDesc is set, it can
// safely use t.GetSysDesc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SysDesc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) GetSysDesc() bool {
	if t == nil || t.SysDesc == nil {
		return false
	}
	return *t.SysDesc
}

// GetSysName retrieves the value of the leaf SysName from the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SysName is set, it can
// safely use t.GetSysName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SysName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) GetSysName() bool {
	if t == nil || t.SysName == nil {
		return false
	}
	return *t.SysName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortDesc == nil {
		var v bool = false
		t.PortDesc = &v
	}
	if t.SysCap == nil {
		var v bool = false
		t.SysCap = &v
	}
	if t.SysDesc == nil {
		var v bool = false
		t.SysDesc = &v
	}
	if t.SysName == nil {
		var v bool = false
		t.SysName = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs.
func (*NokiaConf_Configure_Port_Ethernet_Lldp_DestMac_TxTlvs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Loopback represents the /nokia-conf/configure/port/ethernet/loopback YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Loopback struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Port_Ethernet_Loopback_Direction `path:"direction" module:"nokia-conf"`
	SwapSrcDstMac      *bool                                                  `path:"swap-src-dst-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Loopback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Loopback) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Port_Ethernet_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) GetDirection() E_NokiaConf_Configure_Port_Ethernet_Loopback_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetSwapSrcDstMac retrieves the value of the leaf SwapSrcDstMac from the NokiaConf_Configure_Port_Ethernet_Loopback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwapSrcDstMac is set, it can
// safely use t.GetSwapSrcDstMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwapSrcDstMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) GetSwapSrcDstMac() bool {
	if t == nil || t.SwapSrcDstMac == nil {
		return false
	}
	return *t.SwapSrcDstMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Loopback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SwapSrcDstMac == nil {
		var v bool = false
		t.SwapSrcDstMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Loopback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Loopback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Loopback.
func (*NokiaConf_Configure_Port_Ethernet_Loopback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network represents the /nokia-conf/configure/port/ethernet/network YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network struct {
	AccountingPolicy   *uint32                                           `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool                                             `path:"collect-stats" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Port_Ethernet_Network_Egress `path:"egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network) GetOrCreateEgress() *NokiaConf_Configure_Port_Ethernet_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Ethernet_Network_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network) GetEgress() *NokiaConf_Configure_Port_Ethernet_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Ethernet_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Ethernet_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Egress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network.
func (*NokiaConf_Configure_Port_Ethernet_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress represents the /nokia-conf/configure/port/ethernet/network/egress YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress struct {
	PortQueues  *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues                                                                     `path:"port-queues" module:"nokia-conf"`
	QueueGroup  map[NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key]*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup `path:"queue-group" module:"nokia-conf"`
	QueuePolicy *string                                                                                                                          `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress) IsYANGGoStruct() {}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key represents the key for list QueueGroup of element /nokia-conf/configure/port/ethernet/network/egress.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key struct {
	QueueGroupName string `path:"queue-group-name"`
	InstanceId     uint16 `path:"instance-id"`
}

// NewQueueGroup creates a new entry in the QueueGroup list of the
// NokiaConf_Configure_Port_Ethernet_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) NewQueueGroup(QueueGroupName string, InstanceId uint16) (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key]*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup)
	}

	key := NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueGroup", key)
	}

	t.QueueGroup[key] = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup{
		QueueGroupName: &QueueGroupName,
		InstanceId:     &InstanceId,
	}

	return t.QueueGroup[key], nil
}

// RenameQueueGroup renames an entry in the list QueueGroup within
// the NokiaConf_Configure_Port_Ethernet_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) RenameQueueGroup(oldK, newK NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key) error {
	if _, ok := t.QueueGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueGroup", newK)
	}

	e, ok := t.QueueGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueGroup", oldK)
	}
	e.QueueGroupName = &newK.QueueGroupName
	e.InstanceId = &newK.InstanceId

	t.QueueGroup[newK] = e
	delete(t.QueueGroup, oldK)
	return nil
}

// GetOrCreateQueueGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) GetOrCreateQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup {

	key := NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if v, ok := t.QueueGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueGroup(QueueGroupName, InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueGroup got unexpected error: %v", err))
	}
	return v
}

// GetQueueGroup retrieves the value with the specified key from
// the QueueGroup map field of NokiaConf_Configure_Port_Ethernet_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) GetQueueGroup(QueueGroupName string, InstanceId uint16) *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	if lm, ok := t.QueueGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) DeleteQueueGroup(QueueGroupName string, InstanceId uint16) {
	key := NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: QueueGroupName,
		InstanceId:     InstanceId,
	}

	delete(t.QueueGroup, key)
}

// AppendQueueGroup appends the supplied NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup struct to the
// list QueueGroup of NokiaConf_Configure_Port_Ethernet_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) AppendQueueGroup(v *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) error {
	if v.QueueGroupName == nil {
		return fmt.Errorf("invalid nil key for QueueGroupName")
	}

	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key for InstanceId")
	}

	key := NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key{
		QueueGroupName: *v.QueueGroupName,
		InstanceId:     *v.InstanceId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueGroup == nil {
		t.QueueGroup = make(map[NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_Key]*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup)
	}

	if _, ok := t.QueueGroup[key]; ok {
		return fmt.Errorf("duplicate key for list QueueGroup %v", key)
	}

	t.QueueGroup[key] = v
	return nil
}

// GetOrCreatePortQueues retrieves the value of the PortQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) GetOrCreatePortQueues() *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues {
	if t.PortQueues != nil {
		return t.PortQueues
	}
	t.PortQueues = &NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues{}
	return t.PortQueues
}

// GetPortQueues returns the value of the PortQueues struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress. If the receiver or the field PortQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) GetPortQueues() *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues {
	if t != nil && t.PortQueues != nil {
		return t.PortQueues
	}
	return nil
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Port_Ethernet_Network_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortQueues.PopulateDefaults()
	for _, e := range t.QueueGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues represents the /nokia-conf/configure/port/ethernet/network/egress/port-queues YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues struct {
	Overrides *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides `path:"overrides" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) GetOrCreateOverrides() *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) GetOverrides() *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides represents the /nokia-conf/configure/port/ethernet/network/egress/port-queues/overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides struct {
	Queue map[int32]*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) AppendQueue(v *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue represents the /nokia-conf/configure/port/ethernet/network/egress/port-queues/overrides/queue YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	QueueId            *int32                                                                                         `path:"queue-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MonitorQueueDepth.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/port/ethernet/network/egress/port-queues/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_PortQueues_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup struct {
	AccountingPolicy     *uint32                                                                      `path:"accounting-policy" module:"nokia-conf"`
	AggregateRate        *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate   `path:"aggregate-rate" module:"nokia-conf"`
	ApplyGroups          []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats         *bool                                                                        `path:"collect-stats" module:"nokia-conf"`
	Description          *string                                                                      `path:"description" module:"nokia-conf"`
	HsTurbo              *bool                                                                        `path:"hs-turbo" module:"nokia-conf"`
	InstanceId           *uint16                                                                      `path:"instance-id" module:"nokia-conf"`
	PolicerControlPolicy *string                                                                      `path:"policer-control-policy" module:"nokia-conf"`
	QueueGroupName       *string                                                                      `path:"queue-group-name" module:"nokia-conf"`
	QueueOverrides       *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides  `path:"queue-overrides" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) IsYANGGoStruct() {}

// GetOrCreateAggregateRate retrieves the value of the AggregateRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetOrCreateAggregateRate() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate {
	if t.AggregateRate != nil {
		return t.AggregateRate
	}
	t.AggregateRate = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate{}
	return t.AggregateRate
}

// GetOrCreateQueueOverrides retrieves the value of the QueueOverrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetOrCreateQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides {
	if t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	t.QueueOverrides = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides{}
	return t.QueueOverrides
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggregateRate returns the value of the AggregateRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup. If the receiver or the field AggregateRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetAggregateRate() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate {
	if t != nil && t.AggregateRate != nil {
		return t.AggregateRate
	}
	return nil
}

// GetQueueOverrides returns the value of the QueueOverrides struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup. If the receiver or the field QueueOverrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetQueueOverrides() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides {
	if t != nil && t.QueueOverrides != nil {
		return t.QueueOverrides
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetSchedulerPolicy() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHsTurbo retrieves the value of the leaf HsTurbo from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsTurbo is set, it can
// safely use t.GetHsTurbo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsTurbo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetHsTurbo() bool {
	if t == nil || t.HsTurbo == nil {
		return false
	}
	return *t.HsTurbo
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetInstanceId() uint16 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetPolicerControlPolicy retrieves the value of the leaf PolicerControlPolicy from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicy is set, it can
// safely use t.GetPolicerControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetPolicerControlPolicy() string {
	if t == nil || t.PolicerControlPolicy == nil {
		return ""
	}
	return *t.PolicerControlPolicy
}

// GetQueueGroupName retrieves the value of the leaf QueueGroupName from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupName is set, it can
// safely use t.GetQueueGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) GetQueueGroupName() string {
	if t == nil || t.QueueGroupName == nil {
		return ""
	}
	return *t.QueueGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HsTurbo == nil {
		var v bool = false
		t.HsTurbo = &v
	}
	t.AggregateRate.PopulateDefaults()
	t.QueueOverrides.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	if t.QueueGroupName == nil {
		return nil, fmt.Errorf("nil value for key QueueGroupName")
	}

	return map[string]interface{}{
		"instance-id":      *t.InstanceId,
		"queue-group-name": *t.QueueGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/aggregate-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate struct {
	LimitUnusedBandwidth      *bool                                                                                `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                                `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) IsYANGGoStruct() {}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) GetRate() NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate_Rate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_AggregateRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides struct {
	Queue map[int32]*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) GetQueue(QueueId int32) *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue struct to the
// list Queue of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) AppendQueue(v *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                               `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	PercentRate        *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                              `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetDropTail() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetPercentRate() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetRate() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetCbs() NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetMbs() NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/queue-overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetCir() NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) GetPir() NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_QueueOverrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy represents the /nokia-conf/configure/port/ethernet/network/egress/queue-group/scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy.
func (*NokiaConf_Configure_Port_Ethernet_Network_Egress_QueueGroup_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_ReportAlarm represents the /nokia-conf/configure/port/ethernet/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Ethernet_ReportAlarm struct {
	AlignmentMarkerNotLocked *bool `path:"alignment-marker-not-locked" module:"nokia-conf"`
	BlockNotLocked           *bool `path:"block-not-locked" module:"nokia-conf"`
	DuplicateLane            *bool `path:"duplicate-lane" module:"nokia-conf"`
	FrameNotLocked           *bool `path:"frame-not-locked" module:"nokia-conf"`
	HighBer                  *bool `path:"high-ber" module:"nokia-conf"`
	Local                    *bool `path:"local" module:"nokia-conf"`
	Remote                   *bool `path:"remote" module:"nokia-conf"`
	SignalFail               *bool `path:"signal-fail" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_ReportAlarm) IsYANGGoStruct() {}

// GetAlignmentMarkerNotLocked retrieves the value of the leaf AlignmentMarkerNotLocked from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlignmentMarkerNotLocked is set, it can
// safely use t.GetAlignmentMarkerNotLocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlignmentMarkerNotLocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetAlignmentMarkerNotLocked() bool {
	if t == nil || t.AlignmentMarkerNotLocked == nil {
		return false
	}
	return *t.AlignmentMarkerNotLocked
}

// GetBlockNotLocked retrieves the value of the leaf BlockNotLocked from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockNotLocked is set, it can
// safely use t.GetBlockNotLocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockNotLocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetBlockNotLocked() bool {
	if t == nil || t.BlockNotLocked == nil {
		return false
	}
	return *t.BlockNotLocked
}

// GetDuplicateLane retrieves the value of the leaf DuplicateLane from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateLane is set, it can
// safely use t.GetDuplicateLane() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateLane == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetDuplicateLane() bool {
	if t == nil || t.DuplicateLane == nil {
		return false
	}
	return *t.DuplicateLane
}

// GetFrameNotLocked retrieves the value of the leaf FrameNotLocked from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameNotLocked is set, it can
// safely use t.GetFrameNotLocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameNotLocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetFrameNotLocked() bool {
	if t == nil || t.FrameNotLocked == nil {
		return false
	}
	return *t.FrameNotLocked
}

// GetHighBer retrieves the value of the leaf HighBer from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighBer is set, it can
// safely use t.GetHighBer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighBer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetHighBer() bool {
	if t == nil || t.HighBer == nil {
		return false
	}
	return *t.HighBer
}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetLocal() bool {
	if t == nil || t.Local == nil {
		return false
	}
	return *t.Local
}

// GetRemote retrieves the value of the leaf Remote from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Remote is set, it can
// safely use t.GetRemote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Remote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetRemote() bool {
	if t == nil || t.Remote == nil {
		return false
	}
	return *t.Remote
}

// GetSignalFail retrieves the value of the leaf SignalFail from the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalFail is set, it can
// safely use t.GetSignalFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalFail == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) GetSignalFail() bool {
	if t == nil || t.SignalFail == nil {
		return false
	}
	return *t.SignalFail
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_ReportAlarm.
func (*NokiaConf_Configure_Port_Ethernet_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_Ssm represents the /nokia-conf/configure/port/ethernet/ssm YANG schema element.
type NokiaConf_Configure_Port_Ethernet_Ssm struct {
	AdminState         E_NokiaTypesSros_AdminState                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	CodeType           E_NokiaConf_Configure_Port_Ethernet_Ssm_CodeType `path:"code-type" module:"nokia-conf"`
	EsmcTunnel         *bool                                            `path:"esmc-tunnel" module:"nokia-conf"`
	TxDus              *bool                                            `path:"tx-dus" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_Ssm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCodeType retrieves the value of the leaf CodeType from the NokiaConf_Configure_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CodeType is set, it can
// safely use t.GetCodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) GetCodeType() E_NokiaConf_Configure_Port_Ethernet_Ssm_CodeType {
	if t == nil || t.CodeType == 0 {
		return NokiaConf_Configure_Port_Ethernet_Ssm_CodeType_sdh
	}
	return t.CodeType
}

// GetEsmcTunnel retrieves the value of the leaf EsmcTunnel from the NokiaConf_Configure_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsmcTunnel is set, it can
// safely use t.GetEsmcTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsmcTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) GetEsmcTunnel() bool {
	if t == nil || t.EsmcTunnel == nil {
		return false
	}
	return *t.EsmcTunnel
}

// GetTxDus retrieves the value of the leaf TxDus from the NokiaConf_Configure_Port_Ethernet_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxDus is set, it can
// safely use t.GetTxDus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxDus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) GetTxDus() bool {
	if t == nil || t.TxDus == nil {
		return false
	}
	return *t.TxDus
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_Ssm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CodeType == 0 {
		t.CodeType = NokiaConf_Configure_Port_Ethernet_Ssm_CodeType_sdh
	}
	if t.EsmcTunnel == nil {
		var v bool = false
		t.EsmcTunnel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_Ssm.
func (*NokiaConf_Configure_Port_Ethernet_Ssm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_SymbolMonitor represents the /nokia-conf/configure/port/ethernet/symbol-monitor YANG schema element.
type NokiaConf_Configure_Port_Ethernet_SymbolMonitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	SignalDegrade      *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure      *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure `path:"signal-failure" module:"nokia-conf"`
	WindowSize         *uint32                                                        `path:"window-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_SymbolMonitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_SymbolMonitor) IsYANGGoStruct() {}

// GetOrCreateSignalDegrade retrieves the value of the SignalDegrade field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetOrCreateSignalDegrade() *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade {
	if t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	t.SignalDegrade = &NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade{}
	return t.SignalDegrade
}

// GetOrCreateSignalFailure retrieves the value of the SignalFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetOrCreateSignalFailure() *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure {
	if t.SignalFailure != nil {
		return t.SignalFailure
	}
	t.SignalFailure = &NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure{}
	return t.SignalFailure
}

// GetSignalDegrade returns the value of the SignalDegrade struct pointer
// from NokiaConf_Configure_Port_Ethernet_SymbolMonitor. If the receiver or the field SignalDegrade is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetSignalDegrade() *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade {
	if t != nil && t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	return nil
}

// GetSignalFailure returns the value of the SignalFailure struct pointer
// from NokiaConf_Configure_Port_Ethernet_SymbolMonitor. If the receiver or the field SignalFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetSignalFailure() *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure {
	if t != nil && t.SignalFailure != nil {
		return t.SignalFailure
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetWindowSize retrieves the value of the leaf WindowSize from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowSize is set, it can
// safely use t.GetWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) GetWindowSize() uint32 {
	if t == nil || t.WindowSize == nil {
		return 10
	}
	return *t.WindowSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_SymbolMonitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.WindowSize == nil {
		var v uint32 = 10
		t.WindowSize = &v
	}
	t.SignalDegrade.PopulateDefaults()
	t.SignalFailure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_SymbolMonitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_SymbolMonitor.
func (*NokiaConf_Configure_Port_Ethernet_SymbolMonitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade represents the /nokia-conf/configure/port/ethernet/symbol-monitor/signal-degrade YANG schema element.
type NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade.
func (*NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalDegrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure represents the /nokia-conf/configure/port/ethernet/symbol-monitor/signal-failure YANG schema element.
type NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 1
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 1
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure.
func (*NokiaConf_Configure_Port_Ethernet_SymbolMonitor_SignalFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Gnss represents the /nokia-conf/configure/port/gnss YANG schema element.
type NokiaConf_Configure_Port_Gnss struct {
	AntennaCableDelay  *uint32                                      `path:"antenna-cable-delay" module:"nokia-conf"`
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Constellation      *NokiaConf_Configure_Port_Gnss_Constellation `path:"constellation" module:"nokia-conf"`
	ElevationMaskAngle *uint32                                      `path:"elevation-mask-angle" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Gnss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Gnss) IsYANGGoStruct() {}

// GetOrCreateConstellation retrieves the value of the Constellation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Gnss) GetOrCreateConstellation() *NokiaConf_Configure_Port_Gnss_Constellation {
	if t.Constellation != nil {
		return t.Constellation
	}
	t.Constellation = &NokiaConf_Configure_Port_Gnss_Constellation{}
	return t.Constellation
}

// GetConstellation returns the value of the Constellation struct pointer
// from NokiaConf_Configure_Port_Gnss. If the receiver or the field Constellation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Gnss) GetConstellation() *NokiaConf_Configure_Port_Gnss_Constellation {
	if t != nil && t.Constellation != nil {
		return t.Constellation
	}
	return nil
}

// GetAntennaCableDelay retrieves the value of the leaf AntennaCableDelay from the NokiaConf_Configure_Port_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntennaCableDelay is set, it can
// safely use t.GetAntennaCableDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntennaCableDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Gnss) GetAntennaCableDelay() uint32 {
	if t == nil || t.AntennaCableDelay == nil {
		return 0
	}
	return *t.AntennaCableDelay
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Gnss) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Gnss) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetElevationMaskAngle retrieves the value of the leaf ElevationMaskAngle from the NokiaConf_Configure_Port_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ElevationMaskAngle is set, it can
// safely use t.GetElevationMaskAngle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ElevationMaskAngle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Gnss) GetElevationMaskAngle() uint32 {
	if t == nil || t.ElevationMaskAngle == nil {
		return 10
	}
	return *t.ElevationMaskAngle
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Gnss
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Gnss) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AntennaCableDelay == nil {
		var v uint32 = 0
		t.AntennaCableDelay = &v
	}
	if t.ElevationMaskAngle == nil {
		var v uint32 = 10
		t.ElevationMaskAngle = &v
	}
	t.Constellation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Gnss) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Gnss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Gnss) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Gnss) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Gnss.
func (*NokiaConf_Configure_Port_Gnss) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Gnss_Constellation represents the /nokia-conf/configure/port/gnss/constellation YANG schema element.
type NokiaConf_Configure_Port_Gnss_Constellation struct {
	Glonass *bool `path:"glonass" module:"nokia-conf"`
	Gps     *bool `path:"gps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Gnss_Constellation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Gnss_Constellation) IsYANGGoStruct() {}

// GetGlonass retrieves the value of the leaf Glonass from the NokiaConf_Configure_Port_Gnss_Constellation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Glonass is set, it can
// safely use t.GetGlonass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Glonass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Gnss_Constellation) GetGlonass() bool {
	if t == nil || t.Glonass == nil {
		return false
	}
	return *t.Glonass
}

// GetGps retrieves the value of the leaf Gps from the NokiaConf_Configure_Port_Gnss_Constellation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gps is set, it can
// safely use t.GetGps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Gnss_Constellation) GetGps() bool {
	if t == nil || t.Gps == nil {
		return true
	}
	return *t.Gps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Gnss_Constellation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Gnss_Constellation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Glonass == nil {
		var v bool = false
		t.Glonass = &v
	}
	if t.Gps == nil {
		var v bool = true
		t.Gps = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Gnss_Constellation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Gnss_Constellation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Gnss_Constellation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Gnss_Constellation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Gnss_Constellation.
func (*NokiaConf_Configure_Port_Gnss_Constellation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_HybridBufferAllocation represents the /nokia-conf/configure/port/hybrid-buffer-allocation YANG schema element.
type NokiaConf_Configure_Port_HybridBufferAllocation struct {
	EgressWeight  *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight  `path:"egress-weight" module:"nokia-conf"`
	IngressWeight *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight `path:"ingress-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_HybridBufferAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_HybridBufferAllocation) IsYANGGoStruct() {}

// GetOrCreateEgressWeight retrieves the value of the EgressWeight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) GetOrCreateEgressWeight() *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight {
	if t.EgressWeight != nil {
		return t.EgressWeight
	}
	t.EgressWeight = &NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight{}
	return t.EgressWeight
}

// GetOrCreateIngressWeight retrieves the value of the IngressWeight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) GetOrCreateIngressWeight() *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight {
	if t.IngressWeight != nil {
		return t.IngressWeight
	}
	t.IngressWeight = &NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight{}
	return t.IngressWeight
}

// GetEgressWeight returns the value of the EgressWeight struct pointer
// from NokiaConf_Configure_Port_HybridBufferAllocation. If the receiver or the field EgressWeight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) GetEgressWeight() *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight {
	if t != nil && t.EgressWeight != nil {
		return t.EgressWeight
	}
	return nil
}

// GetIngressWeight returns the value of the IngressWeight struct pointer
// from NokiaConf_Configure_Port_HybridBufferAllocation. If the receiver or the field IngressWeight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) GetIngressWeight() *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight {
	if t != nil && t.IngressWeight != nil {
		return t.IngressWeight
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_HybridBufferAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressWeight.PopulateDefaults()
	t.IngressWeight.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_HybridBufferAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_HybridBufferAllocation.
func (*NokiaConf_Configure_Port_HybridBufferAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight represents the /nokia-conf/configure/port/hybrid-buffer-allocation/egress-weight YANG schema element.
type NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight struct {
	Access  *uint32 `path:"access" module:"nokia-conf"`
	Network *uint32 `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) IsYANGGoStruct() {}

// GetAccess retrieves the value of the leaf Access from the NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Access is set, it can
// safely use t.GetAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Access == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) GetAccess() uint32 {
	if t == nil || t.Access == nil {
		return 50
	}
	return *t.Access
}

// GetNetwork retrieves the value of the leaf Network from the NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Network is set, it can
// safely use t.GetNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Network == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) GetNetwork() uint32 {
	if t == nil || t.Network == nil {
		return 50
	}
	return *t.Network
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Access == nil {
		var v uint32 = 50
		t.Access = &v
	}
	if t.Network == nil {
		var v uint32 = 50
		t.Network = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight.
func (*NokiaConf_Configure_Port_HybridBufferAllocation_EgressWeight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight represents the /nokia-conf/configure/port/hybrid-buffer-allocation/ingress-weight YANG schema element.
type NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight struct {
	Access  *uint32 `path:"access" module:"nokia-conf"`
	Network *uint32 `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) IsYANGGoStruct() {}

// GetAccess retrieves the value of the leaf Access from the NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Access is set, it can
// safely use t.GetAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Access == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) GetAccess() uint32 {
	if t == nil || t.Access == nil {
		return 50
	}
	return *t.Access
}

// GetNetwork retrieves the value of the leaf Network from the NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Network is set, it can
// safely use t.GetNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Network == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) GetNetwork() uint32 {
	if t == nil || t.Network == nil {
		return 50
	}
	return *t.Network
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Access == nil {
		var v uint32 = 50
		t.Access = &v
	}
	if t.Network == nil {
		var v uint32 = 50
		t.Network = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight.
func (*NokiaConf_Configure_Port_HybridBufferAllocation_IngressWeight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_ModifyBufferAllocation represents the /nokia-conf/configure/port/modify-buffer-allocation YANG schema element.
type NokiaConf_Configure_Port_ModifyBufferAllocation struct {
	PercentageOfRate *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate `path:"percentage-of-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_ModifyBufferAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_ModifyBufferAllocation) IsYANGGoStruct() {}

// GetOrCreatePercentageOfRate retrieves the value of the PercentageOfRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation) GetOrCreatePercentageOfRate() *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate {
	if t.PercentageOfRate != nil {
		return t.PercentageOfRate
	}
	t.PercentageOfRate = &NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate{}
	return t.PercentageOfRate
}

// GetPercentageOfRate returns the value of the PercentageOfRate struct pointer
// from NokiaConf_Configure_Port_ModifyBufferAllocation. If the receiver or the field PercentageOfRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation) GetPercentageOfRate() *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate {
	if t != nil && t.PercentageOfRate != nil {
		return t.PercentageOfRate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_ModifyBufferAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentageOfRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_ModifyBufferAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_ModifyBufferAllocation.
func (*NokiaConf_Configure_Port_ModifyBufferAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate represents the /nokia-conf/configure/port/modify-buffer-allocation/percentage-of-rate YANG schema element.
type NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate struct {
	Egress  *uint32 `path:"egress" module:"nokia-conf"`
	Ingress *uint32 `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) IsYANGGoStruct() {}

// GetEgress retrieves the value of the leaf Egress from the NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Egress is set, it can
// safely use t.GetEgress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Egress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) GetEgress() uint32 {
	if t == nil || t.Egress == nil {
		return 0
	}
	return *t.Egress
}

// GetIngress retrieves the value of the leaf Ingress from the NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ingress is set, it can
// safely use t.GetIngress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ingress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) GetIngress() uint32 {
	if t == nil || t.Ingress == nil {
		return 100
	}
	return *t.Ingress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ingress == nil {
		var v uint32 = 100
		t.Ingress = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate.
func (*NokiaConf_Configure_Port_ModifyBufferAllocation_PercentageOfRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Network represents the /nokia-conf/configure/port/network YANG schema element.
type NokiaConf_Configure_Port_Network struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Port_Network_Egress `path:"egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Network) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Network) GetOrCreateEgress() *NokiaConf_Configure_Port_Network_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Network_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Network. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Network) GetEgress() *NokiaConf_Configure_Port_Network_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Network.
func (*NokiaConf_Configure_Port_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Network_Egress represents the /nokia-conf/configure/port/network/egress YANG schema element.
type NokiaConf_Configure_Port_Network_Egress struct {
	Pool map[string]*NokiaConf_Configure_Port_Network_Egress_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Network_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Network_Egress) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Port_Network_Egress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Network_Egress) NewPool(Name string) (*NokiaConf_Configure_Port_Network_Egress_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Port_Network_Egress_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Port_Network_Egress_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Port_Network_Egress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Network_Egress) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Network_Egress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Network_Egress) GetOrCreatePool(Name string) *NokiaConf_Configure_Port_Network_Egress_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Port_Network_Egress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Network_Egress) GetPool(Name string) *NokiaConf_Configure_Port_Network_Egress_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Network_Egress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Network_Egress) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Port_Network_Egress_Pool struct to the
// list Pool of NokiaConf_Configure_Port_Network_Egress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Network_Egress_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Network_Egress) AppendPool(v *NokiaConf_Configure_Port_Network_Egress_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Port_Network_Egress_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Network_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Network_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Network_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Network_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Network_Egress.
func (*NokiaConf_Configure_Port_Network_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Network_Egress_Pool represents the /nokia-conf/configure/port/network/egress/pool YANG schema element.
type NokiaConf_Configure_Port_Network_Egress_Pool struct {
	AmberAlarmThreshold *uint32                                               `path:"amber-alarm-threshold" module:"nokia-conf"`
	ApplyGroups         []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Name                *string                                               `path:"name" module:"nokia-conf"`
	RedAlarmThreshold   *uint32                                               `path:"red-alarm-threshold" module:"nokia-conf"`
	ResvCbs             *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy         *string                                               `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Network_Egress_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Network_Egress_Pool) IsYANGGoStruct() {}

// GetOrCreateResvCbs retrieves the value of the ResvCbs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetOrCreateResvCbs() *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs {
	if t.ResvCbs != nil {
		return t.ResvCbs
	}
	t.ResvCbs = &NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs{}
	return t.ResvCbs
}

// GetResvCbs returns the value of the ResvCbs struct pointer
// from NokiaConf_Configure_Port_Network_Egress_Pool. If the receiver or the field ResvCbs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetResvCbs() *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs {
	if t != nil && t.ResvCbs != nil {
		return t.ResvCbs
	}
	return nil
}

// GetAmberAlarmThreshold retrieves the value of the leaf AmberAlarmThreshold from the NokiaConf_Configure_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AmberAlarmThreshold is set, it can
// safely use t.GetAmberAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AmberAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetAmberAlarmThreshold() uint32 {
	if t == nil || t.AmberAlarmThreshold == nil {
		return 0
	}
	return *t.AmberAlarmThreshold
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedAlarmThreshold retrieves the value of the leaf RedAlarmThreshold from the NokiaConf_Configure_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedAlarmThreshold is set, it can
// safely use t.GetRedAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedAlarmThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetRedAlarmThreshold() uint32 {
	if t == nil || t.RedAlarmThreshold == nil {
		return 0
	}
	return *t.RedAlarmThreshold
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Port_Network_Egress_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Network_Egress_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ResvCbs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Network_Egress_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Network_Egress_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Network_Egress_Pool.
func (*NokiaConf_Configure_Port_Network_Egress_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs represents the /nokia-conf/configure/port/network/egress/pool/resv-cbs YANG schema element.
type NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs struct {
	AmberAlarmAction *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction `path:"amber-alarm-action" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_Cbs_Union         `path:"cbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) IsYANGGoStruct() {}

// GetOrCreateAmberAlarmAction retrieves the value of the AmberAlarmAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) GetOrCreateAmberAlarmAction() *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	t.AmberAlarmAction = &NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction{}
	return t.AmberAlarmAction
}

// GetAmberAlarmAction returns the value of the AmberAlarmAction struct pointer
// from NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs. If the receiver or the field AmberAlarmAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) GetAmberAlarmAction() *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction {
	if t != nil && t.AmberAlarmAction != nil {
		return t.AmberAlarmAction
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) GetCbs() NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	return t.Cbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cbs == nil {
		t.Cbs = NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_Cbs_Enum_auto
	}
	t.AmberAlarmAction.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs.
func (*NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction represents the /nokia-conf/configure/port/network/egress/pool/resv-cbs/amber-alarm-action YANG schema element.
type NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction struct {
	Max  *uint32 `path:"max" module:"nokia-conf"`
	Step *uint32 `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) IsYANGGoStruct() {}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) GetStep() uint32 {
	if t == nil || t.Step == nil {
		return 0
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction.
func (*NokiaConf_Configure_Port_Network_Egress_Pool_ResvCbs_AmberAlarmAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu represents the /nokia-conf/configure/port/otu YANG schema element.
type NokiaConf_Configure_Port_Otu struct {
	ApplyGroups                []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AsyncMapping               *bool                                                    `path:"async-mapping" module:"nokia-conf"`
	Fec                        E_NokiaTypesPort_OtuFecMode                              `path:"fec" module:"nokia-conf"`
	FineGranularityBer         *NokiaConf_Configure_Port_Otu_FineGranularityBer         `path:"fine-granularity-ber" module:"nokia-conf"`
	Otu2LanDataRate            E_NokiaTypesPort_Otu2LanDataRate                         `path:"otu2-lan-data-rate" module:"nokia-conf"`
	PathMonitoring             *NokiaConf_Configure_Port_Otu_PathMonitoring             `path:"path-monitoring" module:"nokia-conf"`
	PayloadStructureIdentifier *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier `path:"payload-structure-identifier" module:"nokia-conf"`
	ReportAlarm                *NokiaConf_Configure_Port_Otu_ReportAlarm                `path:"report-alarm" module:"nokia-conf"`
	SdThreshold                *uint32                                                  `path:"sd-threshold" module:"nokia-conf"`
	SectionMonitoring          *NokiaConf_Configure_Port_Otu_SectionMonitoring          `path:"section-monitoring" module:"nokia-conf"`
	SfSdMethod                 E_NokiaTypesPort_OtuSfSdMethod                           `path:"sf-sd-method" module:"nokia-conf"`
	SfThreshold                *uint32                                                  `path:"sf-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu) IsYANGGoStruct() {}

// GetOrCreateFineGranularityBer retrieves the value of the FineGranularityBer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu) GetOrCreateFineGranularityBer() *NokiaConf_Configure_Port_Otu_FineGranularityBer {
	if t.FineGranularityBer != nil {
		return t.FineGranularityBer
	}
	t.FineGranularityBer = &NokiaConf_Configure_Port_Otu_FineGranularityBer{}
	return t.FineGranularityBer
}

// GetOrCreatePathMonitoring retrieves the value of the PathMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu) GetOrCreatePathMonitoring() *NokiaConf_Configure_Port_Otu_PathMonitoring {
	if t.PathMonitoring != nil {
		return t.PathMonitoring
	}
	t.PathMonitoring = &NokiaConf_Configure_Port_Otu_PathMonitoring{}
	return t.PathMonitoring
}

// GetOrCreatePayloadStructureIdentifier retrieves the value of the PayloadStructureIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu) GetOrCreatePayloadStructureIdentifier() *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier {
	if t.PayloadStructureIdentifier != nil {
		return t.PayloadStructureIdentifier
	}
	t.PayloadStructureIdentifier = &NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier{}
	return t.PayloadStructureIdentifier
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Otu_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Otu_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSectionMonitoring retrieves the value of the SectionMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu) GetOrCreateSectionMonitoring() *NokiaConf_Configure_Port_Otu_SectionMonitoring {
	if t.SectionMonitoring != nil {
		return t.SectionMonitoring
	}
	t.SectionMonitoring = &NokiaConf_Configure_Port_Otu_SectionMonitoring{}
	return t.SectionMonitoring
}

// GetFineGranularityBer returns the value of the FineGranularityBer struct pointer
// from NokiaConf_Configure_Port_Otu. If the receiver or the field FineGranularityBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu) GetFineGranularityBer() *NokiaConf_Configure_Port_Otu_FineGranularityBer {
	if t != nil && t.FineGranularityBer != nil {
		return t.FineGranularityBer
	}
	return nil
}

// GetPathMonitoring returns the value of the PathMonitoring struct pointer
// from NokiaConf_Configure_Port_Otu. If the receiver or the field PathMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu) GetPathMonitoring() *NokiaConf_Configure_Port_Otu_PathMonitoring {
	if t != nil && t.PathMonitoring != nil {
		return t.PathMonitoring
	}
	return nil
}

// GetPayloadStructureIdentifier returns the value of the PayloadStructureIdentifier struct pointer
// from NokiaConf_Configure_Port_Otu. If the receiver or the field PayloadStructureIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu) GetPayloadStructureIdentifier() *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier {
	if t != nil && t.PayloadStructureIdentifier != nil {
		return t.PayloadStructureIdentifier
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Otu. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu) GetReportAlarm() *NokiaConf_Configure_Port_Otu_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSectionMonitoring returns the value of the SectionMonitoring struct pointer
// from NokiaConf_Configure_Port_Otu. If the receiver or the field SectionMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu) GetSectionMonitoring() *NokiaConf_Configure_Port_Otu_SectionMonitoring {
	if t != nil && t.SectionMonitoring != nil {
		return t.SectionMonitoring
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsyncMapping retrieves the value of the leaf AsyncMapping from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsyncMapping is set, it can
// safely use t.GetAsyncMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsyncMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetAsyncMapping() bool {
	if t == nil || t.AsyncMapping == nil {
		return false
	}
	return *t.AsyncMapping
}

// GetFec retrieves the value of the leaf Fec from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fec is set, it can
// safely use t.GetFec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetFec() E_NokiaTypesPort_OtuFecMode {
	if t == nil || t.Fec == 0 {
		return 0
	}
	return t.Fec
}

// GetOtu2LanDataRate retrieves the value of the leaf Otu2LanDataRate from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Otu2LanDataRate is set, it can
// safely use t.GetOtu2LanDataRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Otu2LanDataRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetOtu2LanDataRate() E_NokiaTypesPort_Otu2LanDataRate {
	if t == nil || t.Otu2LanDataRate == 0 {
		return 0
	}
	return t.Otu2LanDataRate
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 7
	}
	return *t.SdThreshold
}

// GetSfSdMethod retrieves the value of the leaf SfSdMethod from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfSdMethod is set, it can
// safely use t.GetSfSdMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfSdMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetSfSdMethod() E_NokiaTypesPort_OtuSfSdMethod {
	if t == nil || t.SfSdMethod == 0 {
		return NokiaTypesPort_OtuSfSdMethod_fec
	}
	return t.SfSdMethod
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Port_Otu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 5
	}
	return *t.SfThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SdThreshold == nil {
		var v uint32 = 7
		t.SdThreshold = &v
	}
	if t.SfSdMethod == 0 {
		t.SfSdMethod = NokiaTypesPort_OtuSfSdMethod_fec
	}
	if t.SfThreshold == nil {
		var v uint32 = 5
		t.SfThreshold = &v
	}
	t.FineGranularityBer.PopulateDefaults()
	t.PathMonitoring.PopulateDefaults()
	t.PayloadStructureIdentifier.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.SectionMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu.
func (*NokiaConf_Configure_Port_Otu) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer represents the /nokia-conf/configure/port/otu/fine-granularity-ber YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer struct {
	SignalDegrade *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure `path:"signal-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer) IsYANGGoStruct() {}

// GetOrCreateSignalDegrade retrieves the value of the SignalDegrade field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) GetOrCreateSignalDegrade() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade {
	if t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	t.SignalDegrade = &NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade{}
	return t.SignalDegrade
}

// GetOrCreateSignalFailure retrieves the value of the SignalFailure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) GetOrCreateSignalFailure() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure {
	if t.SignalFailure != nil {
		return t.SignalFailure
	}
	t.SignalFailure = &NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure{}
	return t.SignalFailure
}

// GetSignalDegrade returns the value of the SignalDegrade struct pointer
// from NokiaConf_Configure_Port_Otu_FineGranularityBer. If the receiver or the field SignalDegrade is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) GetSignalDegrade() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade {
	if t != nil && t.SignalDegrade != nil {
		return t.SignalDegrade
	}
	return nil
}

// GetSignalFailure returns the value of the SignalFailure struct pointer
// from NokiaConf_Configure_Port_Otu_FineGranularityBer. If the receiver or the field SignalFailure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) GetSignalFailure() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure {
	if t != nil && t.SignalFailure != nil {
		return t.SignalFailure
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SignalDegrade.PopulateDefaults()
	t.SignalFailure.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade represents the /nokia-conf/configure/port/otu/fine-granularity-ber/signal-degrade YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade struct {
	Clear *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear `path:"clear" module:"nokia-conf"`
	Raise *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise `path:"raise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) IsYANGGoStruct() {}

// GetOrCreateClear retrieves the value of the Clear field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) GetOrCreateClear() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear {
	if t.Clear != nil {
		return t.Clear
	}
	t.Clear = &NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear{}
	return t.Clear
}

// GetOrCreateRaise retrieves the value of the Raise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) GetOrCreateRaise() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise {
	if t.Raise != nil {
		return t.Raise
	}
	t.Raise = &NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise{}
	return t.Raise
}

// GetClear returns the value of the Clear struct pointer
// from NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade. If the receiver or the field Clear is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) GetClear() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear {
	if t != nil && t.Clear != nil {
		return t.Clear
	}
	return nil
}

// GetRaise returns the value of the Raise struct pointer
// from NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade. If the receiver or the field Raise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) GetRaise() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise {
	if t != nil && t.Raise != nil {
		return t.Raise
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Clear.PopulateDefaults()
	t.Raise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear represents the /nokia-conf/configure/port/otu/fine-granularity-ber/signal-degrade/clear YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 8
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 8
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Clear) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise represents the /nokia-conf/configure/port/otu/fine-granularity-ber/signal-degrade/raise YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 7
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 7
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalDegrade_Raise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure represents the /nokia-conf/configure/port/otu/fine-granularity-ber/signal-failure YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure struct {
	Clear *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear `path:"clear" module:"nokia-conf"`
	Raise *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise `path:"raise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) IsYANGGoStruct() {}

// GetOrCreateClear retrieves the value of the Clear field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) GetOrCreateClear() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear {
	if t.Clear != nil {
		return t.Clear
	}
	t.Clear = &NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear{}
	return t.Clear
}

// GetOrCreateRaise retrieves the value of the Raise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) GetOrCreateRaise() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise {
	if t.Raise != nil {
		return t.Raise
	}
	t.Raise = &NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise{}
	return t.Raise
}

// GetClear returns the value of the Clear struct pointer
// from NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure. If the receiver or the field Clear is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) GetClear() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear {
	if t != nil && t.Clear != nil {
		return t.Clear
	}
	return nil
}

// GetRaise returns the value of the Raise struct pointer
// from NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure. If the receiver or the field Raise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) GetRaise() *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise {
	if t != nil && t.Raise != nil {
		return t.Raise
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Clear.PopulateDefaults()
	t.Raise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear represents the /nokia-conf/configure/port/otu/fine-granularity-ber/signal-failure/clear YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 6
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 6
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Clear) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise represents the /nokia-conf/configure/port/otu/fine-granularity-ber/signal-failure/raise YANG schema element.
type NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise struct {
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 5
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	if t.Threshold == nil {
		var v uint32 = 5
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise.
func (*NokiaConf_Configure_Port_Otu_FineGranularityBer_SignalFailure_Raise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_PathMonitoring represents the /nokia-conf/configure/port/otu/path-monitoring YANG schema element.
type NokiaConf_Configure_Port_Otu_PathMonitoring struct {
	TrailTraceIdentifier *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier `path:"trail-trace-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_PathMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring) IsYANGGoStruct() {}

// GetOrCreateTrailTraceIdentifier retrieves the value of the TrailTraceIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring) GetOrCreateTrailTraceIdentifier() *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier {
	if t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	t.TrailTraceIdentifier = &NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier{}
	return t.TrailTraceIdentifier
}

// GetTrailTraceIdentifier returns the value of the TrailTraceIdentifier struct pointer
// from NokiaConf_Configure_Port_Otu_PathMonitoring. If the receiver or the field TrailTraceIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring) GetTrailTraceIdentifier() *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier {
	if t != nil && t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_PathMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TrailTraceIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_PathMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_PathMonitoring.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier represents the /nokia-conf/configure/port/otu/path-monitoring/trail-trace-identifier YANG schema element.
type NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier struct {
	Expected         *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected `path:"expected" module:"nokia-conf"`
	MismatchReaction E_NokiaTypesPort_OtuTimReaction                                            `path:"mismatch-reaction" module:"nokia-conf"`
	Transmit         *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit `path:"transmit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) IsYANGGoStruct() {}

// GetOrCreateExpected retrieves the value of the Expected field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetOrCreateExpected() *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected {
	if t.Expected != nil {
		return t.Expected
	}
	t.Expected = &NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected{}
	return t.Expected
}

// GetOrCreateTransmit retrieves the value of the Transmit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetOrCreateTransmit() *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit {
	if t.Transmit != nil {
		return t.Transmit
	}
	t.Transmit = &NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit{}
	return t.Transmit
}

// GetExpected returns the value of the Expected struct pointer
// from NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier. If the receiver or the field Expected is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetExpected() *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected {
	if t != nil && t.Expected != nil {
		return t.Expected
	}
	return nil
}

// GetTransmit returns the value of the Transmit struct pointer
// from NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier. If the receiver or the field Transmit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetTransmit() *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit {
	if t != nil && t.Transmit != nil {
		return t.Transmit
	}
	return nil
}

// GetMismatchReaction retrieves the value of the leaf MismatchReaction from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchReaction is set, it can
// safely use t.GetMismatchReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) GetMismatchReaction() E_NokiaTypesPort_OtuTimReaction {
	if t == nil || t.MismatchReaction == 0 {
		return 0
	}
	return t.MismatchReaction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Expected.PopulateDefaults()
	t.Transmit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected represents the /nokia-conf/configure/port/otu/path-monitoring/trail-trace-identifier/expected YANG schema element.
type NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) IsYANGGoStruct() {}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Expected) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit represents the /nokia-conf/configure/port/otu/path-monitoring/trail-trace-identifier/transmit YANG schema element.
type NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) IsYANGGoStruct() {}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit.
func (*NokiaConf_Configure_Port_Otu_PathMonitoring_TrailTraceIdentifier_Transmit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier represents the /nokia-conf/configure/port/otu/payload-structure-identifier YANG schema element.
type NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier struct {
	Payload *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload `path:"payload" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) IsYANGGoStruct() {}

// GetOrCreatePayload retrieves the value of the Payload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) GetOrCreatePayload() *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload {
	if t.Payload != nil {
		return t.Payload
	}
	t.Payload = &NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload{}
	return t.Payload
}

// GetPayload returns the value of the Payload struct pointer
// from NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier. If the receiver or the field Payload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) GetPayload() *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload {
	if t != nil && t.Payload != nil {
		return t.Payload
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Payload.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier.
func (*NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload represents the /nokia-conf/configure/port/otu/payload-structure-identifier/payload YANG schema element.
type NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload struct {
	Expected         E_NokiaTypesPort_OtuPsiPayloadType `path:"expected" module:"nokia-conf"`
	MismatchReaction E_NokiaTypesPort_OtuTimReaction    `path:"mismatch-reaction" module:"nokia-conf"`
	Transmit         E_NokiaTypesPort_OtuPsiPayloadType `path:"transmit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) IsYANGGoStruct() {}

// GetExpected retrieves the value of the leaf Expected from the NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expected is set, it can
// safely use t.GetExpected() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expected == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) GetExpected() E_NokiaTypesPort_OtuPsiPayloadType {
	if t == nil || t.Expected == 0 {
		return NokiaTypesPort_OtuPsiPayloadType_auto
	}
	return t.Expected
}

// GetMismatchReaction retrieves the value of the leaf MismatchReaction from the NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchReaction is set, it can
// safely use t.GetMismatchReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) GetMismatchReaction() E_NokiaTypesPort_OtuTimReaction {
	if t == nil || t.MismatchReaction == 0 {
		return 0
	}
	return t.MismatchReaction
}

// GetTransmit retrieves the value of the leaf Transmit from the NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transmit is set, it can
// safely use t.GetTransmit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transmit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) GetTransmit() E_NokiaTypesPort_OtuPsiPayloadType {
	if t == nil || t.Transmit == 0 {
		return NokiaTypesPort_OtuPsiPayloadType_auto
	}
	return t.Transmit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Expected == 0 {
		t.Expected = NokiaTypesPort_OtuPsiPayloadType_auto
	}
	if t.Transmit == 0 {
		t.Transmit = NokiaTypesPort_OtuPsiPayloadType_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload.
func (*NokiaConf_Configure_Port_Otu_PayloadStructureIdentifier_Payload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_ReportAlarm represents the /nokia-conf/configure/port/otu/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Otu_ReportAlarm struct {
	FecFail   *bool `path:"fec-fail" module:"nokia-conf"`
	FecSd     *bool `path:"fec-sd" module:"nokia-conf"`
	FecSf     *bool `path:"fec-sf" module:"nokia-conf"`
	FecUncorr *bool `path:"fec-uncorr" module:"nokia-conf"`
	Loc       *bool `path:"loc" module:"nokia-conf"`
	Lof       *bool `path:"lof" module:"nokia-conf"`
	Lom       *bool `path:"lom" module:"nokia-conf"`
	Los       *bool `path:"los" module:"nokia-conf"`
	OduAis    *bool `path:"odu-ais" module:"nokia-conf"`
	OduBdi    *bool `path:"odu-bdi" module:"nokia-conf"`
	OduLck    *bool `path:"odu-lck" module:"nokia-conf"`
	OduOci    *bool `path:"odu-oci" module:"nokia-conf"`
	OduTim    *bool `path:"odu-tim" module:"nokia-conf"`
	OpuPlm    *bool `path:"opu-plm" module:"nokia-conf"`
	OtuAis    *bool `path:"otu-ais" module:"nokia-conf"`
	OtuBdi    *bool `path:"otu-bdi" module:"nokia-conf"`
	OtuBerSd  *bool `path:"otu-ber-sd" module:"nokia-conf"`
	OtuBerSf  *bool `path:"otu-ber-sf" module:"nokia-conf"`
	OtuBiae   *bool `path:"otu-biae" module:"nokia-conf"`
	OtuIae    *bool `path:"otu-iae" module:"nokia-conf"`
	OtuTim    *bool `path:"otu-tim" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_ReportAlarm) IsYANGGoStruct() {}

// GetFecFail retrieves the value of the leaf FecFail from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecFail is set, it can
// safely use t.GetFecFail() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecFail == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetFecFail() bool {
	if t == nil || t.FecFail == nil {
		return false
	}
	return *t.FecFail
}

// GetFecSd retrieves the value of the leaf FecSd from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecSd is set, it can
// safely use t.GetFecSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetFecSd() bool {
	if t == nil || t.FecSd == nil {
		return false
	}
	return *t.FecSd
}

// GetFecSf retrieves the value of the leaf FecSf from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecSf is set, it can
// safely use t.GetFecSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetFecSf() bool {
	if t == nil || t.FecSf == nil {
		return true
	}
	return *t.FecSf
}

// GetFecUncorr retrieves the value of the leaf FecUncorr from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecUncorr is set, it can
// safely use t.GetFecUncorr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecUncorr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetFecUncorr() bool {
	if t == nil || t.FecUncorr == nil {
		return false
	}
	return *t.FecUncorr
}

// GetLoc retrieves the value of the leaf Loc from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loc is set, it can
// safely use t.GetLoc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetLoc() bool {
	if t == nil || t.Loc == nil {
		return true
	}
	return *t.Loc
}

// GetLof retrieves the value of the leaf Lof from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lof is set, it can
// safely use t.GetLof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetLof() bool {
	if t == nil || t.Lof == nil {
		return true
	}
	return *t.Lof
}

// GetLom retrieves the value of the leaf Lom from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lom is set, it can
// safely use t.GetLom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lom == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetLom() bool {
	if t == nil || t.Lom == nil {
		return true
	}
	return *t.Lom
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOduAis retrieves the value of the leaf OduAis from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduAis is set, it can
// safely use t.GetOduAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduAis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOduAis() bool {
	if t == nil || t.OduAis == nil {
		return false
	}
	return *t.OduAis
}

// GetOduBdi retrieves the value of the leaf OduBdi from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduBdi is set, it can
// safely use t.GetOduBdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduBdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOduBdi() bool {
	if t == nil || t.OduBdi == nil {
		return false
	}
	return *t.OduBdi
}

// GetOduLck retrieves the value of the leaf OduLck from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduLck is set, it can
// safely use t.GetOduLck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduLck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOduLck() bool {
	if t == nil || t.OduLck == nil {
		return false
	}
	return *t.OduLck
}

// GetOduOci retrieves the value of the leaf OduOci from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduOci is set, it can
// safely use t.GetOduOci() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduOci == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOduOci() bool {
	if t == nil || t.OduOci == nil {
		return false
	}
	return *t.OduOci
}

// GetOduTim retrieves the value of the leaf OduTim from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OduTim is set, it can
// safely use t.GetOduTim() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OduTim == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOduTim() bool {
	if t == nil || t.OduTim == nil {
		return false
	}
	return *t.OduTim
}

// GetOpuPlm retrieves the value of the leaf OpuPlm from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpuPlm is set, it can
// safely use t.GetOpuPlm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpuPlm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOpuPlm() bool {
	if t == nil || t.OpuPlm == nil {
		return false
	}
	return *t.OpuPlm
}

// GetOtuAis retrieves the value of the leaf OtuAis from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuAis is set, it can
// safely use t.GetOtuAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuAis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuAis() bool {
	if t == nil || t.OtuAis == nil {
		return false
	}
	return *t.OtuAis
}

// GetOtuBdi retrieves the value of the leaf OtuBdi from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBdi is set, it can
// safely use t.GetOtuBdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuBdi() bool {
	if t == nil || t.OtuBdi == nil {
		return true
	}
	return *t.OtuBdi
}

// GetOtuBerSd retrieves the value of the leaf OtuBerSd from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBerSd is set, it can
// safely use t.GetOtuBerSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBerSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuBerSd() bool {
	if t == nil || t.OtuBerSd == nil {
		return false
	}
	return *t.OtuBerSd
}

// GetOtuBerSf retrieves the value of the leaf OtuBerSf from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBerSf is set, it can
// safely use t.GetOtuBerSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBerSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuBerSf() bool {
	if t == nil || t.OtuBerSf == nil {
		return true
	}
	return *t.OtuBerSf
}

// GetOtuBiae retrieves the value of the leaf OtuBiae from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuBiae is set, it can
// safely use t.GetOtuBiae() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuBiae == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuBiae() bool {
	if t == nil || t.OtuBiae == nil {
		return false
	}
	return *t.OtuBiae
}

// GetOtuIae retrieves the value of the leaf OtuIae from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuIae is set, it can
// safely use t.GetOtuIae() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuIae == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuIae() bool {
	if t == nil || t.OtuIae == nil {
		return false
	}
	return *t.OtuIae
}

// GetOtuTim retrieves the value of the leaf OtuTim from the NokiaConf_Configure_Port_Otu_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtuTim is set, it can
// safely use t.GetOtuTim() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtuTim == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) GetOtuTim() bool {
	if t == nil || t.OtuTim == nil {
		return false
	}
	return *t.OtuTim
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FecFail == nil {
		var v bool = false
		t.FecFail = &v
	}
	if t.FecSd == nil {
		var v bool = false
		t.FecSd = &v
	}
	if t.FecSf == nil {
		var v bool = true
		t.FecSf = &v
	}
	if t.FecUncorr == nil {
		var v bool = false
		t.FecUncorr = &v
	}
	if t.Loc == nil {
		var v bool = true
		t.Loc = &v
	}
	if t.Lof == nil {
		var v bool = true
		t.Lof = &v
	}
	if t.Lom == nil {
		var v bool = true
		t.Lom = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.OduAis == nil {
		var v bool = false
		t.OduAis = &v
	}
	if t.OduBdi == nil {
		var v bool = false
		t.OduBdi = &v
	}
	if t.OduLck == nil {
		var v bool = false
		t.OduLck = &v
	}
	if t.OduOci == nil {
		var v bool = false
		t.OduOci = &v
	}
	if t.OduTim == nil {
		var v bool = false
		t.OduTim = &v
	}
	if t.OpuPlm == nil {
		var v bool = false
		t.OpuPlm = &v
	}
	if t.OtuAis == nil {
		var v bool = false
		t.OtuAis = &v
	}
	if t.OtuBdi == nil {
		var v bool = true
		t.OtuBdi = &v
	}
	if t.OtuBerSd == nil {
		var v bool = false
		t.OtuBerSd = &v
	}
	if t.OtuBerSf == nil {
		var v bool = true
		t.OtuBerSf = &v
	}
	if t.OtuBiae == nil {
		var v bool = false
		t.OtuBiae = &v
	}
	if t.OtuIae == nil {
		var v bool = false
		t.OtuIae = &v
	}
	if t.OtuTim == nil {
		var v bool = false
		t.OtuTim = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_ReportAlarm.
func (*NokiaConf_Configure_Port_Otu_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_SectionMonitoring represents the /nokia-conf/configure/port/otu/section-monitoring YANG schema element.
type NokiaConf_Configure_Port_Otu_SectionMonitoring struct {
	TrailTraceIdentifier *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier `path:"trail-trace-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_SectionMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring) IsYANGGoStruct() {}

// GetOrCreateTrailTraceIdentifier retrieves the value of the TrailTraceIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring) GetOrCreateTrailTraceIdentifier() *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier {
	if t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	t.TrailTraceIdentifier = &NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier{}
	return t.TrailTraceIdentifier
}

// GetTrailTraceIdentifier returns the value of the TrailTraceIdentifier struct pointer
// from NokiaConf_Configure_Port_Otu_SectionMonitoring. If the receiver or the field TrailTraceIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring) GetTrailTraceIdentifier() *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier {
	if t != nil && t.TrailTraceIdentifier != nil {
		return t.TrailTraceIdentifier
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_SectionMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TrailTraceIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_SectionMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_SectionMonitoring.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier represents the /nokia-conf/configure/port/otu/section-monitoring/trail-trace-identifier YANG schema element.
type NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier struct {
	Expected         *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected `path:"expected" module:"nokia-conf"`
	MismatchReaction E_NokiaTypesPort_OtuTimReaction                                               `path:"mismatch-reaction" module:"nokia-conf"`
	Transmit         *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit `path:"transmit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) IsYANGGoStruct() {}

// GetOrCreateExpected retrieves the value of the Expected field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetOrCreateExpected() *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected {
	if t.Expected != nil {
		return t.Expected
	}
	t.Expected = &NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected{}
	return t.Expected
}

// GetOrCreateTransmit retrieves the value of the Transmit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetOrCreateTransmit() *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit {
	if t.Transmit != nil {
		return t.Transmit
	}
	t.Transmit = &NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit{}
	return t.Transmit
}

// GetExpected returns the value of the Expected struct pointer
// from NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier. If the receiver or the field Expected is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetExpected() *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected {
	if t != nil && t.Expected != nil {
		return t.Expected
	}
	return nil
}

// GetTransmit returns the value of the Transmit struct pointer
// from NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier. If the receiver or the field Transmit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetTransmit() *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit {
	if t != nil && t.Transmit != nil {
		return t.Transmit
	}
	return nil
}

// GetMismatchReaction retrieves the value of the leaf MismatchReaction from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MismatchReaction is set, it can
// safely use t.GetMismatchReaction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MismatchReaction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) GetMismatchReaction() E_NokiaTypesPort_OtuTimReaction {
	if t == nil || t.MismatchReaction == 0 {
		return 0
	}
	return t.MismatchReaction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Expected.PopulateDefaults()
	t.Transmit.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected represents the /nokia-conf/configure/port/otu/section-monitoring/trail-trace-identifier/expected YANG schema element.
type NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) IsYANGGoStruct() {
}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Expected) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit represents the /nokia-conf/configure/port/otu/section-monitoring/trail-trace-identifier/transmit YANG schema element.
type NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit struct {
	AutoGenerated YANGEmpty `path:"auto-generated" module:"nokia-conf"`
	Bytes         *string   `path:"bytes" module:"nokia-conf"`
	String        *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) IsYANGGoStruct() {
}

// GetAutoGenerated retrieves the value of the leaf AutoGenerated from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGenerated is set, it can
// safely use t.GetAutoGenerated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGenerated == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) GetAutoGenerated() YANGEmpty {
	if t == nil || t.AutoGenerated == false {
		return false
	}
	return t.AutoGenerated
}

// GetBytes retrieves the value of the leaf Bytes from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bytes is set, it can
// safely use t.GetBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) GetBytes() string {
	if t == nil || t.Bytes == nil {
		return ""
	}
	return *t.Bytes
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit.
func (*NokiaConf_Configure_Port_Otu_SectionMonitoring_TrailTraceIdentifier_Transmit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh represents the /nokia-conf/configure/port/sonet-sdh YANG schema element.
type NokiaConf_Configure_Port_SonetSdh struct {
	ApplyGroups            []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ClockSource            E_NokiaConf_Configure_Port_SonetSdh_ClockSource     `path:"clock-source" module:"nokia-conf"`
	Framing                E_NokiaConf_Configure_Port_SonetSdh_Framing         `path:"framing" module:"nokia-conf"`
	Group                  map[string]*NokiaConf_Configure_Port_SonetSdh_Group `path:"group" module:"nokia-conf"`
	HoldTime               *NokiaConf_Configure_Port_SonetSdh_HoldTime         `path:"hold-time" module:"nokia-conf"`
	Loopback               E_NokiaConf_Configure_Port_SonetSdh_Loopback        `path:"loopback" module:"nokia-conf"`
	Path                   map[string]*NokiaConf_Configure_Port_SonetSdh_Path  `path:"path" module:"nokia-conf"`
	ReportAlarm            *NokiaConf_Configure_Port_SonetSdh_ReportAlarm      `path:"report-alarm" module:"nokia-conf"`
	ResetPortOnPathDown    *bool                                               `path:"reset-port-on-path-down" module:"nokia-conf"`
	SdThreshold            *uint32                                             `path:"sd-threshold" module:"nokia-conf"`
	SectionTrace           *NokiaConf_Configure_Port_SonetSdh_SectionTrace     `path:"section-trace" module:"nokia-conf"`
	SfThreshold            *uint32                                             `path:"sf-threshold" module:"nokia-conf"`
	SingleFiber            *bool                                               `path:"single-fiber" module:"nokia-conf"`
	Speed                  E_NokiaConf_Configure_Port_SonetSdh_Speed           `path:"speed" module:"nokia-conf"`
	SuppressLowOrderAlarms *bool                                               `path:"suppress-low-order-alarms" module:"nokia-conf"`
	TxDus                  *bool                                               `path:"tx-dus" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Port_SonetSdh struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_SonetSdh) NewGroup(GroupIndex string) (*NokiaConf_Configure_Port_SonetSdh_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Port_SonetSdh_Group)
	}

	key := GroupIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Port_SonetSdh_Group{
		GroupIndex: &GroupIndex,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Port_SonetSdh struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_SonetSdh) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupIndex = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_SonetSdh. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_SonetSdh) GetOrCreateGroup(GroupIndex string) *NokiaConf_Configure_Port_SonetSdh_Group {

	key := GroupIndex

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Port_SonetSdh. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh) GetGroup(GroupIndex string) *NokiaConf_Configure_Port_SonetSdh_Group {

	if t == nil {
		return nil
	}

	key := GroupIndex

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_SonetSdh. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_SonetSdh) DeleteGroup(GroupIndex string) {
	key := GroupIndex

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Port_SonetSdh_Group struct to the
// list Group of NokiaConf_Configure_Port_SonetSdh. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_SonetSdh_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_SonetSdh) AppendGroup(v *NokiaConf_Configure_Port_SonetSdh_Group) error {
	if v.GroupIndex == nil {
		return fmt.Errorf("invalid nil key received for GroupIndex")
	}

	key := *v.GroupIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Port_SonetSdh_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_Port_SonetSdh struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_SonetSdh) NewPath(PathIndex string) (*NokiaConf_Configure_Port_SonetSdh_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Port_SonetSdh_Path)
	}

	key := PathIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_Port_SonetSdh_Path{
		PathIndex: &PathIndex,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_Port_SonetSdh struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_SonetSdh) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PathIndex = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_SonetSdh. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_SonetSdh) GetOrCreatePath(PathIndex string) *NokiaConf_Configure_Port_SonetSdh_Path {

	key := PathIndex

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PathIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_Port_SonetSdh. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh) GetPath(PathIndex string) *NokiaConf_Configure_Port_SonetSdh_Path {

	if t == nil {
		return nil
	}

	key := PathIndex

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_SonetSdh. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_SonetSdh) DeletePath(PathIndex string) {
	key := PathIndex

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_Port_SonetSdh_Path struct to the
// list Path of NokiaConf_Configure_Port_SonetSdh. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_SonetSdh_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_SonetSdh) AppendPath(v *NokiaConf_Configure_Port_SonetSdh_Path) error {
	if v.PathIndex == nil {
		return fmt.Errorf("invalid nil key received for PathIndex")
	}

	key := *v.PathIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Port_SonetSdh_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh) GetOrCreateHoldTime() *NokiaConf_Configure_Port_SonetSdh_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Port_SonetSdh_HoldTime{}
	return t.HoldTime
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_SonetSdh_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_SonetSdh_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSectionTrace retrieves the value of the SectionTrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh) GetOrCreateSectionTrace() *NokiaConf_Configure_Port_SonetSdh_SectionTrace {
	if t.SectionTrace != nil {
		return t.SectionTrace
	}
	t.SectionTrace = &NokiaConf_Configure_Port_SonetSdh_SectionTrace{}
	return t.SectionTrace
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Port_SonetSdh. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh) GetHoldTime() *NokiaConf_Configure_Port_SonetSdh_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_SonetSdh. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh) GetReportAlarm() *NokiaConf_Configure_Port_SonetSdh_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSectionTrace returns the value of the SectionTrace struct pointer
// from NokiaConf_Configure_Port_SonetSdh. If the receiver or the field SectionTrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh) GetSectionTrace() *NokiaConf_Configure_Port_SonetSdh_SectionTrace {
	if t != nil && t.SectionTrace != nil {
		return t.SectionTrace
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetClockSource() E_NokiaConf_Configure_Port_SonetSdh_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return 0
	}
	return t.ClockSource
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetFraming() E_NokiaConf_Configure_Port_SonetSdh_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Port_SonetSdh_Framing_sonet
	}
	return t.Framing
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetLoopback() E_NokiaConf_Configure_Port_SonetSdh_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetResetPortOnPathDown retrieves the value of the leaf ResetPortOnPathDown from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetPortOnPathDown is set, it can
// safely use t.GetResetPortOnPathDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetPortOnPathDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetResetPortOnPathDown() bool {
	if t == nil || t.ResetPortOnPathDown == nil {
		return false
	}
	return *t.ResetPortOnPathDown
}

// GetSdThreshold retrieves the value of the leaf SdThreshold from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdThreshold is set, it can
// safely use t.GetSdThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetSdThreshold() uint32 {
	if t == nil || t.SdThreshold == nil {
		return 6
	}
	return *t.SdThreshold
}

// GetSfThreshold retrieves the value of the leaf SfThreshold from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfThreshold is set, it can
// safely use t.GetSfThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetSfThreshold() uint32 {
	if t == nil || t.SfThreshold == nil {
		return 3
	}
	return *t.SfThreshold
}

// GetSingleFiber retrieves the value of the leaf SingleFiber from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SingleFiber is set, it can
// safely use t.GetSingleFiber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SingleFiber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetSingleFiber() bool {
	if t == nil || t.SingleFiber == nil {
		return false
	}
	return *t.SingleFiber
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetSpeed() E_NokiaConf_Configure_Port_SonetSdh_Speed {
	if t == nil || t.Speed == 0 {
		return 0
	}
	return t.Speed
}

// GetSuppressLowOrderAlarms retrieves the value of the leaf SuppressLowOrderAlarms from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressLowOrderAlarms is set, it can
// safely use t.GetSuppressLowOrderAlarms() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressLowOrderAlarms == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetSuppressLowOrderAlarms() bool {
	if t == nil || t.SuppressLowOrderAlarms == nil {
		return false
	}
	return *t.SuppressLowOrderAlarms
}

// GetTxDus retrieves the value of the leaf TxDus from the NokiaConf_Configure_Port_SonetSdh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxDus is set, it can
// safely use t.GetTxDus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxDus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh) GetTxDus() bool {
	if t == nil || t.TxDus == nil {
		return false
	}
	return *t.TxDus
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Port_SonetSdh_Framing_sonet
	}
	if t.ResetPortOnPathDown == nil {
		var v bool = false
		t.ResetPortOnPathDown = &v
	}
	if t.SdThreshold == nil {
		var v uint32 = 6
		t.SdThreshold = &v
	}
	if t.SfThreshold == nil {
		var v uint32 = 3
		t.SfThreshold = &v
	}
	if t.SingleFiber == nil {
		var v bool = false
		t.SingleFiber = &v
	}
	if t.SuppressLowOrderAlarms == nil {
		var v bool = false
		t.SuppressLowOrderAlarms = &v
	}
	if t.TxDus == nil {
		var v bool = false
		t.TxDus = &v
	}
	t.HoldTime.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.SectionTrace.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh.
func (*NokiaConf_Configure_Port_SonetSdh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Group represents the /nokia-conf/configure/port/sonet-sdh/group YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Group struct {
	ApplyGroups        []string                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                               `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupIndex         *string                                `path:"group-index" module:"nokia-conf"`
	Payload            E_NokiaTypesPort_SonetGroupPayloadType `path:"payload" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Group) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupIndex retrieves the value of the leaf GroupIndex from the NokiaConf_Configure_Port_SonetSdh_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIndex is set, it can
// safely use t.GetGroupIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) GetGroupIndex() string {
	if t == nil || t.GroupIndex == nil {
		return ""
	}
	return *t.GroupIndex
}

// GetPayload retrieves the value of the leaf Payload from the NokiaConf_Configure_Port_SonetSdh_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Payload is set, it can
// safely use t.GetPayload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Payload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) GetPayload() E_NokiaTypesPort_SonetGroupPayloadType {
	if t == nil || t.Payload == 0 {
		return NokiaTypesPort_SonetGroupPayloadType_tu3
	}
	return t.Payload
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Payload == 0 {
		t.Payload = NokiaTypesPort_SonetGroupPayloadType_tu3
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_SonetSdh_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupIndex == nil {
		return nil, fmt.Errorf("nil value for key GroupIndex")
	}

	return map[string]interface{}{
		"group-index": *t.GroupIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Group.
func (*NokiaConf_Configure_Port_SonetSdh_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_HoldTime represents the /nokia-conf/configure/port/sonet-sdh/hold-time YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Port_SonetSdh_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Port_SonetSdh_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 5
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Up == nil {
		var v uint32 = 5
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_HoldTime.
func (*NokiaConf_Configure_Port_SonetSdh_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path represents the /nokia-conf/configure/port/sonet-sdh/path YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path struct {
	AdminState             E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Crc                    *uint32                                                  `path:"crc" module:"nokia-conf"`
	Description            *string                                                  `path:"description" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Port_SonetSdh_Path_Egress           `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                      `path:"encap-type" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                  `path:"load-balancing-algorithm" module:"nokia-conf"`
	MacAddress             *string                                                  `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Port_SonetSdh_Path_Mode            `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                  `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Port_SonetSdh_Path_Network          `path:"network" module:"nokia-conf"`
	PathIndex              *string                                                  `path:"path-index" module:"nokia-conf"`
	Payload                E_NokiaTypesPort_SonetPathPayloadType                    `path:"payload" module:"nokia-conf"`
	Ppp                    *NokiaConf_Configure_Port_SonetSdh_Path_Ppp              `path:"ppp" module:"nokia-conf"`
	ReportAlarm            *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm      `path:"report-alarm" module:"nokia-conf"`
	Scramble               *bool                                                    `path:"scramble" module:"nokia-conf"`
	SignalLabel            *string                                                  `path:"signal-label" module:"nokia-conf"`
	TraceString            NokiaConf_Configure_Port_SonetSdh_Path_TraceString_Union `path:"trace-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetOrCreateEgress() *NokiaConf_Configure_Port_SonetSdh_Path_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_SonetSdh_Path_Egress{}
	return t.Egress
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetOrCreateNetwork() *NokiaConf_Configure_Port_SonetSdh_Path_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_SonetSdh_Path_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetOrCreatePpp() *NokiaConf_Configure_Port_SonetSdh_Path_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Port_SonetSdh_Path_Ppp{}
	return t.Ppp
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm{}
	return t.ReportAlarm
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetEgress() *NokiaConf_Configure_Port_SonetSdh_Path_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetNetwork() *NokiaConf_Configure_Port_SonetSdh_Path_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetPpp() *NokiaConf_Configure_Port_SonetSdh_Path_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetReportAlarm() *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetMode() E_NokiaConf_Configure_Port_SonetSdh_Path_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPathIndex retrieves the value of the leaf PathIndex from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathIndex is set, it can
// safely use t.GetPathIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetPathIndex() string {
	if t == nil || t.PathIndex == nil {
		return ""
	}
	return *t.PathIndex
}

// GetPayload retrieves the value of the leaf Payload from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Payload is set, it can
// safely use t.GetPayload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Payload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetPayload() E_NokiaTypesPort_SonetPathPayloadType {
	if t == nil || t.Payload == 0 {
		return 0
	}
	return t.Payload
}

// GetScramble retrieves the value of the leaf Scramble from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scramble is set, it can
// safely use t.GetScramble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scramble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetScramble() bool {
	if t == nil || t.Scramble == nil {
		return false
	}
	return *t.Scramble
}

// GetSignalLabel retrieves the value of the leaf SignalLabel from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalLabel is set, it can
// safely use t.GetSignalLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetSignalLabel() string {
	if t == nil || t.SignalLabel == nil {
		return ""
	}
	return *t.SignalLabel
}

// GetTraceString retrieves the value of the leaf TraceString from the NokiaConf_Configure_Port_SonetSdh_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TraceString is set, it can
// safely use t.GetTraceString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TraceString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) GetTraceString() NokiaConf_Configure_Port_SonetSdh_Path_TraceString_Union {
	if t == nil || t.TraceString == nil {
		return nil
	}
	return t.TraceString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	t.Egress.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_SonetSdh_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathIndex == nil {
		return nil, fmt.Errorf("nil value for key PathIndex")
	}

	return map[string]interface{}{
		"path-index": *t.PathIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path.
func (*NokiaConf_Configure_Port_SonetSdh_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress represents the /nokia-conf/configure/port/sonet-sdh/path/egress YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/port/sonet-sdh/path/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/sonet-sdh/path/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[uint32]*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate            *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate          `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel uint32) (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: &PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel uint32) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel      *uint32                                                                                        `path:"priority-level" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() uint32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/port/sonet-sdh/path/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                       `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Network represents the /nokia-conf/configure/port/sonet-sdh/path/network YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Network struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy        *string  `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Port_SonetSdh_Path_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Network.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Ppp represents the /nokia-conf/configure/port/sonet-sdh/path/ppp YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Ppp struct {
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Keepalive          *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Ppp) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Port_SonetSdh_Path_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) GetKeepalive() *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_SonetSdh_Path_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_SonetSdh_Path_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Ppp.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive represents the /nokia-conf/configure/port/sonet-sdh/path/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive struct {
	DropCount *uint32                                                             `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive.
func (*NokiaConf_Configure_Port_SonetSdh_Path_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm represents the /nokia-conf/configure/port/sonet-sdh/path/report-alarm YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm struct {
	Pais  *bool `path:"pais" module:"nokia-conf"`
	Plcd  *bool `path:"plcd" module:"nokia-conf"`
	Plop  *bool `path:"plop" module:"nokia-conf"`
	Pplm  *bool `path:"pplm" module:"nokia-conf"`
	Prdi  *bool `path:"prdi" module:"nokia-conf"`
	Prei  *bool `path:"prei" module:"nokia-conf"`
	Puneq *bool `path:"puneq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) IsYANGGoStruct() {}

// GetPais retrieves the value of the leaf Pais from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pais is set, it can
// safely use t.GetPais() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPais() bool {
	if t == nil || t.Pais == nil {
		return false
	}
	return *t.Pais
}

// GetPlcd retrieves the value of the leaf Plcd from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Plcd is set, it can
// safely use t.GetPlcd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Plcd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPlcd() bool {
	if t == nil || t.Plcd == nil {
		return false
	}
	return *t.Plcd
}

// GetPlop retrieves the value of the leaf Plop from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Plop is set, it can
// safely use t.GetPlop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Plop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPlop() bool {
	if t == nil || t.Plop == nil {
		return true
	}
	return *t.Plop
}

// GetPplm retrieves the value of the leaf Pplm from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pplm is set, it can
// safely use t.GetPplm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pplm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPplm() bool {
	if t == nil || t.Pplm == nil {
		return true
	}
	return *t.Pplm
}

// GetPrdi retrieves the value of the leaf Prdi from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prdi is set, it can
// safely use t.GetPrdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPrdi() bool {
	if t == nil || t.Prdi == nil {
		return false
	}
	return *t.Prdi
}

// GetPrei retrieves the value of the leaf Prei from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prei is set, it can
// safely use t.GetPrei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPrei() bool {
	if t == nil || t.Prei == nil {
		return false
	}
	return *t.Prei
}

// GetPuneq retrieves the value of the leaf Puneq from the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Puneq is set, it can
// safely use t.GetPuneq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Puneq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) GetPuneq() bool {
	if t == nil || t.Puneq == nil {
		return true
	}
	return *t.Puneq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pais == nil {
		var v bool = false
		t.Pais = &v
	}
	if t.Plcd == nil {
		var v bool = false
		t.Plcd = &v
	}
	if t.Plop == nil {
		var v bool = true
		t.Plop = &v
	}
	if t.Pplm == nil {
		var v bool = true
		t.Pplm = &v
	}
	if t.Prdi == nil {
		var v bool = false
		t.Prdi = &v
	}
	if t.Prei == nil {
		var v bool = false
		t.Prei = &v
	}
	if t.Puneq == nil {
		var v bool = true
		t.Puneq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm.
func (*NokiaConf_Configure_Port_SonetSdh_Path_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_ReportAlarm represents the /nokia-conf/configure/port/sonet-sdh/report-alarm YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_ReportAlarm struct {
	Lais    *bool `path:"lais" module:"nokia-conf"`
	Lb2ErSd *bool `path:"lb2er-sd" module:"nokia-conf"`
	Lb2ErSf *bool `path:"lb2er-sf" module:"nokia-conf"`
	Loc     *bool `path:"loc" module:"nokia-conf"`
	Lrdi    *bool `path:"lrdi" module:"nokia-conf"`
	Lrei    *bool `path:"lrei" module:"nokia-conf"`
	Slof    *bool `path:"slof" module:"nokia-conf"`
	Slos    *bool `path:"slos" module:"nokia-conf"`
	Ss1F    *bool `path:"ss1f" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_ReportAlarm) IsYANGGoStruct() {}

// GetLais retrieves the value of the leaf Lais from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lais is set, it can
// safely use t.GetLais() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetLais() bool {
	if t == nil || t.Lais == nil {
		return false
	}
	return *t.Lais
}

// GetLb2ErSd retrieves the value of the leaf Lb2ErSd from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lb2ErSd is set, it can
// safely use t.GetLb2ErSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lb2ErSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetLb2ErSd() bool {
	if t == nil || t.Lb2ErSd == nil {
		return false
	}
	return *t.Lb2ErSd
}

// GetLb2ErSf retrieves the value of the leaf Lb2ErSf from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lb2ErSf is set, it can
// safely use t.GetLb2ErSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lb2ErSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetLb2ErSf() bool {
	if t == nil || t.Lb2ErSf == nil {
		return true
	}
	return *t.Lb2ErSf
}

// GetLoc retrieves the value of the leaf Loc from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loc is set, it can
// safely use t.GetLoc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetLoc() bool {
	if t == nil || t.Loc == nil {
		return true
	}
	return *t.Loc
}

// GetLrdi retrieves the value of the leaf Lrdi from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lrdi is set, it can
// safely use t.GetLrdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lrdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetLrdi() bool {
	if t == nil || t.Lrdi == nil {
		return true
	}
	return *t.Lrdi
}

// GetLrei retrieves the value of the leaf Lrei from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lrei is set, it can
// safely use t.GetLrei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lrei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetLrei() bool {
	if t == nil || t.Lrei == nil {
		return false
	}
	return *t.Lrei
}

// GetSlof retrieves the value of the leaf Slof from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Slof is set, it can
// safely use t.GetSlof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Slof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetSlof() bool {
	if t == nil || t.Slof == nil {
		return true
	}
	return *t.Slof
}

// GetSlos retrieves the value of the leaf Slos from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Slos is set, it can
// safely use t.GetSlos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Slos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetSlos() bool {
	if t == nil || t.Slos == nil {
		return true
	}
	return *t.Slos
}

// GetSs1F retrieves the value of the leaf Ss1F from the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ss1F is set, it can
// safely use t.GetSs1F() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ss1F == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) GetSs1F() bool {
	if t == nil || t.Ss1F == nil {
		return false
	}
	return *t.Ss1F
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Lais == nil {
		var v bool = false
		t.Lais = &v
	}
	if t.Lb2ErSd == nil {
		var v bool = false
		t.Lb2ErSd = &v
	}
	if t.Lb2ErSf == nil {
		var v bool = true
		t.Lb2ErSf = &v
	}
	if t.Loc == nil {
		var v bool = true
		t.Loc = &v
	}
	if t.Lrdi == nil {
		var v bool = true
		t.Lrdi = &v
	}
	if t.Lrei == nil {
		var v bool = false
		t.Lrei = &v
	}
	if t.Slof == nil {
		var v bool = true
		t.Slof = &v
	}
	if t.Slos == nil {
		var v bool = true
		t.Slos = &v
	}
	if t.Ss1F == nil {
		var v bool = false
		t.Ss1F = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_ReportAlarm.
func (*NokiaConf_Configure_Port_SonetSdh_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_SonetSdh_SectionTrace represents the /nokia-conf/configure/port/sonet-sdh/section-trace YANG schema element.
type NokiaConf_Configure_Port_SonetSdh_SectionTrace struct {
	Byte        *string   `path:"byte" module:"nokia-conf"`
	IncrementZ0 YANGEmpty `path:"increment-z0" module:"nokia-conf"`
	String      *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_SonetSdh_SectionTrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_SonetSdh_SectionTrace) IsYANGGoStruct() {}

// GetByte retrieves the value of the leaf Byte from the NokiaConf_Configure_Port_SonetSdh_SectionTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Byte is set, it can
// safely use t.GetByte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) GetByte() string {
	if t == nil || t.Byte == nil {
		return "1"
	}
	return *t.Byte
}

// GetIncrementZ0 retrieves the value of the leaf IncrementZ0 from the NokiaConf_Configure_Port_SonetSdh_SectionTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementZ0 is set, it can
// safely use t.GetIncrementZ0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementZ0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) GetIncrementZ0() YANGEmpty {
	if t == nil || t.IncrementZ0 == false {
		return false
	}
	return t.IncrementZ0
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Port_SonetSdh_SectionTrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_SonetSdh_SectionTrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Byte == nil {
		var v string = "1"
		t.Byte = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_SonetSdh_SectionTrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_SonetSdh_SectionTrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_SonetSdh_SectionTrace.
func (*NokiaConf_Configure_Port_SonetSdh_SectionTrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm represents the /nokia-conf/configure/port/tdm YANG schema element.
type NokiaConf_Configure_Port_Tdm struct {
	ApplyGroups        []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Buildout           E_NokiaConf_Configure_Port_Tdm_Buildout      `path:"buildout" module:"nokia-conf"`
	Ds1                map[string]*NokiaConf_Configure_Port_Tdm_Ds1 `path:"ds1" module:"nokia-conf"`
	Ds3                map[string]*NokiaConf_Configure_Port_Tdm_Ds3 `path:"ds3" module:"nokia-conf"`
	E1                 map[string]*NokiaConf_Configure_Port_Tdm_E1  `path:"e1" module:"nokia-conf"`
	E3                 map[string]*NokiaConf_Configure_Port_Tdm_E3  `path:"e3" module:"nokia-conf"`
	Encoding           E_NokiaConf_Configure_Port_Tdm_Encoding      `path:"encoding" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Port_Tdm_HoldTime       `path:"hold-time" module:"nokia-conf"`
	LineImpedance      *uint32                                      `path:"line-impedance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm) IsYANGGoStruct() {}

// NewDs1 creates a new entry in the Ds1 list of the
// NokiaConf_Configure_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm) NewDs1(Ds1Index string) (*NokiaConf_Configure_Port_Tdm_Ds1, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds1 == nil {
		t.Ds1 = make(map[string]*NokiaConf_Configure_Port_Tdm_Ds1)
	}

	key := Ds1Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ds1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ds1", key)
	}

	t.Ds1[key] = &NokiaConf_Configure_Port_Tdm_Ds1{
		Ds1Index: &Ds1Index,
	}

	return t.Ds1[key], nil
}

// RenameDs1 renames an entry in the list Ds1 within
// the NokiaConf_Configure_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm) RenameDs1(oldK, newK string) error {
	if _, ok := t.Ds1[newK]; ok {
		return fmt.Errorf("key %v already exists in Ds1", newK)
	}

	e, ok := t.Ds1[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ds1", oldK)
	}
	e.Ds1Index = &newK

	t.Ds1[newK] = e
	delete(t.Ds1, oldK)
	return nil
}

// GetOrCreateDs1 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm) GetOrCreateDs1(Ds1Index string) *NokiaConf_Configure_Port_Tdm_Ds1 {

	key := Ds1Index

	if v, ok := t.Ds1[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDs1(Ds1Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDs1 got unexpected error: %v", err))
	}
	return v
}

// GetDs1 retrieves the value with the specified key from
// the Ds1 map field of NokiaConf_Configure_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm) GetDs1(Ds1Index string) *NokiaConf_Configure_Port_Tdm_Ds1 {

	if t == nil {
		return nil
	}

	key := Ds1Index

	if lm, ok := t.Ds1[key]; ok {
		return lm
	}
	return nil
}

// DeleteDs1 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm) DeleteDs1(Ds1Index string) {
	key := Ds1Index

	delete(t.Ds1, key)
}

// AppendDs1 appends the supplied NokiaConf_Configure_Port_Tdm_Ds1 struct to the
// list Ds1 of NokiaConf_Configure_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_Ds1 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm) AppendDs1(v *NokiaConf_Configure_Port_Tdm_Ds1) error {
	if v.Ds1Index == nil {
		return fmt.Errorf("invalid nil key received for Ds1Index")
	}

	key := *v.Ds1Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds1 == nil {
		t.Ds1 = make(map[string]*NokiaConf_Configure_Port_Tdm_Ds1)
	}

	if _, ok := t.Ds1[key]; ok {
		return fmt.Errorf("duplicate key for list Ds1 %v", key)
	}

	t.Ds1[key] = v
	return nil
}

// NewDs3 creates a new entry in the Ds3 list of the
// NokiaConf_Configure_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm) NewDs3(Ds3Index string) (*NokiaConf_Configure_Port_Tdm_Ds3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds3 == nil {
		t.Ds3 = make(map[string]*NokiaConf_Configure_Port_Tdm_Ds3)
	}

	key := Ds3Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ds3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ds3", key)
	}

	t.Ds3[key] = &NokiaConf_Configure_Port_Tdm_Ds3{
		Ds3Index: &Ds3Index,
	}

	return t.Ds3[key], nil
}

// RenameDs3 renames an entry in the list Ds3 within
// the NokiaConf_Configure_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm) RenameDs3(oldK, newK string) error {
	if _, ok := t.Ds3[newK]; ok {
		return fmt.Errorf("key %v already exists in Ds3", newK)
	}

	e, ok := t.Ds3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ds3", oldK)
	}
	e.Ds3Index = &newK

	t.Ds3[newK] = e
	delete(t.Ds3, oldK)
	return nil
}

// GetOrCreateDs3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm) GetOrCreateDs3(Ds3Index string) *NokiaConf_Configure_Port_Tdm_Ds3 {

	key := Ds3Index

	if v, ok := t.Ds3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDs3(Ds3Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDs3 got unexpected error: %v", err))
	}
	return v
}

// GetDs3 retrieves the value with the specified key from
// the Ds3 map field of NokiaConf_Configure_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm) GetDs3(Ds3Index string) *NokiaConf_Configure_Port_Tdm_Ds3 {

	if t == nil {
		return nil
	}

	key := Ds3Index

	if lm, ok := t.Ds3[key]; ok {
		return lm
	}
	return nil
}

// DeleteDs3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm) DeleteDs3(Ds3Index string) {
	key := Ds3Index

	delete(t.Ds3, key)
}

// AppendDs3 appends the supplied NokiaConf_Configure_Port_Tdm_Ds3 struct to the
// list Ds3 of NokiaConf_Configure_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_Ds3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm) AppendDs3(v *NokiaConf_Configure_Port_Tdm_Ds3) error {
	if v.Ds3Index == nil {
		return fmt.Errorf("invalid nil key received for Ds3Index")
	}

	key := *v.Ds3Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ds3 == nil {
		t.Ds3 = make(map[string]*NokiaConf_Configure_Port_Tdm_Ds3)
	}

	if _, ok := t.Ds3[key]; ok {
		return fmt.Errorf("duplicate key for list Ds3 %v", key)
	}

	t.Ds3[key] = v
	return nil
}

// NewE1 creates a new entry in the E1 list of the
// NokiaConf_Configure_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm) NewE1(E1Index string) (*NokiaConf_Configure_Port_Tdm_E1, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E1 == nil {
		t.E1 = make(map[string]*NokiaConf_Configure_Port_Tdm_E1)
	}

	key := E1Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.E1[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list E1", key)
	}

	t.E1[key] = &NokiaConf_Configure_Port_Tdm_E1{
		E1Index: &E1Index,
	}

	return t.E1[key], nil
}

// RenameE1 renames an entry in the list E1 within
// the NokiaConf_Configure_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm) RenameE1(oldK, newK string) error {
	if _, ok := t.E1[newK]; ok {
		return fmt.Errorf("key %v already exists in E1", newK)
	}

	e, ok := t.E1[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in E1", oldK)
	}
	e.E1Index = &newK

	t.E1[newK] = e
	delete(t.E1, oldK)
	return nil
}

// GetOrCreateE1 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm) GetOrCreateE1(E1Index string) *NokiaConf_Configure_Port_Tdm_E1 {

	key := E1Index

	if v, ok := t.E1[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewE1(E1Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateE1 got unexpected error: %v", err))
	}
	return v
}

// GetE1 retrieves the value with the specified key from
// the E1 map field of NokiaConf_Configure_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm) GetE1(E1Index string) *NokiaConf_Configure_Port_Tdm_E1 {

	if t == nil {
		return nil
	}

	key := E1Index

	if lm, ok := t.E1[key]; ok {
		return lm
	}
	return nil
}

// DeleteE1 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm) DeleteE1(E1Index string) {
	key := E1Index

	delete(t.E1, key)
}

// AppendE1 appends the supplied NokiaConf_Configure_Port_Tdm_E1 struct to the
// list E1 of NokiaConf_Configure_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_E1 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm) AppendE1(v *NokiaConf_Configure_Port_Tdm_E1) error {
	if v.E1Index == nil {
		return fmt.Errorf("invalid nil key received for E1Index")
	}

	key := *v.E1Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E1 == nil {
		t.E1 = make(map[string]*NokiaConf_Configure_Port_Tdm_E1)
	}

	if _, ok := t.E1[key]; ok {
		return fmt.Errorf("duplicate key for list E1 %v", key)
	}

	t.E1[key] = v
	return nil
}

// NewE3 creates a new entry in the E3 list of the
// NokiaConf_Configure_Port_Tdm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm) NewE3(E3Index string) (*NokiaConf_Configure_Port_Tdm_E3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E3 == nil {
		t.E3 = make(map[string]*NokiaConf_Configure_Port_Tdm_E3)
	}

	key := E3Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.E3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list E3", key)
	}

	t.E3[key] = &NokiaConf_Configure_Port_Tdm_E3{
		E3Index: &E3Index,
	}

	return t.E3[key], nil
}

// RenameE3 renames an entry in the list E3 within
// the NokiaConf_Configure_Port_Tdm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm) RenameE3(oldK, newK string) error {
	if _, ok := t.E3[newK]; ok {
		return fmt.Errorf("key %v already exists in E3", newK)
	}

	e, ok := t.E3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in E3", oldK)
	}
	e.E3Index = &newK

	t.E3[newK] = e
	delete(t.E3, oldK)
	return nil
}

// GetOrCreateE3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm) GetOrCreateE3(E3Index string) *NokiaConf_Configure_Port_Tdm_E3 {

	key := E3Index

	if v, ok := t.E3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewE3(E3Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateE3 got unexpected error: %v", err))
	}
	return v
}

// GetE3 retrieves the value with the specified key from
// the E3 map field of NokiaConf_Configure_Port_Tdm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm) GetE3(E3Index string) *NokiaConf_Configure_Port_Tdm_E3 {

	if t == nil {
		return nil
	}

	key := E3Index

	if lm, ok := t.E3[key]; ok {
		return lm
	}
	return nil
}

// DeleteE3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm) DeleteE3(E3Index string) {
	key := E3Index

	delete(t.E3, key)
}

// AppendE3 appends the supplied NokiaConf_Configure_Port_Tdm_E3 struct to the
// list E3 of NokiaConf_Configure_Port_Tdm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_E3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm) AppendE3(v *NokiaConf_Configure_Port_Tdm_E3) error {
	if v.E3Index == nil {
		return fmt.Errorf("invalid nil key received for E3Index")
	}

	key := *v.E3Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.E3 == nil {
		t.E3 = make(map[string]*NokiaConf_Configure_Port_Tdm_E3)
	}

	if _, ok := t.E3[key]; ok {
		return fmt.Errorf("duplicate key for list E3 %v", key)
	}

	t.E3[key] = v
	return nil
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm) GetOrCreateHoldTime() *NokiaConf_Configure_Port_Tdm_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Port_Tdm_HoldTime{}
	return t.HoldTime
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Port_Tdm. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm) GetHoldTime() *NokiaConf_Configure_Port_Tdm_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBuildout retrieves the value of the leaf Buildout from the NokiaConf_Configure_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Buildout is set, it can
// safely use t.GetBuildout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Buildout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm) GetBuildout() E_NokiaConf_Configure_Port_Tdm_Buildout {
	if t == nil || t.Buildout == 0 {
		return NokiaConf_Configure_Port_Tdm_Buildout_short
	}
	return t.Buildout
}

// GetEncoding retrieves the value of the leaf Encoding from the NokiaConf_Configure_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encoding is set, it can
// safely use t.GetEncoding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encoding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm) GetEncoding() E_NokiaConf_Configure_Port_Tdm_Encoding {
	if t == nil || t.Encoding == 0 {
		return 0
	}
	return t.Encoding
}

// GetLineImpedance retrieves the value of the leaf LineImpedance from the NokiaConf_Configure_Port_Tdm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LineImpedance is set, it can
// safely use t.GetLineImpedance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LineImpedance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm) GetLineImpedance() uint32 {
	if t == nil || t.LineImpedance == nil {
		return 0
	}
	return *t.LineImpedance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Buildout == 0 {
		t.Buildout = NokiaConf_Configure_Port_Tdm_Buildout_short
	}
	t.HoldTime.PopulateDefaults()
	for _, e := range t.Ds1 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ds3 {
		e.PopulateDefaults()
	}
	for _, e := range t.E1 {
		e.PopulateDefaults()
	}
	for _, e := range t.E3 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm.
func (*NokiaConf_Configure_Port_Tdm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1 represents the /nokia-conf/configure/port/tdm/ds1 YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1 struct {
	AdminState         E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	BerThreshold       *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold            `path:"ber-threshold" module:"nokia-conf"`
	ChannelGroup       map[uint32]*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup `path:"channel-group" module:"nokia-conf"`
	ClockSource        E_NokiaConf_Configure_Port_Tdm_Ds1_ClockSource            `path:"clock-source" module:"nokia-conf"`
	Ds1Index           *string                                                   `path:"ds1-index" module:"nokia-conf"`
	Framing            E_NokiaConf_Configure_Port_Tdm_Ds1_Framing                `path:"framing" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime                `path:"hold-time" module:"nokia-conf"`
	Loopback           E_NokiaConf_Configure_Port_Tdm_Ds1_Loopback               `path:"loopback" module:"nokia-conf"`
	RemoteLoopRespond  *bool                                                     `path:"remote-loop-respond" module:"nokia-conf"`
	ReportAlarm        *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm             `path:"report-alarm" module:"nokia-conf"`
	SignalMode         E_NokiaConf_Configure_Port_Tdm_Ds1_SignalMode             `path:"signal-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1) IsYANGGoStruct() {}

// NewChannelGroup creates a new entry in the ChannelGroup list of the
// NokiaConf_Configure_Port_Tdm_Ds1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) NewChannelGroup(Ds0Index uint32) (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[uint32]*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup)
	}

	key := Ds0Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ChannelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ChannelGroup", key)
	}

	t.ChannelGroup[key] = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup{
		Ds0Index: &Ds0Index,
	}

	return t.ChannelGroup[key], nil
}

// RenameChannelGroup renames an entry in the list ChannelGroup within
// the NokiaConf_Configure_Port_Tdm_Ds1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) RenameChannelGroup(oldK, newK uint32) error {
	if _, ok := t.ChannelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ChannelGroup", newK)
	}

	e, ok := t.ChannelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ChannelGroup", oldK)
	}
	e.Ds0Index = &newK

	t.ChannelGroup[newK] = e
	delete(t.ChannelGroup, oldK)
	return nil
}

// GetOrCreateChannelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_Ds1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetOrCreateChannelGroup(Ds0Index uint32) *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup {

	key := Ds0Index

	if v, ok := t.ChannelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannelGroup(Ds0Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannelGroup got unexpected error: %v", err))
	}
	return v
}

// GetChannelGroup retrieves the value with the specified key from
// the ChannelGroup map field of NokiaConf_Configure_Port_Tdm_Ds1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetChannelGroup(Ds0Index uint32) *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup {

	if t == nil {
		return nil
	}

	key := Ds0Index

	if lm, ok := t.ChannelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteChannelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_Ds1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) DeleteChannelGroup(Ds0Index uint32) {
	key := Ds0Index

	delete(t.ChannelGroup, key)
}

// AppendChannelGroup appends the supplied NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup struct to the
// list ChannelGroup of NokiaConf_Configure_Port_Tdm_Ds1. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) AppendChannelGroup(v *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) error {
	if v.Ds0Index == nil {
		return fmt.Errorf("invalid nil key received for Ds0Index")
	}

	key := *v.Ds0Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ChannelGroup == nil {
		t.ChannelGroup = make(map[uint32]*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup)
	}

	if _, ok := t.ChannelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ChannelGroup %v", key)
	}

	t.ChannelGroup[key] = v
	return nil
}

// GetOrCreateBerThreshold retrieves the value of the BerThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetOrCreateBerThreshold() *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold {
	if t.BerThreshold != nil {
		return t.BerThreshold
	}
	t.BerThreshold = &NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold{}
	return t.BerThreshold
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetOrCreateHoldTime() *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Port_Tdm_Ds1_HoldTime{}
	return t.HoldTime
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm{}
	return t.ReportAlarm
}

// GetBerThreshold returns the value of the BerThreshold struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1. If the receiver or the field BerThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetBerThreshold() *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold {
	if t != nil && t.BerThreshold != nil {
		return t.BerThreshold
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetHoldTime() *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetReportAlarm() *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetClockSource() E_NokiaConf_Configure_Port_Tdm_Ds1_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return 0
	}
	return t.ClockSource
}

// GetDs1Index retrieves the value of the leaf Ds1Index from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds1Index is set, it can
// safely use t.GetDs1Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds1Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetDs1Index() string {
	if t == nil || t.Ds1Index == nil {
		return ""
	}
	return *t.Ds1Index
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetFraming() E_NokiaConf_Configure_Port_Tdm_Ds1_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Port_Tdm_Ds1_Framing_extended_super_frame
	}
	return t.Framing
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetLoopback() E_NokiaConf_Configure_Port_Tdm_Ds1_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetRemoteLoopRespond retrieves the value of the leaf RemoteLoopRespond from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteLoopRespond is set, it can
// safely use t.GetRemoteLoopRespond() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteLoopRespond == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetRemoteLoopRespond() bool {
	if t == nil || t.RemoteLoopRespond == nil {
		return false
	}
	return *t.RemoteLoopRespond
}

// GetSignalMode retrieves the value of the leaf SignalMode from the NokiaConf_Configure_Port_Tdm_Ds1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalMode is set, it can
// safely use t.GetSignalMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) GetSignalMode() E_NokiaConf_Configure_Port_Tdm_Ds1_SignalMode {
	if t == nil || t.SignalMode == 0 {
		return 0
	}
	return t.SignalMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Port_Tdm_Ds1_Framing_extended_super_frame
	}
	if t.RemoteLoopRespond == nil {
		var v bool = false
		t.RemoteLoopRespond = &v
	}
	t.BerThreshold.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	for _, e := range t.ChannelGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_Ds1 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ds1Index == nil {
		return nil, fmt.Errorf("nil value for key Ds1Index")
	}

	return map[string]interface{}{
		"ds1-index": *t.Ds1Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1.
func (*NokiaConf_Configure_Port_Tdm_Ds1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold represents the /nokia-conf/configure/port/tdm/ds1/ber-threshold YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold struct {
	SignalDegrade *uint32 `path:"signal-degrade" module:"nokia-conf"`
	SignalFailure *uint32 `path:"signal-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) IsYANGGoStruct() {}

// GetSignalDegrade retrieves the value of the leaf SignalDegrade from the NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalDegrade is set, it can
// safely use t.GetSignalDegrade() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalDegrade == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) GetSignalDegrade() uint32 {
	if t == nil || t.SignalDegrade == nil {
		return 5
	}
	return *t.SignalDegrade
}

// GetSignalFailure retrieves the value of the leaf SignalFailure from the NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalFailure is set, it can
// safely use t.GetSignalFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) GetSignalFailure() uint32 {
	if t == nil || t.SignalFailure == nil {
		return 50
	}
	return *t.SignalFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SignalDegrade == nil {
		var v uint32 = 5
		t.SignalDegrade = &v
	}
	if t.SignalFailure == nil {
		var v uint32 = 50
		t.SignalFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold.
func (*NokiaConf_Configure_Port_Tdm_Ds1_BerThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup represents the /nokia-conf/configure/port/tdm/ds1/channel-group YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup struct {
	AdminState             E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Crc                    *uint32                                                        `path:"crc" module:"nokia-conf"`
	Description            *string                                                        `path:"description" module:"nokia-conf"`
	Ds0Index               *uint32                                                        `path:"ds0-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress          `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                            `path:"encap-type" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                           `path:"idle-cycle-flag" module:"nokia-conf"`
	IdlePayloadFill        *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill `path:"idle-payload-fill" module:"nokia-conf"`
	IdleSignalFill         *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill  `path:"idle-signal-fill" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm                        `path:"load-balancing-algorithm" module:"nokia-conf"`
	MacAddress             *string                                                        `path:"mac-address" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Mode           `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                                        `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network         `path:"network" module:"nokia-conf"`
	Ppp                    *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp             `path:"ppp" module:"nokia-conf"`
	Speed                  *uint32                                                        `path:"speed" module:"nokia-conf"`
	Timeslot               []uint32                                                       `path:"timeslot" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetOrCreateEgress() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress{}
	return t.Egress
}

// GetOrCreateIdlePayloadFill retrieves the value of the IdlePayloadFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetOrCreateIdlePayloadFill() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill {
	if t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	t.IdlePayloadFill = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill{}
	return t.IdlePayloadFill
}

// GetOrCreateIdleSignalFill retrieves the value of the IdleSignalFill field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetOrCreateIdleSignalFill() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill {
	if t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	t.IdleSignalFill = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill{}
	return t.IdleSignalFill
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetOrCreateNetwork() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetOrCreatePpp() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp{}
	return t.Ppp
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetEgress() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIdlePayloadFill returns the value of the IdlePayloadFill struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field IdlePayloadFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetIdlePayloadFill() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill {
	if t != nil && t.IdlePayloadFill != nil {
		return t.IdlePayloadFill
	}
	return nil
}

// GetIdleSignalFill returns the value of the IdleSignalFill struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field IdleSignalFill is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetIdleSignalFill() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill {
	if t != nil && t.IdleSignalFill != nil {
		return t.IdleSignalFill
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetNetwork() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetPpp() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return "DS0GRP"
	}
	return *t.Description
}

// GetDs0Index retrieves the value of the leaf Ds0Index from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds0Index is set, it can
// safely use t.GetDs0Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds0Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetDs0Index() uint32 {
	if t == nil || t.Ds0Index == nil {
		return 0
	}
	return *t.Ds0Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetMode() E_NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetSpeed retrieves the value of the leaf Speed from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Speed is set, it can
// safely use t.GetSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Speed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetSpeed() uint32 {
	if t == nil || t.Speed == nil {
		return 64
	}
	return *t.Speed
}

// GetTimeslot retrieves the value of the leaf Timeslot from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeslot is set, it can
// safely use t.GetTimeslot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeslot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) GetTimeslot() []uint32 {
	if t == nil || t.Timeslot == nil {
		return nil
	}
	return t.Timeslot
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Description == nil {
		var v string = "DS0GRP"
		t.Description = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.Speed == nil {
		var v uint32 = 64
		t.Speed = &v
	}
	t.Egress.PopulateDefaults()
	t.IdlePayloadFill.PopulateDefaults()
	t.IdleSignalFill.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ds0Index == nil {
		return nil, fmt.Errorf("nil value for key Ds0Index")
	}

	return map[string]interface{}{
		"ds0-index": *t.Ds0Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                             `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[uint32]*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate            *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate          `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel uint32) (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: &PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel uint32) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct {
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel      *uint32                                                                                               `path:"priority-level" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() uint32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/level/rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate struct {
	Cir NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetCir() NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) GetPir() NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_Level_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate represents the /nokia-conf/configure/port/tdm/ds1/channel-group/egress/port-scheduler-policy/overrides/max-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate struct {
	PercentRate *float64                                                                                              `path:"percent-rate" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) IsYANGGoStruct() {
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 100
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) GetRate() NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PercentRate == nil {
		var v float64 = 100
		t.PercentRate = &v
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Egress_PortSchedulerPolicy_Overrides_MaxRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill represents the /nokia-conf/configure/port/tdm/ds1/channel-group/idle-payload-fill YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdlePayloadFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill represents the /nokia-conf/configure/port/tdm/ds1/channel-group/idle-signal-fill YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill struct {
	AllOnes YANGEmpty `path:"all-ones" module:"nokia-conf"`
	Pattern *uint32   `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) IsYANGGoStruct() {}

// GetAllOnes retrieves the value of the leaf AllOnes from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOnes is set, it can
// safely use t.GetAllOnes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOnes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) GetAllOnes() YANGEmpty {
	if t == nil || t.AllOnes == false {
		return false
	}
	return t.AllOnes
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) GetPattern() uint32 {
	if t == nil || t.Pattern == nil {
		return 0
	}
	return *t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_IdleSignalFill) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network represents the /nokia-conf/configure/port/tdm/ds1/channel-group/network YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network struct {
	AccountingPolicy   *uint32  `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats       *bool    `path:"collect-stats" module:"nokia-conf"`
	QueuePolicy        *string  `path:"queue-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp represents the /nokia-conf/configure/port/tdm/ds1/channel-group/ppp YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	BerSfLinkDown      *bool                                                        `path:"ber-sf-link-down" module:"nokia-conf"`
	Compress           *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress  `path:"compress" module:"nokia-conf"`
	Keepalive          *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) IsYANGGoStruct() {}

// GetOrCreateCompress retrieves the value of the Compress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetOrCreateCompress() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress {
	if t.Compress != nil {
		return t.Compress
	}
	t.Compress = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress{}
	return t.Compress
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive{}
	return t.Keepalive
}

// GetCompress returns the value of the Compress struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp. If the receiver or the field Compress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetCompress() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress {
	if t != nil && t.Compress != nil {
		return t.Compress
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetKeepalive() *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBerSfLinkDown retrieves the value of the leaf BerSfLinkDown from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSfLinkDown is set, it can
// safely use t.GetBerSfLinkDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSfLinkDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) GetBerSfLinkDown() bool {
	if t == nil || t.BerSfLinkDown == nil {
		return false
	}
	return *t.BerSfLinkDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BerSfLinkDown == nil {
		var v bool = false
		t.BerSfLinkDown = &v
	}
	t.Compress.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress represents the /nokia-conf/configure/port/tdm/ds1/channel-group/ppp/compress YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress struct {
	Acfc *bool `path:"acfc" module:"nokia-conf"`
	Pfc  *bool `path:"pfc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) IsYANGGoStruct() {}

// GetAcfc retrieves the value of the leaf Acfc from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Acfc is set, it can
// safely use t.GetAcfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Acfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) GetAcfc() bool {
	if t == nil || t.Acfc == nil {
		return false
	}
	return *t.Acfc
}

// GetPfc retrieves the value of the leaf Pfc from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pfc is set, it can
// safely use t.GetPfc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pfc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) GetPfc() bool {
	if t == nil || t.Pfc == nil {
		return false
	}
	return *t.Pfc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Acfc == nil {
		var v bool = false
		t.Acfc = &v
	}
	if t.Pfc == nil {
		var v bool = false
		t.Pfc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Compress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive represents the /nokia-conf/configure/port/tdm/ds1/channel-group/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive struct {
	DropCount *uint32                                                                    `path:"drop-count" module:"nokia-conf"`
	Interval  NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) IsYANGGoStruct() {}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) GetInterval() NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(10)
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(10)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ChannelGroup_Ppp_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_HoldTime represents the /nokia-conf/configure/port/tdm/ds1/hold-time YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Port_Tdm_Ds1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Port_Tdm_Ds1_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Down == nil {
		var v uint32 = 0
		t.Down = &v
	}
	if t.Up == nil {
		var v uint32 = 0
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_HoldTime.
func (*NokiaConf_Configure_Port_Tdm_Ds1_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm represents the /nokia-conf/configure/port/tdm/ds1/report-alarm YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm struct {
	Ais    *bool `path:"ais" module:"nokia-conf"`
	BerSd  *bool `path:"ber-sd" module:"nokia-conf"`
	BerSf  *bool `path:"ber-sf" module:"nokia-conf"`
	Looped *bool `path:"looped" module:"nokia-conf"`
	Los    *bool `path:"los" module:"nokia-conf"`
	Oof    *bool `path:"oof" module:"nokia-conf"`
	Rai    *bool `path:"rai" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) IsYANGGoStruct() {}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return true
	}
	return *t.Ais
}

// GetBerSd retrieves the value of the leaf BerSd from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSd is set, it can
// safely use t.GetBerSd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetBerSd() bool {
	if t == nil || t.BerSd == nil {
		return false
	}
	return *t.BerSd
}

// GetBerSf retrieves the value of the leaf BerSf from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BerSf is set, it can
// safely use t.GetBerSf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BerSf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetBerSf() bool {
	if t == nil || t.BerSf == nil {
		return false
	}
	return *t.BerSf
}

// GetLooped retrieves the value of the leaf Looped from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Looped is set, it can
// safely use t.GetLooped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Looped == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetLooped() bool {
	if t == nil || t.Looped == nil {
		return false
	}
	return *t.Looped
}

// GetLos retrieves the value of the leaf Los from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Los is set, it can
// safely use t.GetLos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Los == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetLos() bool {
	if t == nil || t.Los == nil {
		return true
	}
	return *t.Los
}

// GetOof retrieves the value of the leaf Oof from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oof is set, it can
// safely use t.GetOof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetOof() bool {
	if t == nil || t.Oof == nil {
		return false
	}
	return *t.Oof
}

// GetRai retrieves the value of the leaf Rai from the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rai is set, it can
// safely use t.GetRai() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rai == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) GetRai() bool {
	if t == nil || t.Rai == nil {
		return false
	}
	return *t.Rai
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = true
		t.Ais = &v
	}
	if t.BerSd == nil {
		var v bool = false
		t.BerSd = &v
	}
	if t.BerSf == nil {
		var v bool = false
		t.BerSf = &v
	}
	if t.Looped == nil {
		var v bool = false
		t.Looped = &v
	}
	if t.Los == nil {
		var v bool = true
		t.Los = &v
	}
	if t.Oof == nil {
		var v bool = false
		t.Oof = &v
	}
	if t.Rai == nil {
		var v bool = false
		t.Rai = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm.
func (*NokiaConf_Configure_Port_Tdm_Ds1_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3 represents the /nokia-conf/configure/port/tdm/ds3 YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3 struct {
	AdminState             E_NokiaTypesSros_AdminState                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Channelized            E_NokiaConf_Configure_Port_Tdm_Ds3_Channelized        `path:"channelized" module:"nokia-conf"`
	ClockSource            E_NokiaConf_Configure_Port_Tdm_Ds3_ClockSource        `path:"clock-source" module:"nokia-conf"`
	Crc                    *uint32                                               `path:"crc" module:"nokia-conf"`
	Description            *string                                               `path:"description" module:"nokia-conf"`
	Ds3Index               *string                                               `path:"ds3-index" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Port_Tdm_Ds3_Egress              `path:"egress" module:"nokia-conf"`
	EncapType              E_NokiaTypesPort_SonetPathEncapType                   `path:"encap-type" module:"nokia-conf"`
	FeacLoopRespond        *bool                                                 `path:"feac-loop-respond" module:"nokia-conf"`
	Framing                E_NokiaConf_Configure_Port_Tdm_Ds3_Framing            `path:"framing" module:"nokia-conf"`
	IdleCycleFlag          E_NokiaTypesPort_TdmDsxIdleCycleFlag                  `path:"idle-cycle-flag" module:"nokia-conf"`
	LoadBalancingAlgorithm E_NokiaTypesPort_LoadBalancingAlgorithm               `path:"load-balancing-algorithm" module:"nokia-conf"`
	Loopback               E_NokiaConf_Configure_Port_Tdm_Ds3_Loopback           `path:"loopback" module:"nokia-conf"`
	MacAddress             *string                                               `path:"mac-address" module:"nokia-conf"`
	MaintenanceDataLink    *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink `path:"maintenance-data-link" module:"nokia-conf"`
	Mode                   E_NokiaConf_Configure_Port_Tdm_Ds3_Mode               `path:"mode" module:"nokia-conf"`
	Mtu                    *uint32                                               `path:"mtu" module:"nokia-conf"`
	Network                *NokiaConf_Configure_Port_Tdm_Ds3_Network             `path:"network" module:"nokia-conf"`
	Ppp                    *NokiaConf_Configure_Port_Tdm_Ds3_Ppp                 `path:"ppp" module:"nokia-conf"`
	ReportAlarm            *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm         `path:"report-alarm" module:"nokia-conf"`
	Scramble               *bool                                                 `path:"scramble" module:"nokia-conf"`
	Subrate                *NokiaConf_Configure_Port_Tdm_Ds3_Subrate             `path:"subrate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetOrCreateEgress() *NokiaConf_Configure_Port_Tdm_Ds3_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Port_Tdm_Ds3_Egress{}
	return t.Egress
}

// GetOrCreateMaintenanceDataLink retrieves the value of the MaintenanceDataLink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetOrCreateMaintenanceDataLink() *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink {
	if t.MaintenanceDataLink != nil {
		return t.MaintenanceDataLink
	}
	t.MaintenanceDataLink = &NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink{}
	return t.MaintenanceDataLink
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetOrCreateNetwork() *NokiaConf_Configure_Port_Tdm_Ds3_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Port_Tdm_Ds3_Network{}
	return t.Network
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetOrCreatePpp() *NokiaConf_Configure_Port_Tdm_Ds3_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Port_Tdm_Ds3_Ppp{}
	return t.Ppp
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetOrCreateReportAlarm() *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm{}
	return t.ReportAlarm
}

// GetOrCreateSubrate retrieves the value of the Subrate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetOrCreateSubrate() *NokiaConf_Configure_Port_Tdm_Ds3_Subrate {
	if t.Subrate != nil {
		return t.Subrate
	}
	t.Subrate = &NokiaConf_Configure_Port_Tdm_Ds3_Subrate{}
	return t.Subrate
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetEgress() *NokiaConf_Configure_Port_Tdm_Ds3_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetMaintenanceDataLink returns the value of the MaintenanceDataLink struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3. If the receiver or the field MaintenanceDataLink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetMaintenanceDataLink() *NokiaConf_Configure_Port_Tdm_Ds3_MaintenanceDataLink {
	if t != nil && t.MaintenanceDataLink != nil {
		return t.MaintenanceDataLink
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetNetwork() *NokiaConf_Configure_Port_Tdm_Ds3_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetPpp() *NokiaConf_Configure_Port_Tdm_Ds3_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetReportAlarm() *NokiaConf_Configure_Port_Tdm_Ds3_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetSubrate returns the value of the Subrate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3. If the receiver or the field Subrate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetSubrate() *NokiaConf_Configure_Port_Tdm_Ds3_Subrate {
	if t != nil && t.Subrate != nil {
		return t.Subrate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetChannelized retrieves the value of the leaf Channelized from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Channelized is set, it can
// safely use t.GetChannelized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Channelized == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetChannelized() E_NokiaConf_Configure_Port_Tdm_Ds3_Channelized {
	if t == nil || t.Channelized == 0 {
		return 0
	}
	return t.Channelized
}

// GetClockSource retrieves the value of the leaf ClockSource from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockSource is set, it can
// safely use t.GetClockSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetClockSource() E_NokiaConf_Configure_Port_Tdm_Ds3_ClockSource {
	if t == nil || t.ClockSource == 0 {
		return NokiaConf_Configure_Port_Tdm_Ds3_ClockSource_node_timed
	}
	return t.ClockSource
}

// GetCrc retrieves the value of the leaf Crc from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Crc is set, it can
// safely use t.GetCrc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Crc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetCrc() uint32 {
	if t == nil || t.Crc == nil {
		return 0
	}
	return *t.Crc
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetDescription() string {
	if t == nil || t.Description == nil {
		return "DS3"
	}
	return *t.Description
}

// GetDs3Index retrieves the value of the leaf Ds3Index from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ds3Index is set, it can
// safely use t.GetDs3Index() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ds3Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetDs3Index() string {
	if t == nil || t.Ds3Index == nil {
		return ""
	}
	return *t.Ds3Index
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetEncapType() E_NokiaTypesPort_SonetPathEncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetFeacLoopRespond retrieves the value of the leaf FeacLoopRespond from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FeacLoopRespond is set, it can
// safely use t.GetFeacLoopRespond() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FeacLoopRespond == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetFeacLoopRespond() bool {
	if t == nil || t.FeacLoopRespond == nil {
		return false
	}
	return *t.FeacLoopRespond
}

// GetFraming retrieves the value of the leaf Framing from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Framing is set, it can
// safely use t.GetFraming() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Framing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetFraming() E_NokiaConf_Configure_Port_Tdm_Ds3_Framing {
	if t == nil || t.Framing == 0 {
		return NokiaConf_Configure_Port_Tdm_Ds3_Framing_c_bit
	}
	return t.Framing
}

// GetIdleCycleFlag retrieves the value of the leaf IdleCycleFlag from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleCycleFlag is set, it can
// safely use t.GetIdleCycleFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleCycleFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetIdleCycleFlag() E_NokiaTypesPort_TdmDsxIdleCycleFlag {
	if t == nil || t.IdleCycleFlag == 0 {
		return 0
	}
	return t.IdleCycleFlag
}

// GetLoadBalancingAlgorithm retrieves the value of the leaf LoadBalancingAlgorithm from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingAlgorithm is set, it can
// safely use t.GetLoadBalancingAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetLoadBalancingAlgorithm() E_NokiaTypesPort_LoadBalancingAlgorithm {
	if t == nil || t.LoadBalancingAlgorithm == 0 {
		return 0
	}
	return t.LoadBalancingAlgorithm
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetLoopback() E_NokiaConf_Configure_Port_Tdm_Ds3_Loopback {
	if t == nil || t.Loopback == 0 {
		return 0
	}
	return t.Loopback
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetMode() E_NokiaConf_Configure_Port_Tdm_Ds3_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetScramble retrieves the value of the leaf Scramble from the NokiaConf_Configure_Port_Tdm_Ds3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scramble is set, it can
// safely use t.GetScramble() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scramble == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) GetScramble() bool {
	if t == nil || t.Scramble == nil {
		return false
	}
	return *t.Scramble
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClockSource == 0 {
		t.ClockSource = NokiaConf_Configure_Port_Tdm_Ds3_ClockSource_node_timed
	}
	if t.Description == nil {
		var v string = "DS3"
		t.Description = &v
	}
	if t.FeacLoopRespond == nil {
		var v bool = false
		t.FeacLoopRespond = &v
	}
	if t.Framing == 0 {
		t.Framing = NokiaConf_Configure_Port_Tdm_Ds3_Framing_c_bit
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	t.Egress.PopulateDefaults()
	t.MaintenanceDataLink.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ppp.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
	t.Subrate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_Ds3 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ds3Index == nil {
		return nil, fmt.Errorf("nil value for key Ds3Index")
	}

	return map[string]interface{}{
		"ds3-index": *t.Ds3Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3.
func (*NokiaConf_Configure_Port_Tdm_Ds3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Egress represents the /nokia-conf/configure/port/tdm/ds3/egress YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress struct {
	PortSchedulerPolicy *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy `path:"port-scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress) IsYANGGoStruct() {}

// GetOrCreatePortSchedulerPolicy retrieves the value of the PortSchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress) GetOrCreatePortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy {
	if t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	t.PortSchedulerPolicy = &NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy{}
	return t.PortSchedulerPolicy
}

// GetPortSchedulerPolicy returns the value of the PortSchedulerPolicy struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_Egress. If the receiver or the field PortSchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress) GetPortSchedulerPolicy() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy {
	if t != nil && t.PortSchedulerPolicy != nil {
		return t.PortSchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortSchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy represents the /nokia-conf/configure/port/tdm/ds3/egress/port-scheduler-policy YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) GetOverrides() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides represents the /nokia-conf/configure/port/tdm/ds3/egress/port-scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides struct {
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[uint32]*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level `path:"level" module:"nokia-conf"`
	MaxRate            *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate          `path:"max-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) NewLevel(PriorityLevel uint32) (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level{
		PriorityLevel: &PriorityLevel,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.PriorityLevel = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level {

	key := PriorityLevel

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetLevel(PriorityLevel uint32) *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) DeleteLevel(PriorityLevel uint32) {
	key := PriorityLevel

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level struct to the
// list Level of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) AppendLevel(v *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateMaxRate retrieves the value of the MaxRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetOrCreateMaxRate() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t.MaxRate != nil {
		return t.MaxRate
	}
	t.MaxRate = &NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate{}
	return t.MaxRate
}

// GetMaxRate returns the value of the MaxRate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides. If the receiver or the field MaxRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetMaxRate() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_MaxRate {
	if t != nil && t.MaxRate != nil {
		return t.MaxRate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaxRate.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level represents the /nokia-conf/configure/port/tdm/ds3/egress/port-scheduler-policy/overrides/level YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PriorityLevel      *uint32                                                                                  `path:"priority-level" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreatePercentRate() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetOrCreateRate() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetPercentRate() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetRate() *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) GetPriorityLevel() uint32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate represents the /nokia-conf/configure/port/tdm/ds3/egress/port-scheduler-policy/overrides/level/percent-rate YANG schema element.
type NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 100
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 100
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v float64 = 100
		t.Cir = &v
	}
	if t.Pir == nil {
		var v float64 = 100
		t.Pir = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate.
func (*NokiaConf_Configure_Port_Tdm_Ds3_Egress_PortSchedulerPolicy_Overrides_Level_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}
